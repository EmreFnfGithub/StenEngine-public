// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StenEngineLoading
#include <StenEngineLoading.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f79cb0fa3b65a808_29_new,"StenEngineLoading","new",0x59505602,"StenEngineLoading.new","StenEngineLoading.hx",29,0xcb97dfae)
HX_LOCAL_STACK_FRAME(_hx_pos_f79cb0fa3b65a808_49_create,"StenEngineLoading","create",0x3d08929a,"StenEngineLoading.create","StenEngineLoading.hx",49,0xcb97dfae)
HX_LOCAL_STACK_FRAME(_hx_pos_f79cb0fa3b65a808_33_create,"StenEngineLoading","create",0x3d08929a,"StenEngineLoading.create","StenEngineLoading.hx",33,0xcb97dfae)
HX_LOCAL_STACK_FRAME(_hx_pos_f79cb0fa3b65a808_53_update,"StenEngineLoading","update",0x47feb1a7,"StenEngineLoading.update","StenEngineLoading.hx",53,0xcb97dfae)

void StenEngineLoading_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_f79cb0fa3b65a808_29_new)
HXDLIN(  29)		super::__construct(TransIn,TransOut);
            	}

Dynamic StenEngineLoading_obj::__CreateEmpty() { return new StenEngineLoading_obj; }

void *StenEngineLoading_obj::_hx_vtable = 0;

Dynamic StenEngineLoading_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StenEngineLoading_obj > _hx_result = new StenEngineLoading_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool StenEngineLoading_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x444ba250) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x444ba250;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void StenEngineLoading_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_f79cb0fa3b65a808_49_create)
HXLINE(  49)			 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  49)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  49)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_f79cb0fa3b65a808_33_create)
HXLINE(  35)		::DiscordClient_obj::changePresence(HX_("Loading Sten Engine",14,e6,05,0b),null(),null(),null(),null());
HXLINE(  38)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  38)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("loadingscreen/loadingscreen",41,b2,1f,0b),null()),null(),null(),null(),null(),null());
HXLINE(  39)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  40)		this->bg->scrollFactor->set_y(((Float)0.10));
HXLINE(  41)		 ::flixel::FlxSprite _hx_tmp1 = this->bg;
HXDLIN(  41)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  42)		this->bg->updateHitbox();
HXLINE(  43)		{
HXLINE(  43)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  43)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  43)			bool _hx_tmp2;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  43)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp2) {
HXLINE(  43)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  43)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  43)			bool _hx_tmp3;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  43)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp3 = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp3) {
HXLINE(  43)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  43)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  44)		this->bg->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  45)		this->add(this->bg);
HXLINE(  47)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0()),null());
            	}


void StenEngineLoading_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_f79cb0fa3b65a808_53_update)
            	}



::hx::ObjectPtr< StenEngineLoading_obj > StenEngineLoading_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< StenEngineLoading_obj > __this = new StenEngineLoading_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< StenEngineLoading_obj > StenEngineLoading_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	StenEngineLoading_obj *__this = (StenEngineLoading_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StenEngineLoading_obj), true, "StenEngineLoading"));
	*(void **)__this = StenEngineLoading_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

StenEngineLoading_obj::StenEngineLoading_obj()
{
}

void StenEngineLoading_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StenEngineLoading);
	HX_MARK_MEMBER_NAME(bg,"bg");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StenEngineLoading_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(bg,"bg");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StenEngineLoading_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val StenEngineLoading_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StenEngineLoading_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("bg",c5,55,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StenEngineLoading_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(StenEngineLoading_obj,bg),HX_("bg",c5,55,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StenEngineLoading_obj_sStaticStorageInfo = 0;
#endif

static ::String StenEngineLoading_obj_sMemberFields[] = {
	HX_("bg",c5,55,00,00),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class StenEngineLoading_obj::__mClass;

void StenEngineLoading_obj::__register()
{
	StenEngineLoading_obj _hx_dummy;
	StenEngineLoading_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StenEngineLoading",10,ed,b0,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StenEngineLoading_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StenEngineLoading_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StenEngineLoading_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StenEngineLoading_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

