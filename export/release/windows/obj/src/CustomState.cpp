// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_OptionsDirect
#include <OptionsDirect.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_0622449ef633bdbb_28_new,"CustomState","new",0x8fca5572,"CustomState.new","CustomState.hx",28,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_44_create,"CustomState","create",0x6f9fd92a,"CustomState.create","CustomState.hx",44,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_138_update,"CustomState","update",0x7a95f837,"CustomState.update","CustomState.hx",138,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_30_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",30,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_31_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",31,0x2c449e3e)
HX_LOCAL_STACK_FRAME(_hx_pos_0622449ef633bdbb_32_boot,"CustomState","boot",0x39596ee0,"CustomState.boot","CustomState.hx",32,0x2c449e3e)

void CustomState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_28_new)
HXLINE(  36)		this->eventsEnter = false;
HXLINE(  35)		this->h6 = false;
HXLINE(  34)		this->h5 = false;
HXLINE(  28)		super::__construct(TransIn,TransOut);
            	}

Dynamic CustomState_obj::__CreateEmpty() { return new CustomState_obj; }

void *CustomState_obj::_hx_vtable = 0;

Dynamic CustomState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomState_obj > _hx_result = new CustomState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0265b184) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0265b184;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CustomState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_44_create)
HXLINE(  45)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/DiscordRPC.txt",aa,00,b7,b3)))) {
HXLINE(  47)			::String h10 = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/DiscordRPC.txt",aa,00,b7,b3)));
HXLINE(  50)			::DiscordClient_obj::changePresence(h10,null(),null(),null(),null());
            		}
HXLINE(  54)		::String h = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/enter.txt",0b,1a,cb,16)));
HXLINE(  55)		if ((h == HX_("StoryMenuState",5d,99,60,42))) {
HXLINE(  57)			 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  57)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  57)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  59)		if ((h == HX_("MainMenuState",59,88,5e,20))) {
HXLINE(  61)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  61)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  61)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  63)		if ((h == HX_("OptionsDirect",07,1d,f7,36))) {
HXLINE(  65)			 ::flixel::FlxState nextState =  ::OptionsDirect_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  65)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  65)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  67)		if ((h == HX_("Freeplaystate",51,f1,c4,20))) {
HXLINE(  69)			 ::flixel::FlxState nextState =  ::OptionsDirect_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  69)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  69)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  71)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/bg.png",ef,16,6d,3e)))) {
HXLINE(  73)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  73)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/bg.png",ef,16,6d,3e)),null(),null(),null(),null(),null());
HXLINE(  74)			bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  75)			bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  76)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  77)			bg1->updateHitbox();
HXLINE(  78)			{
HXLINE(  78)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  78)				bool _hx_tmp;
HXDLIN(  78)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(  78)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE(  78)						_hx_tmp = false;
            					}
            				}
HXDLIN(  78)				if (_hx_tmp) {
HXLINE(  78)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  78)					bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  78)				bool _hx_tmp1;
HXDLIN(  78)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(  78)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(  78)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(  78)				if (_hx_tmp1) {
HXLINE(  78)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  78)					bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  79)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  80)			this->add(bg1);
            		}
HXLINE(  83)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/downTextEnable.txt",ea,09,ea,76)))) {
HXLINE(  85)			::String h3 = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/downTextEnable.txt",ea,09,ea,76)));
HXLINE(  86)			::String h4 = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/downTextFont.txt",f6,5b,3c,5b)));
HXLINE(  87)			 ::flixel::text::FlxText thetext1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,h3,12,null());
HXLINE(  88)			thetext1->scrollFactor->set(null(),null());
HXLINE(  89)			thetext1->setFormat(h4,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  90)			this->add(thetext1);
            		}
HXLINE(  92)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/addPlayerChar.txt",44,fc,ba,15)))) {
HXLINE(  94)			::String readingChar = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/addPlayerChar.txt",44,fc,ba,15)));
HXLINE(  95)			::CustomState_obj::char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(300) ),readingChar,true);
HXLINE(  96)			 ::Character _hx_tmp = ::CustomState_obj::char1;
HXDLIN(  96)			_hx_tmp->setGraphicSize(::Std_obj::_hx_int((::CustomState_obj::char1->get_width() * ((Float)0.8))),null());
HXLINE(  97)			this->add(::CustomState_obj::char1);
HXLINE(  98)			::CustomState_obj::char1->set_visible(false);
HXLINE( 100)			if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/addPlayerChar.txt",44,fc,ba,15)))) {
HXLINE( 102)				::CustomState_obj::char1->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 103)				::CustomState_obj::char1->updateHitbox();
HXLINE( 104)				::CustomState_obj::char1->set_visible(true);
HXLINE( 105)				if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/playerCharNotesTrue.txt",c4,79,4f,16)))) {
HXLINE( 107)					if ((this->h6 == false)) {
HXLINE( 109)						::CustomState_obj::char1->set_visible(false);
HXLINE( 110)						this->h6 = true;
            					}
            				}
            			}
            		}
HXLINE( 118)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/playsong.txt",a1,ae,2e,b5)))) {
HXLINE( 120)			::String h8 = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/playsong.txt",a1,ae,2e,b5)));
HXLINE( 121)			::flixel::FlxG_obj::sound->playMusic(((((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/",2f,00,00,00)) + h8) + HX_(".ogg",e1,64,bc,1e)),null(),null(),null());
            		}
HXLINE( 124)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/startLink.txt",68,2e,a7,5f)))) {
HXLINE( 126)			::String h9 = ::sys::io::File_obj::getContent(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/startLink.txt",68,2e,a7,5f)));
HXLINE( 127)			::CoolUtil_obj::browserLoad(h9);
            		}
            	}


void CustomState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_0622449ef633bdbb_138_update)
HXLINE( 141)		if (::sys::FileSystem_obj::exists(((HX_("assets/custom/custom_mainmenustates/",99,d1,29,db) + ::CustomState_obj::statename) + HX_("/scripts/playerCharNotesTrue.txt",c4,79,4f,16)))) {
HXLINE( 143)			this->h5 = true;
            		}
HXLINE( 145)		if ((this->h5 == true)) {
HXLINE( 147)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 149)				::CustomState_obj::char1->playAnim(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 150)				::CustomState_obj::char1->updateHitbox();
HXLINE( 151)				::CustomState_obj::char1->set_visible(true);
            			}
HXLINE( 153)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 153)			if (_this->keyManager->checkStatusUnsafe(40,_this->status)) {
HXLINE( 155)				::CustomState_obj::char1->playAnim(HX_("singDOWN",31,2a,ad,36),null(),null(),null());
HXLINE( 156)				::CustomState_obj::char1->updateHitbox();
HXLINE( 157)				::CustomState_obj::char1->set_visible(true);
            			}
HXLINE( 159)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 159)			if (_this1->keyManager->checkStatusUnsafe(39,_this1->status)) {
HXLINE( 161)				::CustomState_obj::char1->playAnim(HX_("singRIGHT",0d,6f,70,ac),null(),null(),null());
HXLINE( 162)				::CustomState_obj::char1->updateHitbox();
HXLINE( 163)				::CustomState_obj::char1->set_visible(true);
            			}
HXLINE( 165)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 165)			if (_this2->keyManager->checkStatusUnsafe(38,_this2->status)) {
HXLINE( 167)				::CustomState_obj::char1->playAnim(HX_("singUP",6a,52,21,b9),null(),null(),null());
HXLINE( 168)				::CustomState_obj::char1->updateHitbox();
HXLINE( 169)				::CustomState_obj::char1->set_visible(true);
            			}
HXLINE( 171)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 171)			if (_this3->keyManager->checkStatusUnsafe(37,_this3->status)) {
HXLINE( 173)				::CustomState_obj::char1->playAnim(HX_("singLEFT",d6,39,ef,3b),null(),null(),null());
HXLINE( 174)				::CustomState_obj::char1->updateHitbox();
HXLINE( 175)				::CustomState_obj::char1->set_visible(true);
            			}
            		}
HXLINE( 179)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 181)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 181)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 181)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 183)		this->super::update(elapsed);
            	}


 ::Character CustomState_obj::char1;

::String CustomState_obj::hmmmmmmmmmmmmmmmm;

::String CustomState_obj::language;

::String CustomState_obj::statename;


::hx::ObjectPtr< CustomState_obj > CustomState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CustomState_obj > __this = new CustomState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CustomState_obj > CustomState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CustomState_obj *__this = (CustomState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomState_obj), true, "CustomState"));
	*(void **)__this = CustomState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CustomState_obj::CustomState_obj()
{
}

::hx::Val CustomState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"h5") ) { return ::hx::Val( h5 ); }
		if (HX_FIELD_EQ(inName,"h6") ) { return ::hx::Val( h6 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsEnter") ) { return ::hx::Val( eventsEnter ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CustomState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { outValue = ( char1 ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statename") ) { outValue = ( statename ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
	}
	return false;
}

::hx::Val CustomState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"h5") ) { h5=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h6") ) { h6=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"eventsEnter") ) { eventsEnter=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CustomState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"statename") ) { statename=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void CustomState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("h5",cd,5a,00,00));
	outFields->push(HX_("h6",ce,5a,00,00));
	outFields->push(HX_("eventsEnter",3f,33,77,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomState_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(CustomState_obj,h5),HX_("h5",cd,5a,00,00)},
	{::hx::fsBool,(int)offsetof(CustomState_obj,h6),HX_("h6",ce,5a,00,00)},
	{::hx::fsBool,(int)offsetof(CustomState_obj,eventsEnter),HX_("eventsEnter",3f,33,77,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CustomState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(void *) &CustomState_obj::char1,HX_("char1",9b,9c,b3,45)},
	{::hx::fsString,(void *) &CustomState_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsString,(void *) &CustomState_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsString,(void *) &CustomState_obj::statename,HX_("statename",dc,c4,cd,40)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CustomState_obj_sMemberFields[] = {
	HX_("h5",cd,5a,00,00),
	HX_("h6",ce,5a,00,00),
	HX_("eventsEnter",3f,33,77,1d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CustomState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CustomState_obj::char1,"char1");
	HX_MARK_MEMBER_NAME(CustomState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(CustomState_obj::language,"language");
	HX_MARK_MEMBER_NAME(CustomState_obj::statename,"statename");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CustomState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CustomState_obj::char1,"char1");
	HX_VISIT_MEMBER_NAME(CustomState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(CustomState_obj::language,"language");
	HX_VISIT_MEMBER_NAME(CustomState_obj::statename,"statename");
};

#endif

::hx::Class CustomState_obj::__mClass;

static ::String CustomState_obj_sStaticFields[] = {
	HX_("char1",9b,9c,b3,45),
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("language",58,80,11,7a),
	HX_("statename",dc,c4,cd,40),
	::String(null())
};

void CustomState_obj::__register()
{
	CustomState_obj _hx_dummy;
	CustomState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CustomState",80,74,7a,fd);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CustomState_obj::__GetStatic;
	__mClass->mSetStaticField = &CustomState_obj::__SetStatic;
	__mClass->mMarkFunc = CustomState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CustomState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CustomState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CustomState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_30_boot)
HXDLIN(  30)		char1 = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_31_boot)
HXDLIN(  31)		hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
            	}
{
            	HX_STACKFRAME(&_hx_pos_0622449ef633bdbb_32_boot)
HXDLIN(  32)		language = ::CustomState_obj::hmmmmmmmmmmmmmmmm;
            	}
}

