// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_EasterEggTitleState
#include <EasterEggTitleState.h>
#endif
#ifndef INCLUDED_Highscore
#include <Highscore.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StenEngineData
#include <StenEngineData.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_GraphicTransTileDiamond
#include <flixel/addons/transition/GraphicTransTileDiamond.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRect
#include <flixel/math/FlxRect.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_AngleTween
#include <flixel/tweens/misc/AngleTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_lime_utils_AssetLibrary
#include <lime/utils/AssetLibrary.h>
#endif
#ifndef INCLUDED_openfl_display_BitmapData
#include <openfl/display/BitmapData.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d915aeeff334652a_32_new,"EasterEggTitleState","new",0xf0169646,"EasterEggTitleState.new","EasterEggTitleState.hx",32,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_51_create,"EasterEggTitleState","create",0x209cd4d6,"EasterEggTitleState.create","EasterEggTitleState.hx",51,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_126_startIntro,"EasterEggTitleState","startIntro",0x7bda0584,"EasterEggTitleState.startIntro","EasterEggTitleState.hx",126,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_247_getIntroTextShit,"EasterEggTitleState","getIntroTextShit",0x13d2a17d,"EasterEggTitleState.getIntroTextShit","EasterEggTitleState.hx",247,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_265_update,"EasterEggTitleState","update",0x2b92f3e3,"EasterEggTitleState.update","EasterEggTitleState.hx",265,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_312_createCoolText,"EasterEggTitleState","createCoolText",0x2617a30c,"EasterEggTitleState.createCoolText","EasterEggTitleState.hx",312,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_323_addMoreText,"EasterEggTitleState","addMoreText",0x54141a09,"EasterEggTitleState.addMoreText","EasterEggTitleState.hx",323,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_333_deleteCoolText,"EasterEggTitleState","deleteCoolText",0x2db4433b,"EasterEggTitleState.deleteCoolText","EasterEggTitleState.hx",333,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_341_beatHit,"EasterEggTitleState","beatHit",0xcb379b63,"EasterEggTitleState.beatHit","EasterEggTitleState.hx",341,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_362_skipIntro,"EasterEggTitleState","skipIntro",0x60096dd3,"EasterEggTitleState.skipIntro","EasterEggTitleState.hx",362,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_377_skipIntro,"EasterEggTitleState","skipIntro",0x60096dd3,"EasterEggTitleState.skipIntro","EasterEggTitleState.hx",377,0xdc5753ea)
HX_LOCAL_STACK_FRAME(_hx_pos_d915aeeff334652a_37_boot,"EasterEggTitleState","boot",0x1bc5e78c,"EasterEggTitleState.boot","EasterEggTitleState.hx",37,0xdc5753ea)

void EasterEggTitleState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_32_new)
HXLINE( 359)		this->skippedIntro = false;
HXLINE( 261)		this->transitioning = false;
HXLINE( 122)		this->danceLeft = false;
HXLINE( 120)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 120)		::String library = null();
HXDLIN( 120)		this->backgroundTitle = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("oldback",4e,52,7c,0b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  46)		this->curWacky = ::Array_obj< ::String >::__new(0);
HXLINE(  32)		super::__construct(TransIn,TransOut);
            	}

Dynamic EasterEggTitleState_obj::__CreateEmpty() { return new EasterEggTitleState_obj; }

void *EasterEggTitleState_obj::_hx_vtable = 0;

Dynamic EasterEggTitleState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EasterEggTitleState_obj > _hx_result = new EasterEggTitleState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool EasterEggTitleState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x5a055acc) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x5a055acc;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void EasterEggTitleState_obj::create(){
            	HX_STACKFRAME(&_hx_pos_d915aeeff334652a_51_create)
HXLINE(  57)		if (!(::sys::FileSystem_obj::exists((::Sys_obj::getCwd() + HX_("/assets/replays",0f,a7,b1,e3))))) {
HXLINE(  58)			::sys::FileSystem_obj::createDirectory((::Sys_obj::getCwd() + HX_("/assets/replays",0f,a7,b1,e3)));
            		}
HXLINE(  63)		::String _hx_tmp = ((HX_("We loaded ",89,2a,cb,c1) + ::openfl::utils::Assets_obj::getLibrary(HX_("default",c1,d8,c3,9b))->assetsLoaded) + HX_(" assets into the default library",8a,a8,57,38));
HXDLIN(  63)		::Debug_obj::logTrace(_hx_tmp,::hx::SourceInfo(HX_("source/EasterEggTitleState.hx",de,39,c2,8b),63,HX_("EasterEggTitleState",54,bb,38,89),HX_("create",fc,66,0f,7c)));
HXLINE(  66)		::flixel::FlxG_obj::autoPause = false;
HXLINE(  68)		::flixel::FlxG_obj::save->bind(HX_("funkin",31,b2,4f,6f),HX_("ninjamuffin99",f7,4c,e5,00));
HXLINE(  70)		::PlayerSettings_obj::init();
HXLINE(  72)		::StenEngineData_obj::initSave();
HXLINE(  75)		::NoteskinHelpers_obj::updateNoteskins();
HXLINE(  77)		::String s = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("muteBind",36,71,98,10),::hx::paccDynamic)) );
HXDLIN(  77)		s = s.toUpperCase();
HXDLIN(  77)		int _hx_tmp1;
HXDLIN(  77)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(  77)			_hx_tmp1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE(  77)			_hx_tmp1 = -1;
            		}
HXDLIN(  77)		::flixel::FlxG_obj::sound->muteKeys = ::Array_obj< int >::__new(1)->init(0,_hx_tmp1);
HXLINE(  78)		::String s1 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("volDownBind",72,65,58,14),::hx::paccDynamic)) );
HXDLIN(  78)		s1 = s1.toUpperCase();
HXDLIN(  78)		int _hx_tmp2;
HXDLIN(  78)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(  78)			_hx_tmp2 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE(  78)			_hx_tmp2 = -1;
            		}
HXDLIN(  78)		::flixel::FlxG_obj::sound->volumeDownKeys = ::Array_obj< int >::__new(1)->init(0,_hx_tmp2);
HXLINE(  79)		::String s2 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("volUpBind",2b,c1,5a,38),::hx::paccDynamic)) );
HXDLIN(  79)		s2 = s2.toUpperCase();
HXDLIN(  79)		int _hx_tmp3;
HXDLIN(  79)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s2)) {
HXLINE(  79)			_hx_tmp3 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s2);
            		}
            		else {
HXLINE(  79)			_hx_tmp3 = -1;
            		}
HXDLIN(  79)		::flixel::FlxG_obj::sound->volumeUpKeys = ::Array_obj< int >::__new(1)->init(0,_hx_tmp3);
HXLINE(  81)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE(  83)		{
HXLINE(  83)			 ::flixel::math::FlxRect _this = ::flixel::FlxG_obj::worldBounds;
HXDLIN(  83)			_this->x = ( (Float)(0) );
HXDLIN(  83)			_this->y = ( (Float)(0) );
HXDLIN(  83)			_this->width = ( (Float)(0) );
HXDLIN(  83)			_this->height = ( (Float)(0) );
            		}
HXLINE(  85)		::flixel::graphics::FlxGraphic_obj::defaultPersist = ( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("cacheImages",9a,7c,33,1d),::hx::paccDynamic)) );
HXLINE(  87)		::MusicBeatState_obj::initSave = true;
HXLINE(  89)		::String s3 = ( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("fullscreenBind",98,95,ed,45),::hx::paccDynamic)) );
HXDLIN(  89)		s3 = s3.toUpperCase();
HXDLIN(  89)		int _hx_tmp4;
HXDLIN(  89)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s3)) {
HXLINE(  89)			_hx_tmp4 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s3);
            		}
            		else {
HXLINE(  89)			_hx_tmp4 = -1;
            		}
HXDLIN(  89)		this->fullscreenBind = _hx_tmp4;
HXLINE(  91)		::Highscore_obj::load();
HXLINE(  93)		 ::flixel::math::FlxRandom _hx_tmp5 = ::flixel::FlxG_obj::random;
HXDLIN(  93)		this->curWacky = _hx_tmp5->getObject_Array_String(this->getIntroTextShit(),null(),null(),null());
HXLINE(  99)		this->super::create();
HXLINE( 114)		this->startIntro();
            	}


void EasterEggTitleState_obj::startIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_126_startIntro)
HXLINE( 127)		this->persistentUpdate = true;
HXLINE( 129)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 129)		::String library = null();
HXDLIN( 129)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("oldback",4e,52,7c,0b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 134)		this->add(bg1);
HXLINE( 136)		if (::Main_obj::watermarks) {
HXLINE( 138)			this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-150,1500,null());
HXLINE( 139)			 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN( 139)			_hx_tmp->set_frames(::Paths_obj::getSparrowAtlas(HX_("StenEngineLogoBumpin",12,01,3f,60),null(),null()));
            		}
            		else {
HXLINE( 143)			this->logoBl =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-150,-100,null());
HXLINE( 144)			 ::flixel::FlxSprite _hx_tmp = this->logoBl;
HXDLIN( 144)			_hx_tmp->set_frames(::Paths_obj::getSparrowAtlas(HX_("logoBumpin",26,cb,02,ab),null(),null()));
            		}
HXLINE( 146)		this->logoBl->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 147)		this->logoBl->animation->addByPrefix(HX_("bump",f6,0f,20,41),HX_("logo bumpin",70,a1,0b,72),24,false,null(),null());
HXLINE( 148)		this->logoBl->updateHitbox();
HXLINE( 152)		{
HXLINE( 152)			 ::flixel::FlxSprite _this = this->backgroundTitle;
HXDLIN( 152)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 152)			bool _hx_tmp;
HXDLIN( 152)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 152)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 152)					_hx_tmp = false;
            				}
            			}
HXDLIN( 152)			if (_hx_tmp) {
HXLINE( 152)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 152)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 152)			bool _hx_tmp1;
HXDLIN( 152)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 152)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 152)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 152)			if (_hx_tmp1) {
HXLINE( 152)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 152)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 153)		this->backgroundTitle->set_antialiasing(true);
HXLINE( 155)		this->gfDance =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.2)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.03)),null());
HXLINE( 156)		 ::flixel::FlxSprite _hx_tmp2 = this->gfDance;
HXDLIN( 156)		_hx_tmp2->set_frames(::Paths_obj::getSparrowAtlas(HX_("logoold",1c,2e,a4,84),null(),null()));
HXLINE( 157)		this->gfDance->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 158)		this->add(this->gfDance);
HXLINE( 160)		this->titleText =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,100,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.8)),null());
HXLINE( 161)		 ::flixel::FlxSprite _hx_tmp3 = this->titleText;
HXDLIN( 161)		_hx_tmp3->set_frames(::Paths_obj::getSparrowAtlas(HX_("titleEnter",60,80,6b,82),null(),null()));
HXLINE( 162)		this->titleText->animation->addByPrefix(HX_("idle",14,a7,b3,45),HX_("Press Enter to Begin",e9,79,2c,83),24,null(),null(),null());
HXLINE( 163)		this->titleText->animation->addByPrefix(HX_("press",83,53,88,c8),HX_("ENTER PRESSED",5a,47,9f,63),24,null(),null(),null());
HXLINE( 164)		this->titleText->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 165)		this->titleText->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 166)		this->titleText->updateHitbox();
HXLINE( 170)		 ::flixel::FlxSprite logo =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN( 170)		 ::flixel::FlxSprite logo1 = logo->loadGraphic(::Paths_obj::loadImage(HX_("logo",6b,9f,b7,47),null()),null(),null(),null(),null(),null());
HXLINE( 171)		{
HXLINE( 171)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 171)			bool _hx_tmp4;
HXDLIN( 171)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 171)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE( 171)					_hx_tmp4 = false;
            				}
            			}
HXDLIN( 171)			if (_hx_tmp4) {
HXLINE( 171)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 171)				logo1->set_x(((( (Float)(_hx_tmp) ) - logo1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 171)			bool _hx_tmp5;
HXDLIN( 171)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 171)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 171)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 171)			if (_hx_tmp5) {
HXLINE( 171)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 171)				logo1->set_y(((( (Float)(_hx_tmp) ) - logo1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 172)		logo1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 178)		this->credGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 179)		this->add(this->credGroup);
HXLINE( 180)		this->textGroup =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 182)		this->blackScreen =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 183)		this->credGroup->add(this->blackScreen).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 185)		this->credTextShit =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("ninjamuffin99\nPhantomArcade\nkawaisprite\nevilsk8er",fd,7d,e3,3b),true,null(),null(),null(),null());
HXLINE( 186)		{
HXLINE( 186)			 ::Alphabet _this1 = this->credTextShit;
HXDLIN( 186)			 ::flixel::util::FlxAxes axes2 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 186)			bool _hx_tmp6;
HXDLIN( 186)			switch((int)(axes2->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 186)					_hx_tmp6 = true;
            				}
            				break;
            				default:{
HXLINE( 186)					_hx_tmp6 = false;
            				}
            			}
HXDLIN( 186)			if (_hx_tmp6) {
HXLINE( 186)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 186)				_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 186)			bool _hx_tmp7;
HXDLIN( 186)			switch((int)(axes2->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 186)					_hx_tmp7 = true;
            				}
            				break;
            				default:{
HXLINE( 186)					_hx_tmp7 = false;
            				}
            			}
HXDLIN( 186)			if (_hx_tmp7) {
HXLINE( 186)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 186)				_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 190)		this->credTextShit->set_visible(false);
HXLINE( 192)		 ::flixel::FlxSprite _hx_tmp8 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 192)		this->ngSpr = _hx_tmp8->loadGraphic(::Paths_obj::loadImage(HX_("newgrounds_logo",1e,5c,8d,a6),null()),null(),null(),null(),null(),null());
HXLINE( 193)		this->add(this->ngSpr);
HXLINE( 194)		this->ngSpr->set_visible(false);
HXLINE( 195)		 ::flixel::FlxSprite _hx_tmp9 = this->ngSpr;
HXDLIN( 195)		_hx_tmp9->setGraphicSize(::Std_obj::_hx_int((this->ngSpr->get_width() * ((Float)0.8))),null());
HXLINE( 196)		this->ngSpr->updateHitbox();
HXLINE( 197)		{
HXLINE( 197)			 ::flixel::FlxSprite _this2 = this->ngSpr;
HXDLIN( 197)			 ::flixel::util::FlxAxes axes3 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 197)			if (::hx::IsNull( axes3 )) {
HXLINE( 197)				axes3 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 197)			bool _hx_tmp10;
HXDLIN( 197)			switch((int)(axes3->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 197)					_hx_tmp10 = true;
            				}
            				break;
            				default:{
HXLINE( 197)					_hx_tmp10 = false;
            				}
            			}
HXDLIN( 197)			if (_hx_tmp10) {
HXLINE( 197)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 197)				_this2->set_x(((( (Float)(_hx_tmp) ) - _this2->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 197)			bool _hx_tmp11;
HXDLIN( 197)			switch((int)(axes3->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 197)					_hx_tmp11 = true;
            				}
            				break;
            				default:{
HXLINE( 197)					_hx_tmp11 = false;
            				}
            			}
HXDLIN( 197)			if (_hx_tmp11) {
HXLINE( 197)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 197)				_this2->set_y(((( (Float)(_hx_tmp) ) - _this2->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 198)		this->ngSpr->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 200)		 ::flixel::FlxSprite _hx_tmp12 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)0.52)),null());
HXDLIN( 200)		this->ngSpr2 = _hx_tmp12->loadGraphic(::Paths_obj::loadImage(HX_("engine_logo",48,14,9f,07),null()),null(),null(),null(),null(),null());
HXLINE( 201)		this->add(this->ngSpr2);
HXLINE( 202)		this->ngSpr2->set_visible(false);
HXLINE( 203)		 ::flixel::FlxSprite _hx_tmp13 = this->ngSpr2;
HXDLIN( 203)		_hx_tmp13->setGraphicSize(::Std_obj::_hx_int((this->ngSpr2->get_width() * ((Float)0.8))),null());
HXLINE( 204)		this->ngSpr2->updateHitbox();
HXLINE( 205)		{
HXLINE( 205)			 ::flixel::FlxSprite _this3 = this->ngSpr2;
HXDLIN( 205)			 ::flixel::util::FlxAxes axes4 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 205)			if (::hx::IsNull( axes4 )) {
HXLINE( 205)				axes4 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 205)			bool _hx_tmp14;
HXDLIN( 205)			switch((int)(axes4->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 205)					_hx_tmp14 = true;
            				}
            				break;
            				default:{
HXLINE( 205)					_hx_tmp14 = false;
            				}
            			}
HXDLIN( 205)			if (_hx_tmp14) {
HXLINE( 205)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 205)				_this3->set_x(((( (Float)(_hx_tmp) ) - _this3->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 205)			bool _hx_tmp15;
HXDLIN( 205)			switch((int)(axes4->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 205)					_hx_tmp15 = true;
            				}
            				break;
            				default:{
HXLINE( 205)					_hx_tmp15 = false;
            				}
            			}
HXDLIN( 205)			if (_hx_tmp15) {
HXLINE( 205)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 205)				_this3->set_y(((( (Float)(_hx_tmp) ) - _this3->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 206)		this->ngSpr2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 208)		::flixel::tweens::FlxTween_obj::tween(this->credTextShit, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("y",79,00,00,00),(this->credTextShit->y + 20))),((Float)2.9), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadInOut_dyn())
            			->setFixed(1,HX_("type",ba,f2,08,4d),4)));
HXLINE( 210)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 212)		if (::EasterEggTitleState_obj::initialized) {
HXLINE( 213)			this->skipIntro();
            		}
            		else {
HXLINE( 216)			 ::flixel::graphics::FlxGraphic diamond = ::flixel::graphics::FlxGraphic_obj::fromClass(::hx::ClassOf< ::flixel::addons::transition::GraphicTransTileDiamond >(),null(),null(),null());
HXLINE( 217)			diamond->persist = true;
HXLINE( 218)			diamond->set_destroyOnNoUse(false);
HXLINE( 220)			 ::flixel::math::FlxPoint _hx_tmp =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,-1);
HXDLIN( 220)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,1,_hx_tmp, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE( 222)			 ::flixel::math::FlxPoint _hx_tmp1 =  ::flixel::math::FlxPoint_obj::__alloc( HX_CTX ,0,1);
HXDLIN( 222)			::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut =  ::flixel::addons::transition::TransitionData_obj::__alloc( HX_CTX ,HX_("fade",7c,b5,b5,43),-16777216,((Float)0.7),_hx_tmp1, ::Dynamic(::hx::Anon_obj::Create(3)
            				->setFixed(0,HX_("width",06,b6,62,ca),32)
            				->setFixed(1,HX_("height",e7,07,4c,02),32)
            				->setFixed(2,HX_("asset",f0,69,39,26),diamond)), ::flixel::math::FlxRect_obj::__alloc( HX_CTX ,-200,-200,(( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.4)),(( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.4))));
HXLINE( 225)			this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE( 226)			this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE( 236)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp2 = ::flixel::FlxG_obj::sound;
HXDLIN( 236)			::String library = null();
HXDLIN( 236)			_hx_tmp2->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("old",a7,98,54,00)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),0,null(),null());
HXLINE( 238)			{
HXLINE( 238)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 238)				 ::Dynamic onComplete = null();
HXDLIN( 238)				if (::hx::IsNull( _this->_channel )) {
HXLINE( 238)					_this->play(null(),null(),null());
            				}
HXDLIN( 238)				if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 238)					_this->fadeTween->cancel();
            				}
HXDLIN( 238)				_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.7),4, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            			}
HXLINE( 239)			::Conductor_obj::changeBPM(( (Float)(102) ),null());
HXLINE( 240)			::EasterEggTitleState_obj::initialized = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EasterEggTitleState_obj,startIntro,(void))

::Array< ::Dynamic> EasterEggTitleState_obj::getIntroTextShit(){
            	HX_STACKFRAME(&_hx_pos_d915aeeff334652a_247_getIntroTextShit)
HXLINE( 248)		::String library = null();
HXDLIN( 248)		::String fullText = ::openfl::utils::Assets_obj::getText(::Paths_obj::getPath((HX_("data/introText",d4,d9,bb,0c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE( 250)		::Array< ::String > firstArray = fullText.split(HX_("\n",0a,00,00,00));
HXLINE( 251)		::Array< ::Dynamic> swagGoodArray = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 253)		{
HXLINE( 253)			int _g = 0;
HXDLIN( 253)			while((_g < firstArray->length)){
HXLINE( 253)				::String i = firstArray->__get(_g);
HXDLIN( 253)				_g = (_g + 1);
HXLINE( 255)				swagGoodArray->push(i.split(HX_("--",60,27,00,00)));
            			}
            		}
HXLINE( 258)		return swagGoodArray;
            	}


HX_DEFINE_DYNAMIC_FUNC0(EasterEggTitleState_obj,getIntroTextShit,return )

void EasterEggTitleState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_265_update)
HXLINE( 266)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE( 267)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
            		}
HXLINE( 269)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::__new(1)->init(0,this->fullscreenBind),2)) {
HXLINE( 271)			::flixel::FlxG_obj::set_fullscreen(!(::flixel::FlxG_obj::get_fullscreen()));
            		}
HXLINE( 274)		bool pressedEnter = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 286)		bool _hx_tmp;
HXDLIN( 286)		bool _hx_tmp1;
HXDLIN( 286)		if (pressedEnter) {
HXLINE( 286)			_hx_tmp1 = !(this->transitioning);
            		}
            		else {
HXLINE( 286)			_hx_tmp1 = false;
            		}
HXDLIN( 286)		if (_hx_tmp1) {
HXLINE( 286)			_hx_tmp = this->skippedIntro;
            		}
            		else {
HXLINE( 286)			_hx_tmp = false;
            		}
HXDLIN( 286)		if (_hx_tmp) {
HXLINE( 288)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
HXLINE( 289)				this->titleText->animation->play(HX_("press",83,53,88,c8),null(),null(),null());
            			}
HXLINE( 291)			::flixel::FlxG_obj::camera->flash(-1,1,null(),null());
HXLINE( 292)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 292)			_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),((Float)0.7),null(),null(),null(),null());
HXLINE( 294)			this->transitioning = true;
HXLINE( 297)			::MainMenuState_obj::firstStart = true;
HXLINE( 298)			::MainMenuState_obj::finishedFunnyMove = false;
HXLINE( 299)			{
HXLINE( 299)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 299)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 299)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 302)		bool _hx_tmp2;
HXDLIN( 302)		bool _hx_tmp3;
HXDLIN( 302)		if (pressedEnter) {
HXLINE( 302)			_hx_tmp3 = !(this->skippedIntro);
            		}
            		else {
HXLINE( 302)			_hx_tmp3 = false;
            		}
HXDLIN( 302)		if (_hx_tmp3) {
HXLINE( 302)			_hx_tmp2 = ::EasterEggTitleState_obj::initialized;
            		}
            		else {
HXLINE( 302)			_hx_tmp2 = false;
            		}
HXDLIN( 302)		if (_hx_tmp2) {
HXLINE( 304)			this->skipIntro();
            		}
HXLINE( 307)		this->super::update(elapsed);
            	}


void EasterEggTitleState_obj::createCoolText(::Array< ::String > textArray){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_312_createCoolText)
HXDLIN( 312)		int _g = 0;
HXDLIN( 312)		int _g1 = textArray->length;
HXDLIN( 312)		while((_g < _g1)){
HXDLIN( 312)			_g = (_g + 1);
HXDLIN( 312)			int i = (_g - 1);
HXLINE( 314)			 ::Alphabet money =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),textArray->__get(i),true,false,null(),null(),null());
HXLINE( 315)			{
HXLINE( 315)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 315)				if (::hx::IsNull( axes )) {
HXLINE( 315)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 315)				bool _hx_tmp;
HXDLIN( 315)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 315)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 315)						_hx_tmp = false;
            					}
            				}
HXDLIN( 315)				if (_hx_tmp) {
HXLINE( 315)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 315)					money->set_x(((( (Float)(_hx_tmp) ) - money->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 315)				bool _hx_tmp1;
HXDLIN( 315)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 315)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 315)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 315)				if (_hx_tmp1) {
HXLINE( 315)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 315)					money->set_y(((( (Float)(_hx_tmp) ) - money->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 316)			{
HXLINE( 316)				 ::Alphabet _g1 = money;
HXDLIN( 316)				_g1->set_y((_g1->y + ((i * 60) + 200)));
            			}
HXLINE( 317)			this->credGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 318)			this->textGroup->add(money).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(EasterEggTitleState_obj,createCoolText,(void))

void EasterEggTitleState_obj::addMoreText(::String text){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_323_addMoreText)
HXLINE( 324)		 ::Alphabet coolText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),text,true,false,null(),null(),null());
HXLINE( 325)		{
HXLINE( 325)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 325)			if (::hx::IsNull( axes )) {
HXLINE( 325)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 325)			bool _hx_tmp;
HXDLIN( 325)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 325)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 325)					_hx_tmp = false;
            				}
            			}
HXDLIN( 325)			if (_hx_tmp) {
HXLINE( 325)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 325)				coolText->set_x(((( (Float)(_hx_tmp) ) - coolText->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 325)			bool _hx_tmp1;
HXDLIN( 325)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 325)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 325)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 325)			if (_hx_tmp1) {
HXLINE( 325)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 325)				coolText->set_y(((( (Float)(_hx_tmp) ) - coolText->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 326)		{
HXLINE( 326)			 ::Alphabet _g = coolText;
HXDLIN( 326)			_g->set_y((_g->y + ((this->textGroup->length * 60) + 200)));
            		}
HXLINE( 327)		this->credGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 328)		this->textGroup->add(coolText).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC1(EasterEggTitleState_obj,addMoreText,(void))

void EasterEggTitleState_obj::deleteCoolText(){
            	HX_STACKFRAME(&_hx_pos_d915aeeff334652a_333_deleteCoolText)
HXDLIN( 333)		while((this->textGroup->members->get_length() > 0)){
HXLINE( 335)			this->credGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
HXLINE( 336)			this->textGroup->remove(Dynamic( this->textGroup->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EasterEggTitleState_obj,deleteCoolText,(void))

void EasterEggTitleState_obj::beatHit(){
            	HX_STACKFRAME(&_hx_pos_d915aeeff334652a_341_beatHit)
HXLINE( 342)		this->super::beatHit();
HXLINE( 344)		this->logoBl->animation->play(HX_("bump",f6,0f,20,41),true,null(),null());
HXLINE( 345)		this->danceLeft = !(this->danceLeft);
HXLINE( 347)		switch((int)(this->curBeat)){
            			case (int)0: {
HXLINE( 350)				this->deleteCoolText();
            			}
            			break;
            			case (int)1: {
HXLINE( 352)				this->deleteCoolText();
            			}
            			break;
            			case (int)2: {
HXLINE( 354)				::MainMenuState_obj::gameVer = HX_("0.0 LDP",2a,70,0d,e9);
HXLINE( 355)				this->skipIntro();
            			}
            			break;
            		}
            	}


void EasterEggTitleState_obj::skipIntro(){
            	HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_362_skipIntro)
HXLINE( 361)		 ::EasterEggTitleState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 363)		if (!(this->skippedIntro)) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::EasterEggTitleState,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_d915aeeff334652a_377_skipIntro)
HXLINE( 378)				if ((_gthis->logoBl->angle == -4)) {
HXLINE( 379)					::flixel::tweens::FlxTween_obj::angle(_gthis->logoBl,_gthis->logoBl->angle,( (Float)(4) ),4, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
HXLINE( 380)				if ((_gthis->logoBl->angle == 4)) {
HXLINE( 381)					::flixel::tweens::FlxTween_obj::angle(_gthis->logoBl,_gthis->logoBl->angle,( (Float)(-4) ),4, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 365)			{
HXLINE( 365)				 ::Dynamic input = HX_("Skipping intro...",71,26,27,37);
HXDLIN( 365)				if (::hx::IsNotNull( input )) {
HXLINE( 365)					::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/EasterEggTitleState.hx",de,39,c2,8b),365,HX_("EasterEggTitleState",54,bb,38,89),HX_("skipIntro",6d,37,1c,d2)));
HXDLIN( 365)					::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_INFO);
HXDLIN( 365)					::Debug_obj::writeToLogFile(output,HX_("INFO",6e,00,7c,30));
            				}
            			}
HXLINE( 367)			this->remove(this->ngSpr,null());
HXLINE( 369)			::flixel::FlxG_obj::camera->flash(-1,4,null(),null());
HXLINE( 370)			this->remove(this->credGroup,null());
HXLINE( 372)			::flixel::tweens::FlxTween_obj::tween(this->logoBl, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),-100)),((Float)1.4), ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())));
HXLINE( 374)			this->logoBl->set_angle(( (Float)(-4) ));
HXLINE( 376)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.01), ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE( 386)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(9400) ));
HXLINE( 388)			this->skippedIntro = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(EasterEggTitleState_obj,skipIntro,(void))

bool EasterEggTitleState_obj::initialized;


::hx::ObjectPtr< EasterEggTitleState_obj > EasterEggTitleState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< EasterEggTitleState_obj > __this = new EasterEggTitleState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< EasterEggTitleState_obj > EasterEggTitleState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	EasterEggTitleState_obj *__this = (EasterEggTitleState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EasterEggTitleState_obj), true, "EasterEggTitleState"));
	*(void **)__this = EasterEggTitleState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

EasterEggTitleState_obj::EasterEggTitleState_obj()
{
}

void EasterEggTitleState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EasterEggTitleState);
	HX_MARK_MEMBER_NAME(blackScreen,"blackScreen");
	HX_MARK_MEMBER_NAME(credGroup,"credGroup");
	HX_MARK_MEMBER_NAME(credTextShit,"credTextShit");
	HX_MARK_MEMBER_NAME(textGroup,"textGroup");
	HX_MARK_MEMBER_NAME(ngSpr,"ngSpr");
	HX_MARK_MEMBER_NAME(ngSpr2,"ngSpr2");
	HX_MARK_MEMBER_NAME(curWacky,"curWacky");
	HX_MARK_MEMBER_NAME(wackyImage,"wackyImage");
	HX_MARK_MEMBER_NAME(logoBl,"logoBl");
	HX_MARK_MEMBER_NAME(backgroundTitle,"backgroundTitle");
	HX_MARK_MEMBER_NAME(gfDance,"gfDance");
	HX_MARK_MEMBER_NAME(danceLeft,"danceLeft");
	HX_MARK_MEMBER_NAME(titleText,"titleText");
	HX_MARK_MEMBER_NAME(transitioning,"transitioning");
	HX_MARK_MEMBER_NAME(fullscreenBind,"fullscreenBind");
	HX_MARK_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void EasterEggTitleState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(blackScreen,"blackScreen");
	HX_VISIT_MEMBER_NAME(credGroup,"credGroup");
	HX_VISIT_MEMBER_NAME(credTextShit,"credTextShit");
	HX_VISIT_MEMBER_NAME(textGroup,"textGroup");
	HX_VISIT_MEMBER_NAME(ngSpr,"ngSpr");
	HX_VISIT_MEMBER_NAME(ngSpr2,"ngSpr2");
	HX_VISIT_MEMBER_NAME(curWacky,"curWacky");
	HX_VISIT_MEMBER_NAME(wackyImage,"wackyImage");
	HX_VISIT_MEMBER_NAME(logoBl,"logoBl");
	HX_VISIT_MEMBER_NAME(backgroundTitle,"backgroundTitle");
	HX_VISIT_MEMBER_NAME(gfDance,"gfDance");
	HX_VISIT_MEMBER_NAME(danceLeft,"danceLeft");
	HX_VISIT_MEMBER_NAME(titleText,"titleText");
	HX_VISIT_MEMBER_NAME(transitioning,"transitioning");
	HX_VISIT_MEMBER_NAME(fullscreenBind,"fullscreenBind");
	HX_VISIT_MEMBER_NAME(skippedIntro,"skippedIntro");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val EasterEggTitleState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { return ::hx::Val( ngSpr ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ngSpr2") ) { return ::hx::Val( ngSpr2 ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"logoBl") ) { return ::hx::Val( logoBl ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { return ::hx::Val( gfDance ); }
		if (HX_FIELD_EQ(inName,"beatHit") ) { return ::hx::Val( beatHit_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { return ::hx::Val( curWacky ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { return ::hx::Val( credGroup ); }
		if (HX_FIELD_EQ(inName,"textGroup") ) { return ::hx::Val( textGroup ); }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { return ::hx::Val( danceLeft ); }
		if (HX_FIELD_EQ(inName,"titleText") ) { return ::hx::Val( titleText ); }
		if (HX_FIELD_EQ(inName,"skipIntro") ) { return ::hx::Val( skipIntro_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { return ::hx::Val( wackyImage ); }
		if (HX_FIELD_EQ(inName,"startIntro") ) { return ::hx::Val( startIntro_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { return ::hx::Val( blackScreen ); }
		if (HX_FIELD_EQ(inName,"addMoreText") ) { return ::hx::Val( addMoreText_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { return ::hx::Val( credTextShit ); }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { return ::hx::Val( skippedIntro ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { return ::hx::Val( transitioning ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fullscreenBind") ) { return ::hx::Val( fullscreenBind ); }
		if (HX_FIELD_EQ(inName,"createCoolText") ) { return ::hx::Val( createCoolText_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteCoolText") ) { return ::hx::Val( deleteCoolText_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundTitle") ) { return ::hx::Val( backgroundTitle ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"getIntroTextShit") ) { return ::hx::Val( getIntroTextShit_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool EasterEggTitleState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { outValue = ( initialized ); return true; }
	}
	return false;
}

::hx::Val EasterEggTitleState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"ngSpr") ) { ngSpr=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"ngSpr2") ) { ngSpr2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"logoBl") ) { logoBl=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gfDance") ) { gfDance=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"curWacky") ) { curWacky=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"credGroup") ) { credGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textGroup") ) { textGroup=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"danceLeft") ) { danceLeft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"titleText") ) { titleText=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"wackyImage") ) { wackyImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"blackScreen") ) { blackScreen=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"credTextShit") ) { credTextShit=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"skippedIntro") ) { skippedIntro=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"transitioning") ) { transitioning=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"fullscreenBind") ) { fullscreenBind=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"backgroundTitle") ) { backgroundTitle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool EasterEggTitleState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"initialized") ) { initialized=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void EasterEggTitleState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("blackScreen",8b,de,f4,5d));
	outFields->push(HX_("credGroup",91,7f,9c,9c));
	outFields->push(HX_("credTextShit",fb,55,c1,3c));
	outFields->push(HX_("textGroup",52,43,e2,32));
	outFields->push(HX_("ngSpr",7c,26,68,9a));
	outFields->push(HX_("ngSpr2",36,86,b9,80));
	outFields->push(HX_("curWacky",67,31,c6,0c));
	outFields->push(HX_("wackyImage",d4,7e,d6,81));
	outFields->push(HX_("logoBl",15,ca,6e,5c));
	outFields->push(HX_("backgroundTitle",ca,f2,25,d3));
	outFields->push(HX_("gfDance",94,88,3a,eb));
	outFields->push(HX_("danceLeft",da,cc,f9,df));
	outFields->push(HX_("titleText",65,ba,a4,70));
	outFields->push(HX_("transitioning",6d,6a,93,94));
	outFields->push(HX_("fullscreenBind",98,95,ed,45));
	outFields->push(HX_("skippedIntro",9c,44,26,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo EasterEggTitleState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,blackScreen),HX_("blackScreen",8b,de,f4,5d)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EasterEggTitleState_obj,credGroup),HX_("credGroup",91,7f,9c,9c)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(EasterEggTitleState_obj,credTextShit),HX_("credTextShit",fb,55,c1,3c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(EasterEggTitleState_obj,textGroup),HX_("textGroup",52,43,e2,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,ngSpr),HX_("ngSpr",7c,26,68,9a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,ngSpr2),HX_("ngSpr2",36,86,b9,80)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(EasterEggTitleState_obj,curWacky),HX_("curWacky",67,31,c6,0c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,wackyImage),HX_("wackyImage",d4,7e,d6,81)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,logoBl),HX_("logoBl",15,ca,6e,5c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,backgroundTitle),HX_("backgroundTitle",ca,f2,25,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,gfDance),HX_("gfDance",94,88,3a,eb)},
	{::hx::fsBool,(int)offsetof(EasterEggTitleState_obj,danceLeft),HX_("danceLeft",da,cc,f9,df)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(EasterEggTitleState_obj,titleText),HX_("titleText",65,ba,a4,70)},
	{::hx::fsBool,(int)offsetof(EasterEggTitleState_obj,transitioning),HX_("transitioning",6d,6a,93,94)},
	{::hx::fsInt,(int)offsetof(EasterEggTitleState_obj,fullscreenBind),HX_("fullscreenBind",98,95,ed,45)},
	{::hx::fsBool,(int)offsetof(EasterEggTitleState_obj,skippedIntro),HX_("skippedIntro",9c,44,26,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo EasterEggTitleState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &EasterEggTitleState_obj::initialized,HX_("initialized",14,f5,0f,37)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String EasterEggTitleState_obj_sMemberFields[] = {
	HX_("blackScreen",8b,de,f4,5d),
	HX_("credGroup",91,7f,9c,9c),
	HX_("credTextShit",fb,55,c1,3c),
	HX_("textGroup",52,43,e2,32),
	HX_("ngSpr",7c,26,68,9a),
	HX_("ngSpr2",36,86,b9,80),
	HX_("curWacky",67,31,c6,0c),
	HX_("wackyImage",d4,7e,d6,81),
	HX_("create",fc,66,0f,7c),
	HX_("logoBl",15,ca,6e,5c),
	HX_("backgroundTitle",ca,f2,25,d3),
	HX_("gfDance",94,88,3a,eb),
	HX_("danceLeft",da,cc,f9,df),
	HX_("titleText",65,ba,a4,70),
	HX_("startIntro",aa,a2,37,da),
	HX_("getIntroTextShit",23,9f,f3,eb),
	HX_("transitioning",6d,6a,93,94),
	HX_("fullscreenBind",98,95,ed,45),
	HX_("update",09,86,05,87),
	HX_("createCoolText",32,cb,41,41),
	HX_("addMoreText",23,fe,9f,87),
	HX_("deleteCoolText",61,6b,de,48),
	HX_("beatHit",7d,ea,04,74),
	HX_("skippedIntro",9c,44,26,49),
	HX_("skipIntro",6d,37,1c,d2),
	::String(null()) };

static void EasterEggTitleState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EasterEggTitleState_obj::initialized,"initialized");
};

#ifdef HXCPP_VISIT_ALLOCS
static void EasterEggTitleState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EasterEggTitleState_obj::initialized,"initialized");
};

#endif

::hx::Class EasterEggTitleState_obj::__mClass;

static ::String EasterEggTitleState_obj_sStaticFields[] = {
	HX_("initialized",14,f5,0f,37),
	::String(null())
};

void EasterEggTitleState_obj::__register()
{
	EasterEggTitleState_obj _hx_dummy;
	EasterEggTitleState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("EasterEggTitleState",54,bb,38,89);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &EasterEggTitleState_obj::__GetStatic;
	__mClass->mSetStaticField = &EasterEggTitleState_obj::__SetStatic;
	__mClass->mMarkFunc = EasterEggTitleState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(EasterEggTitleState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EasterEggTitleState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EasterEggTitleState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = EasterEggTitleState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EasterEggTitleState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EasterEggTitleState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void EasterEggTitleState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_d915aeeff334652a_37_boot)
HXDLIN(  37)		initialized = false;
            	}
}

