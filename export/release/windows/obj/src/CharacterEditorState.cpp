// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_CharacterEditorState
#include <CharacterEditorState.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_EngineEditorsState
#include <EngineEditorsState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_6f5794a617cf450f_26_new,"CharacterEditorState","new",0x6fda228d,"CharacterEditorState.new","CharacterEditorState.hx",26,0xa0122d83)
HX_LOCAL_STACK_FRAME(_hx_pos_6f5794a617cf450f_35_create,"CharacterEditorState","create",0x5586eeef,"CharacterEditorState.create","CharacterEditorState.hx",35,0xa0122d83)
HX_LOCAL_STACK_FRAME(_hx_pos_6f5794a617cf450f_66_OnClickButton,"CharacterEditorState","OnClickButton",0xec35d1c8,"CharacterEditorState.OnClickButton","CharacterEditorState.hx",66,0xa0122d83)
HX_LOCAL_STACK_FRAME(_hx_pos_6f5794a617cf450f_71_update,"CharacterEditorState","update",0x607d0dfc,"CharacterEditorState.update","CharacterEditorState.hx",71,0xa0122d83)
HX_LOCAL_STACK_FRAME(_hx_pos_6f5794a617cf450f_28_boot,"CharacterEditorState","boot",0x671d1965,"CharacterEditorState.boot","CharacterEditorState.hx",28,0xa0122d83)

void CharacterEditorState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_6f5794a617cf450f_26_new)
HXLINE(  33)		this->charnamee = HX_("dad",47,36,4c,00);
HXLINE(  32)		this->name = 0;
HXLINE(  26)		super::__construct(TransIn,TransOut);
            	}

Dynamic CharacterEditorState_obj::__CreateEmpty() { return new CharacterEditorState_obj; }

void *CharacterEditorState_obj::_hx_vtable = 0;

Dynamic CharacterEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CharacterEditorState_obj > _hx_result = new CharacterEditorState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CharacterEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0669563f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0669563f;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CharacterEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_6f5794a617cf450f_35_create)
HXLINE(  38)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  38)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),null()),null(),null(),null(),null(),null());
HXLINE(  39)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  40)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  41)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  42)		bg1->updateHitbox();
HXLINE(  43)		{
HXLINE(  43)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  43)			bool _hx_tmp;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  43)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp) {
HXLINE(  43)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  43)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  43)			bool _hx_tmp1;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  43)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp1) {
HXLINE(  43)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  43)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  44)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  45)		this->add(bg1);
HXLINE(  47)		::CharacterEditorState_obj::char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(180) ),HX_("bf",c4,55,00,00),true);
HXLINE(  48)		 ::Character _hx_tmp2 = ::CharacterEditorState_obj::char1;
HXDLIN(  48)		_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((::CharacterEditorState_obj::char1->get_width() * ((Float)0.8))),null());
HXLINE(  49)		this->add(::CharacterEditorState_obj::char1);
HXLINE(  50)		::CharacterEditorState_obj::char1->set_visible(false);
HXLINE(  53)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(this->name + HX_(" Developer Mode - Press p to change char",a8,3c,3d,1b)),12,null());
HXLINE(  54)		versionShit->scrollFactor->set(null(),null());
HXLINE(  55)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  56)		this->add(versionShit);
HXLINE(  62)		this->super::create();
            	}


void CharacterEditorState_obj::OnClickButton(){
            	HX_STACKFRAME(&_hx_pos_6f5794a617cf450f_66_OnClickButton)
            	}


HX_DEFINE_DYNAMIC_FUNC0(CharacterEditorState_obj,OnClickButton,(void))

void CharacterEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_6f5794a617cf450f_71_update)
HXLINE(  74)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  76)			 ::flixel::FlxState nextState =  ::EngineEditorsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  76)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  76)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE(  79)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE(  81)			::CharacterEditorState_obj::char1->dance(null(),null());
HXLINE(  82)			::CharacterEditorState_obj::char1->updateHitbox();
HXLINE(  83)			::CharacterEditorState_obj::char1->set_visible(true);
            		}
HXLINE(  86)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  86)		if (_this->keyManager->checkStatusUnsafe(80,_this->status)) {
HXLINE(  88)			this->name++;
HXLINE(  90)			if ((this->name == 1)) {
HXLINE(  92)				this->charnamee = HX_("dad",47,36,4c,00);
            			}
HXLINE(  95)			if ((this->name == 2)) {
HXLINE(  97)				this->charnamee = HX_("spooky",eb,bd,9e,c1);
            			}
HXLINE( 100)			if ((this->name == 3)) {
HXLINE( 102)				this->charnamee = HX_("pico",e5,e8,57,4a);
            			}
HXLINE( 105)			if ((this->name == 4)) {
HXLINE( 107)				this->charnamee = HX_("mom",cb,16,53,00);
            			}
HXLINE( 110)			if ((this->name == 5)) {
HXLINE( 112)				this->charnamee = HX_("gf",1f,5a,00,00);
            			}
HXLINE( 115)			if ((this->name == 6)) {
HXLINE( 117)				this->charnamee = HX_("monster",1a,54,b0,b8);
            			}
HXLINE( 120)			if ((this->name == 7)) {
HXLINE( 122)				this->charnamee = HX_("senpai-angry",10,7a,b8,25);
            			}
HXLINE( 125)			if ((this->name == 8)) {
HXLINE( 127)				this->charnamee = HX_("parents-christmas",fe,94,c5,32);
            			}
HXLINE( 130)			if ((this->name == 9)) {
HXLINE( 132)				this->charnamee = HX_("senpai",3c,df,8d,6b);
            			}
HXLINE( 135)			if ((this->name == 10)) {
HXLINE( 137)				this->charnamee = HX_("spirit",31,bb,a9,bd);
            			}
HXLINE( 140)			if ((this->name == 11)) {
HXLINE( 142)				this->name = 0;
HXLINE( 143)				this->charnamee = HX_("bf",c4,55,00,00);
            			}
HXLINE( 148)			 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 148)			 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),null()),null(),null(),null(),null(),null());
HXLINE( 149)			bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 150)			bg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 151)			bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE( 152)			bg1->updateHitbox();
HXLINE( 153)			{
HXLINE( 153)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 153)				bool _hx_tmp;
HXDLIN( 153)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 153)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 153)						_hx_tmp = false;
            					}
            				}
HXDLIN( 153)				if (_hx_tmp) {
HXLINE( 153)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 153)					bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 153)				bool _hx_tmp1;
HXDLIN( 153)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 153)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 153)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 153)				if (_hx_tmp1) {
HXLINE( 153)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 153)					bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 154)			bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 155)			this->add(bg1);
HXLINE( 157)			::CharacterEditorState_obj::char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(500) ),( (Float)(180) ),this->charnamee,true);
HXLINE( 158)			 ::Character _hx_tmp2 = ::CharacterEditorState_obj::char1;
HXDLIN( 158)			_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((::CharacterEditorState_obj::char1->get_width() * ((Float)0.8))),null());
HXLINE( 159)			this->add(::CharacterEditorState_obj::char1);
HXLINE( 160)			::CharacterEditorState_obj::char1->set_visible(false);
HXLINE( 163)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(this->name + HX_(" Developer Mode - Press p to change char",a8,3c,3d,1b)),12,null());
HXLINE( 164)			versionShit->scrollFactor->set(null(),null());
HXLINE( 165)			versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 166)			this->add(versionShit);
HXLINE( 168)			 ::flixel::ui::FlxButton button =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,50,50,HX_("Play",14,5a,33,35),this->OnClickButton_dyn());
HXLINE( 169)			this->add(button);
            		}
HXLINE( 176)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 176)		if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 178)			::CharacterEditorState_obj::char1->playAnim(HX_("singDOWN",31,2a,ad,36),null(),null(),null());
HXLINE( 179)			::CharacterEditorState_obj::char1->updateHitbox();
HXLINE( 180)			::CharacterEditorState_obj::char1->set_visible(true);
            		}
HXLINE( 183)		 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 183)		if (_this2->keyManager->checkStatusUnsafe(37,_this2->status)) {
HXLINE( 185)			::CharacterEditorState_obj::char1->playAnim(HX_("singLEFT",d6,39,ef,3b),null(),null(),null());
HXLINE( 186)			::CharacterEditorState_obj::char1->updateHitbox();
HXLINE( 187)			::CharacterEditorState_obj::char1->set_visible(true);
            		}
HXLINE( 189)		 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 189)		if (_this3->keyManager->checkStatusUnsafe(39,_this3->status)) {
HXLINE( 191)			::CharacterEditorState_obj::char1->playAnim(HX_("singRIGHT",0d,6f,70,ac),null(),null(),null());
HXLINE( 192)			::CharacterEditorState_obj::char1->updateHitbox();
HXLINE( 193)			::CharacterEditorState_obj::char1->set_visible(true);
            		}
HXLINE( 195)		 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 195)		if (_this4->keyManager->checkStatusUnsafe(38,_this4->status)) {
HXLINE( 197)			::CharacterEditorState_obj::char1->playAnim(HX_("singUP",6a,52,21,b9),null(),null(),null());
HXLINE( 198)			::CharacterEditorState_obj::char1->updateHitbox();
HXLINE( 199)			::CharacterEditorState_obj::char1->set_visible(true);
            		}
HXLINE( 202)		this->super::update(elapsed);
            	}


 ::Character CharacterEditorState_obj::char1;

 ::flixel::addons::ui::FlxInputText CharacterEditorState_obj::textboxhi;

 ::flixel::text::FlxText CharacterEditorState_obj::versionShit;


::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CharacterEditorState_obj > __this = new CharacterEditorState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CharacterEditorState_obj > CharacterEditorState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CharacterEditorState_obj *__this = (CharacterEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CharacterEditorState_obj), true, "CharacterEditorState"));
	*(void **)__this = CharacterEditorState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CharacterEditorState_obj::CharacterEditorState_obj()
{
}

void CharacterEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CharacterEditorState);
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(charnamee,"charnamee");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CharacterEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(charnamee,"charnamee");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CharacterEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charnamee") ) { return ::hx::Val( charnamee ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"OnClickButton") ) { return ::hx::Val( OnClickButton_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CharacterEditorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { outValue = ( char1 ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textboxhi") ) { outValue = ( textboxhi ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { outValue = ( versionShit ); return true; }
	}
	return false;
}

::hx::Val CharacterEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"charnamee") ) { charnamee=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CharacterEditorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=ioValue.Cast<  ::Character >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"textboxhi") ) { textboxhi=ioValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=ioValue.Cast<  ::flixel::text::FlxText >(); return true; }
	}
	return false;
}

void CharacterEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("charnamee",24,a9,af,bc));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CharacterEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(CharacterEditorState_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsString,(int)offsetof(CharacterEditorState_obj,charnamee),HX_("charnamee",24,a9,af,bc)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CharacterEditorState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::Character */ ,(void *) &CharacterEditorState_obj::char1,HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(void *) &CharacterEditorState_obj::textboxhi,HX_("textboxhi",ff,11,bf,bc)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(void *) &CharacterEditorState_obj::versionShit,HX_("versionShit",f8,4e,3b,e2)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CharacterEditorState_obj_sMemberFields[] = {
	HX_("name",4b,72,ff,48),
	HX_("charnamee",24,a9,af,bc),
	HX_("create",fc,66,0f,7c),
	HX_("OnClickButton",5b,25,bc,b3),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CharacterEditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CharacterEditorState_obj::char1,"char1");
	HX_MARK_MEMBER_NAME(CharacterEditorState_obj::textboxhi,"textboxhi");
	HX_MARK_MEMBER_NAME(CharacterEditorState_obj::versionShit,"versionShit");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CharacterEditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CharacterEditorState_obj::char1,"char1");
	HX_VISIT_MEMBER_NAME(CharacterEditorState_obj::textboxhi,"textboxhi");
	HX_VISIT_MEMBER_NAME(CharacterEditorState_obj::versionShit,"versionShit");
};

#endif

::hx::Class CharacterEditorState_obj::__mClass;

static ::String CharacterEditorState_obj_sStaticFields[] = {
	HX_("char1",9b,9c,b3,45),
	HX_("textboxhi",ff,11,bf,bc),
	HX_("versionShit",f8,4e,3b,e2),
	::String(null())
};

void CharacterEditorState_obj::__register()
{
	CharacterEditorState_obj _hx_dummy;
	CharacterEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CharacterEditorState",1b,d8,00,38);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CharacterEditorState_obj::__GetStatic;
	__mClass->mSetStaticField = &CharacterEditorState_obj::__SetStatic;
	__mClass->mMarkFunc = CharacterEditorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CharacterEditorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CharacterEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CharacterEditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CharacterEditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CharacterEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CharacterEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CharacterEditorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_6f5794a617cf450f_28_boot)
HXDLIN(  28)		char1 = null();
            	}
}

