// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_ThisExit
#include <ThisExit.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_28_new,"ThisExit","new",0x5b811bae,"ThisExit.new","ThisExit.hx",28,0x8fe87382)
static const ::String _hx_array_data_09ca6cbc_1[] = {
	HX_("Yes",07,e1,43,00),HX_("No",61,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_40_openSelectedSubstate,"ThisExit","openSelectedSubstate",0x9c5046e8,"ThisExit.openSelectedSubstate","ThisExit.hx",40,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_55_create,"ThisExit","create",0x6191a06e,"ThisExit.create","ThisExit.hx",55,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_112_update,"ThisExit","update",0x6c87bf7b,"ThisExit.update","ThisExit.hx",112,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_132_changeSelection,"ThisExit","changeSelection",0xd8cda10a,"ThisExit.changeSelection","ThisExit.hx",132,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_30_boot,"ThisExit","boot",0xad901d24,"ThisExit.boot","ThisExit.hx",30,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_31_boot,"ThisExit","boot",0xad901d24,"ThisExit.boot","ThisExit.hx",31,0x8fe87382)
HX_LOCAL_STACK_FRAME(_hx_pos_b6fdf5c14b06526a_35_boot,"ThisExit","boot",0xad901d24,"ThisExit.boot","ThisExit.hx",35,0x8fe87382)

void ThisExit_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_28_new)
HXLINE(  33)		this->options = ::Array_obj< ::String >::fromData( _hx_array_data_09ca6cbc_1,2);
HXLINE(  28)		super::__construct(TransIn,TransOut);
            	}

Dynamic ThisExit_obj::__CreateEmpty() { return new ThisExit_obj; }

void *ThisExit_obj::_hx_vtable = 0;

Dynamic ThisExit_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ThisExit_obj > _hx_result = new ThisExit_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ThisExit_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x655b5f7c || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ThisExit_obj::openSelectedSubstate(::String label){
            	HX_GC_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_40_openSelectedSubstate)
HXDLIN(  40)		::String _hx_switch_0 = label;
            		if (  (_hx_switch_0==HX_("No",61,44,00,00)) ){
HXLINE(  47)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  47)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE(  48)			{
HXLINE(  48)				 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  48)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  48)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE(  46)			goto _hx_goto_2;
            		}
            		if (  (_hx_switch_0==HX_("Yes",07,e1,43,00)) ){
HXLINE(  45)			::openfl::_hx_system::System_obj::exit(0);
HXDLIN(  45)			goto _hx_goto_2;
            		}
            		_hx_goto_2:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThisExit_obj,openSelectedSubstate,(void))

void ThisExit_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_55_create)
HXLINE(  57)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  57)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("TitleBG",3d,0d,af,b2),null()),null(),null(),null(),null(),null());
HXLINE(  58)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  59)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  60)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  61)		bg1->updateHitbox();
HXLINE(  62)		{
HXLINE(  62)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  62)			bool _hx_tmp;
HXDLIN(  62)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  62)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  62)					_hx_tmp = false;
            				}
            			}
HXDLIN(  62)			if (_hx_tmp) {
HXLINE(  62)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  62)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  62)			bool _hx_tmp1;
HXDLIN(  62)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  62)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  62)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  62)			if (_hx_tmp1) {
HXLINE(  62)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  62)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  63)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  64)		this->add(bg1);
HXLINE(  66)		if ((::ThisExit_obj::language == HX_("en",69,58,00,00))) {
HXLINE(  68)			::ThisExit_obj::menuText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Quit - Are you sure",06,97,6a,6a),true,false,null(),null(),null());
HXLINE(  69)			{
HXLINE(  69)				 ::Alphabet _this = ::ThisExit_obj::menuText;
HXDLIN(  69)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  69)				bool _hx_tmp;
HXDLIN(  69)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(  69)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE(  69)						_hx_tmp = false;
            					}
            				}
HXDLIN(  69)				if (_hx_tmp) {
HXLINE(  69)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  69)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  69)				bool _hx_tmp1;
HXDLIN(  69)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(  69)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(  69)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(  69)				if (_hx_tmp1) {
HXLINE(  69)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  69)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  70)			{
HXLINE(  70)				 ::Alphabet _g = ::ThisExit_obj::menuText;
HXDLIN(  70)				_g->set_y((_g->y - ( (Float)(150) )));
            			}
HXLINE(  71)			this->add(::ThisExit_obj::menuText);
            		}
HXLINE(  73)		if ((::ThisExit_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE(  75)			::ThisExit_obj::menuText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Cikmak istermisin",33,2a,35,b7),true,false,null(),null(),null());
HXLINE(  76)			{
HXLINE(  76)				 ::Alphabet _this = ::ThisExit_obj::menuText;
HXDLIN(  76)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  76)				bool _hx_tmp;
HXDLIN(  76)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(  76)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE(  76)						_hx_tmp = false;
            					}
            				}
HXDLIN(  76)				if (_hx_tmp) {
HXLINE(  76)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  76)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  76)				bool _hx_tmp1;
HXDLIN(  76)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(  76)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(  76)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(  76)				if (_hx_tmp1) {
HXLINE(  76)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  76)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  77)			{
HXLINE(  77)				 ::Alphabet _g = ::ThisExit_obj::menuText;
HXDLIN(  77)				_g->set_y((_g->y - ( (Float)(150) )));
            			}
HXLINE(  78)			this->add(::ThisExit_obj::menuText);
            		}
HXLINE(  80)		if ((::ThisExit_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE(  82)			::ThisExit_obj::menuText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("Quit - Are you sure",06,97,6a,6a),true,false,null(),null(),null());
HXLINE(  83)			{
HXLINE(  83)				 ::Alphabet _this = ::ThisExit_obj::menuText;
HXDLIN(  83)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  83)				bool _hx_tmp;
HXDLIN(  83)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE(  83)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE(  83)						_hx_tmp = false;
            					}
            				}
HXDLIN(  83)				if (_hx_tmp) {
HXLINE(  83)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  83)					_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            				}
HXDLIN(  83)				bool _hx_tmp1;
HXDLIN(  83)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE(  83)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE(  83)						_hx_tmp1 = false;
            					}
            				}
HXDLIN(  83)				if (_hx_tmp1) {
HXLINE(  83)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  83)					_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE(  84)			{
HXLINE(  84)				 ::Alphabet _g = ::ThisExit_obj::menuText;
HXDLIN(  84)				_g->set_y((_g->y - ( (Float)(150) )));
            			}
HXLINE(  85)			this->add(::ThisExit_obj::menuText);
            		}
HXLINE(  89)		this->grpOptions =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  90)		this->add(this->grpOptions);
HXLINE(  92)		{
HXLINE(  92)			int _g = 0;
HXDLIN(  92)			int _g1 = this->options->length;
HXDLIN(  92)			while((_g < _g1)){
HXLINE(  92)				_g = (_g + 1);
HXDLIN(  92)				int i = (_g - 1);
HXLINE(  94)				 ::Alphabet optionText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),this->options->__get(i),true,false,null(),null(),null());
HXLINE(  95)				{
HXLINE(  95)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  95)					bool _hx_tmp;
HXDLIN(  95)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE(  95)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE(  95)							_hx_tmp = false;
            						}
            					}
HXDLIN(  95)					if (_hx_tmp) {
HXLINE(  95)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  95)						optionText->set_x(((( (Float)(_hx_tmp) ) - optionText->get_width()) / ( (Float)(2) )));
            					}
HXDLIN(  95)					bool _hx_tmp1;
HXDLIN(  95)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE(  95)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE(  95)							_hx_tmp1 = false;
            						}
            					}
HXDLIN(  95)					if (_hx_tmp1) {
HXLINE(  95)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  95)						optionText->set_y(((( (Float)(_hx_tmp) ) - optionText->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE(  96)				{
HXLINE(  96)					 ::Alphabet _g1 = optionText;
HXDLIN(  96)					_g1->set_y((_g1->y + ((( (Float)(100) ) * (( (Float)(i) ) - (( (Float)(this->options->length) ) / ( (Float)(2) )))) + 50)));
            				}
HXLINE(  97)				this->grpOptions->add(optionText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 100)		this->selectorLeft =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_(">",3e,00,00,00),true,false,null(),null(),null());
HXLINE( 101)		this->add(this->selectorLeft);
HXLINE( 102)		this->selectorRight =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("<",3c,00,00,00),true,false,null(),null(),null());
HXLINE( 103)		this->add(this->selectorRight);
HXLINE( 105)		this->changeSelection(null());
HXLINE( 107)		this->super::create();
            	}


void ThisExit_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_112_update)
HXLINE( 113)		this->super::update(elapsed);
HXLINE( 115)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 115)		if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 116)			this->changeSelection(-1);
            		}
HXLINE( 118)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 118)		if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 119)			this->changeSelection(1);
            		}
HXLINE( 122)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 123)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 123)			_hx_tmp->play(::Paths_obj::sound(HX_("cancelMenu",39,a4,43,b7),null()),null(),null(),null(),null(),null());
HXLINE( 124)			{
HXLINE( 124)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 124)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 124)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
HXLINE( 127)		if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 128)			this->openSelectedSubstate(this->options->__get(::ThisExit_obj::curSelected));
            		}
            	}


void ThisExit_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_132_changeSelection)
HXLINE( 133)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::ThisExit >();
HXDLIN( 133)		::ThisExit_obj::curSelected = (::ThisExit_obj::curSelected + change);
HXLINE( 134)		if ((::ThisExit_obj::curSelected < 0)) {
HXLINE( 135)			::ThisExit_obj::curSelected = (this->options->length - 1);
            		}
HXLINE( 136)		if ((::ThisExit_obj::curSelected >= this->options->length)) {
HXLINE( 137)			::ThisExit_obj::curSelected = 0;
            		}
HXLINE( 139)		int bullShit = 0;
HXLINE( 141)		{
HXLINE( 141)			int _g = 0;
HXDLIN( 141)			::Array< ::Dynamic> _g1 = this->grpOptions->members;
HXDLIN( 141)			while((_g < _g1->length)){
HXLINE( 141)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 141)				_g = (_g + 1);
HXLINE( 142)				item->targetY = ( (Float)((bullShit - ::ThisExit_obj::curSelected)) );
HXLINE( 143)				bullShit = (bullShit + 1);
HXLINE( 145)				item->set_alpha(((Float)0.6));
HXLINE( 146)				if ((item->targetY == 0)) {
HXLINE( 147)					item->set_alpha(( (Float)(1) ));
HXLINE( 148)					this->selectorLeft->set_x((item->x - ( (Float)(63) )));
HXLINE( 149)					this->selectorLeft->set_y(item->y);
HXLINE( 150)					 ::Alphabet _hx_tmp = this->selectorRight;
HXDLIN( 150)					Float item1 = item->x;
HXDLIN( 150)					_hx_tmp->set_x(((item1 + item->get_width()) + 15));
HXLINE( 151)					this->selectorRight->set_y(item->y);
            				}
            			}
            		}
HXLINE( 154)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp1 = ::flixel::FlxG_obj::sound;
HXDLIN( 154)		_hx_tmp1->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ThisExit_obj,changeSelection,(void))

::String ThisExit_obj::hmmmmmmmmmmmmmmmm;

::String ThisExit_obj::language;

int ThisExit_obj::curSelected;

 ::flixel::FlxSprite ThisExit_obj::menuBG;

 ::Alphabet ThisExit_obj::menuText;


::hx::ObjectPtr< ThisExit_obj > ThisExit_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ThisExit_obj > __this = new ThisExit_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ThisExit_obj > ThisExit_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ThisExit_obj *__this = (ThisExit_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ThisExit_obj), true, "ThisExit"));
	*(void **)__this = ThisExit_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ThisExit_obj::ThisExit_obj()
{
}

void ThisExit_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ThisExit);
	HX_MARK_MEMBER_NAME(options,"options");
	HX_MARK_MEMBER_NAME(grpOptions,"grpOptions");
	HX_MARK_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_MARK_MEMBER_NAME(selectorRight,"selectorRight");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ThisExit_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(options,"options");
	HX_VISIT_MEMBER_NAME(grpOptions,"grpOptions");
	HX_VISIT_MEMBER_NAME(selectorLeft,"selectorLeft");
	HX_VISIT_MEMBER_NAME(selectorRight,"selectorRight");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ThisExit_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { return ::hx::Val( options ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { return ::hx::Val( grpOptions ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { return ::hx::Val( selectorLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { return ::hx::Val( selectorRight ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"openSelectedSubstate") ) { return ::hx::Val( openSelectedSubstate_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ThisExit_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { outValue = ( menuBG ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		if (HX_FIELD_EQ(inName,"menuText") ) { outValue = ( menuText ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
	}
	return false;
}

::hx::Val ThisExit_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"options") ) { options=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpOptions") ) { grpOptions=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"selectorLeft") ) { selectorLeft=inValue.Cast<  ::Alphabet >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorRight") ) { selectorRight=inValue.Cast<  ::Alphabet >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ThisExit_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"menuBG") ) { menuBG=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"menuText") ) { menuText=ioValue.Cast<  ::Alphabet >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ThisExit_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("options",5e,33,fe,df));
	outFields->push(HX_("grpOptions",f9,45,d8,00));
	outFields->push(HX_("selectorLeft",c6,e2,77,e7));
	outFields->push(HX_("selectorRight",3d,98,7b,18));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ThisExit_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(ThisExit_obj,options),HX_("options",5e,33,fe,df)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ThisExit_obj,grpOptions),HX_("grpOptions",f9,45,d8,00)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(ThisExit_obj,selectorLeft),HX_("selectorLeft",c6,e2,77,e7)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(ThisExit_obj,selectorRight),HX_("selectorRight",3d,98,7b,18)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ThisExit_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &ThisExit_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsString,(void *) &ThisExit_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsInt,(void *) &ThisExit_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &ThisExit_obj::menuBG,HX_("menuBG",24,65,6d,05)},
	{::hx::fsObject /*  ::Alphabet */ ,(void *) &ThisExit_obj::menuText,HX_("menuText",ec,f9,68,53)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ThisExit_obj_sMemberFields[] = {
	HX_("options",5e,33,fe,df),
	HX_("grpOptions",f9,45,d8,00),
	HX_("openSelectedSubstate",f6,29,af,78),
	HX_("selectorLeft",c6,e2,77,e7),
	HX_("selectorRight",3d,98,7b,18),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void ThisExit_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ThisExit_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(ThisExit_obj::language,"language");
	HX_MARK_MEMBER_NAME(ThisExit_obj::curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(ThisExit_obj::menuBG,"menuBG");
	HX_MARK_MEMBER_NAME(ThisExit_obj::menuText,"menuText");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ThisExit_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ThisExit_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(ThisExit_obj::language,"language");
	HX_VISIT_MEMBER_NAME(ThisExit_obj::curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(ThisExit_obj::menuBG,"menuBG");
	HX_VISIT_MEMBER_NAME(ThisExit_obj::menuText,"menuText");
};

#endif

::hx::Class ThisExit_obj::__mClass;

static ::String ThisExit_obj_sStaticFields[] = {
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("language",58,80,11,7a),
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuBG",24,65,6d,05),
	HX_("menuText",ec,f9,68,53),
	::String(null())
};

void ThisExit_obj::__register()
{
	ThisExit_obj _hx_dummy;
	ThisExit_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ThisExit",bc,6c,ca,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ThisExit_obj::__GetStatic;
	__mClass->mSetStaticField = &ThisExit_obj::__SetStatic;
	__mClass->mMarkFunc = ThisExit_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ThisExit_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ThisExit_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ThisExit_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ThisExit_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ThisExit_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ThisExit_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ThisExit_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_30_boot)
HXDLIN(  30)		hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
            	}
{
            	HX_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_31_boot)
HXDLIN(  31)		language = ::ThisExit_obj::hmmmmmmmmmmmmmmmm;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b6fdf5c14b06526a_35_boot)
HXDLIN(  35)		curSelected = 0;
            	}
}

