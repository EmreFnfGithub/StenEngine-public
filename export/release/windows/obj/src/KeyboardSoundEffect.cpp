// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_KeyboardSoundEffect
#include <KeyboardSoundEffect.h>
#endif
#ifndef INCLUDED_Option
#include <Option.h>
#endif
#ifndef INCLUDED_OptionsMenu
#include <OptionsMenu.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e685ccabd7309dd5_699_new,"KeyboardSoundEffect","new",0x35f2e8ab,"KeyboardSoundEffect.new","Options.hx",699,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_e685ccabd7309dd5_708_left,"KeyboardSoundEffect","left",0xfd46315c,"KeyboardSoundEffect.left","Options.hx",708,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_e685ccabd7309dd5_717_right,"KeyboardSoundEffect","right",0x17320ce7,"KeyboardSoundEffect.right","Options.hx",717,0x9d9a0240)
HX_LOCAL_STACK_FRAME(_hx_pos_e685ccabd7309dd5_727_updateDisplay,"KeyboardSoundEffect","updateDisplay",0x344f1344,"KeyboardSoundEffect.updateDisplay","Options.hx",727,0x9d9a0240)

void KeyboardSoundEffect_obj::__construct(::String desc){
            	HX_STACKFRAME(&_hx_pos_e685ccabd7309dd5_699_new)
HXLINE( 700)		super::__construct();
HXLINE( 701)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 702)			this->description = HX_("if you turn it on, it will sound every time you press the note",da,c7,5c,f4);
            		}
            		else {
HXLINE( 704)			this->description = desc;
            		}
            	}

Dynamic KeyboardSoundEffect_obj::__CreateEmpty() { return new KeyboardSoundEffect_obj; }

void *KeyboardSoundEffect_obj::_hx_vtable = 0;

Dynamic KeyboardSoundEffect_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< KeyboardSoundEffect_obj > _hx_result = new KeyboardSoundEffect_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool KeyboardSoundEffect_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x27a70eb9) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x27a70eb9;
	} else {
		return inClassId==(int)0x68db3c79;
	}
}

bool KeyboardSoundEffect_obj::left(){
            	HX_STACKFRAME(&_hx_pos_e685ccabd7309dd5_708_left)
HXLINE( 709)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 710)			return false;
            		}
HXLINE( 711)		::flixel::FlxG_obj::save->data->__SetField(HX_("keyboardeffect",78,8e,42,b1),HX_("On",3f,45,00,00),::hx::paccDynamic);
HXLINE( 712)		this->display = this->updateDisplay();
HXLINE( 713)		return true;
            	}


bool KeyboardSoundEffect_obj::right(){
            	HX_STACKFRAME(&_hx_pos_e685ccabd7309dd5_717_right)
HXLINE( 718)		if (::OptionsMenu_obj::isInPause) {
HXLINE( 719)			return false;
            		}
HXLINE( 720)		::flixel::FlxG_obj::save->data->__SetField(HX_("keyboardeffect",78,8e,42,b1),HX_("Off",4f,4b,3c,00),::hx::paccDynamic);
HXLINE( 721)		this->display = this->updateDisplay();
HXLINE( 722)		return true;
            	}


::String KeyboardSoundEffect_obj::updateDisplay(){
            	HX_STACKFRAME(&_hx_pos_e685ccabd7309dd5_727_updateDisplay)
HXDLIN( 727)		return HX_("Set Keyboard Sound Effect On (soon)",a4,8e,01,db);
            	}



::hx::ObjectPtr< KeyboardSoundEffect_obj > KeyboardSoundEffect_obj::__new(::String desc) {
	::hx::ObjectPtr< KeyboardSoundEffect_obj > __this = new KeyboardSoundEffect_obj();
	__this->__construct(desc);
	return __this;
}

::hx::ObjectPtr< KeyboardSoundEffect_obj > KeyboardSoundEffect_obj::__alloc(::hx::Ctx *_hx_ctx,::String desc) {
	KeyboardSoundEffect_obj *__this = (KeyboardSoundEffect_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(KeyboardSoundEffect_obj), true, "KeyboardSoundEffect"));
	*(void **)__this = KeyboardSoundEffect_obj::_hx_vtable;
	__this->__construct(desc);
	return __this;
}

KeyboardSoundEffect_obj::KeyboardSoundEffect_obj()
{
}

::hx::Val KeyboardSoundEffect_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"right") ) { return ::hx::Val( right_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"updateDisplay") ) { return ::hx::Val( updateDisplay_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *KeyboardSoundEffect_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *KeyboardSoundEffect_obj_sStaticStorageInfo = 0;
#endif

static ::String KeyboardSoundEffect_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("right",dc,0b,64,e9),
	HX_("updateDisplay",39,8f,b8,86),
	::String(null()) };

::hx::Class KeyboardSoundEffect_obj::__mClass;

void KeyboardSoundEffect_obj::__register()
{
	KeyboardSoundEffect_obj _hx_dummy;
	KeyboardSoundEffect_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("KeyboardSoundEffect",39,b7,38,f5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(KeyboardSoundEffect_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< KeyboardSoundEffect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = KeyboardSoundEffect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = KeyboardSoundEffect_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

