// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_net_URLStream
#include <openfl/net/URLStream.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a6c90071ab639a1e_121_new,"openfl.net.URLStream","new",0x94e7e172,"openfl.net.URLStream.new","openfl/net/URLStream.hx",121,0xccd0e1c0)
namespace openfl{
namespace net{

void URLStream_obj::__construct(){
            	HX_GC_STACKFRAME(&_hx_pos_a6c90071ab639a1e_121_new)
HXLINE( 122)		super::__construct(null());
HXLINE( 124)		this->_hx___loader =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE( 125)		this->_hx___loader->dataFormat = 0;
            	}

Dynamic URLStream_obj::__CreateEmpty() { return new URLStream_obj; }

void *URLStream_obj::_hx_vtable = 0;

Dynamic URLStream_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< URLStream_obj > _hx_result = new URLStream_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool URLStream_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0c89e854) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0c89e854;
	} else {
		return inClassId==(int)0x2405f642;
	}
}

static ::openfl::utils::IDataInput_obj _hx_openfl_net_URLStream__hx_openfl_utils_IDataInput= {
};

void *URLStream_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xbeb9f218: return &_hx_openfl_net_URLStream__hx_openfl_utils_IDataInput;
	}
	return super::_hx_getInterface(inHash);
}


::hx::ObjectPtr< URLStream_obj > URLStream_obj::__new() {
	::hx::ObjectPtr< URLStream_obj > __this = new URLStream_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< URLStream_obj > URLStream_obj::__alloc(::hx::Ctx *_hx_ctx) {
	URLStream_obj *__this = (URLStream_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(URLStream_obj), true, "openfl.net.URLStream"));
	*(void **)__this = URLStream_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

URLStream_obj::URLStream_obj()
{
}

void URLStream_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(URLStream);
	HX_MARK_MEMBER_NAME(_hx___loader,"__loader");
	 ::openfl::events::EventDispatcher_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void URLStream_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_hx___loader,"__loader");
	 ::openfl::events::EventDispatcher_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val URLStream_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__loader") ) { return ::hx::Val( _hx___loader ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val URLStream_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"__loader") ) { _hx___loader=inValue.Cast<  ::openfl::net::URLLoader >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void URLStream_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("__loader",33,b3,9e,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo URLStream_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::URLLoader */ ,(int)offsetof(URLStream_obj,_hx___loader),HX_("__loader",33,b3,9e,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *URLStream_obj_sStaticStorageInfo = 0;
#endif

static ::String URLStream_obj_sMemberFields[] = {
	HX_("__loader",33,b3,9e,00),
	::String(null()) };

::hx::Class URLStream_obj::__mClass;

void URLStream_obj::__register()
{
	URLStream_obj _hx_dummy;
	URLStream_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("openfl.net.URLStream",80,00,e2,29);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(URLStream_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< URLStream_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = URLStream_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = URLStream_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace openfl
} // end namespace net
