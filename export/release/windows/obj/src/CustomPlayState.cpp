// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CustomPlayState
#include <CustomPlayState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EngineEditorsState
#include <EngineEditorsState.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_desktop_Clipboard
#include <openfl/desktop/Clipboard.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7dde36de2ccf1736_30_new,"CustomPlayState","new",0x4518cc5e,"CustomPlayState.new","CustomPlayState.hx",30,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_119_create,"CustomPlayState","create",0x1a3d7dbe,"CustomPlayState.create","CustomPlayState.hx",119,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_135_create,"CustomPlayState","create",0x1a3d7dbe,"CustomPlayState.create","CustomPlayState.hx",135,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_123_create,"CustomPlayState","create",0x1a3d7dbe,"CustomPlayState.create","CustomPlayState.hx",123,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_59_create,"CustomPlayState","create",0x1a3d7dbe,"CustomPlayState.create","CustomPlayState.hx",59,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_144_nullFunction,"CustomPlayState","nullFunction",0x0155f901,"CustomPlayState.nullFunction","CustomPlayState.hx",144,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_148_PasteFunction,"CustomPlayState","PasteFunction",0x34363ae9,"CustomPlayState.PasteFunction","CustomPlayState.hx",148,0x756768d2)
HX_LOCAL_STACK_FRAME(_hx_pos_7dde36de2ccf1736_154_update,"CustomPlayState","update",0x25339ccb,"CustomPlayState.update","CustomPlayState.hx",154,0x756768d2)

void CustomPlayState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_7dde36de2ccf1736_30_new)
HXLINE(  38)		this->charselect2 = HX_("dad",47,36,4c,00);
HXLINE(  37)		this->charselect = HX_("bf",c4,55,00,00);
HXLINE(  30)		super::__construct(TransIn,TransOut);
            	}

Dynamic CustomPlayState_obj::__CreateEmpty() { return new CustomPlayState_obj; }

void *CustomPlayState_obj::_hx_vtable = 0;

Dynamic CustomPlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CustomPlayState_obj > _hx_result = new CustomPlayState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CustomPlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x196039c8) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x196039c8;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CustomPlayState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_7dde36de2ccf1736_119_create)
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::CustomPlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_7dde36de2ccf1736_135_create)
HXLINE( 135)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),true);
HXDLIN( 135)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 135)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_7dde36de2ccf1736_123_create)
HXLINE( 124)			::PlayState_obj::sicks = 0;
HXLINE( 125)			::PlayState_obj::bads = 0;
HXLINE( 126)			::PlayState_obj::shits = 0;
HXLINE( 127)			::PlayState_obj::goods = 0;
HXLINE( 128)			::PlayState_obj::campaignMisses = 0;
HXLINE( 129)			::PlayState_obj::SONG = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(_gthis->songChange->text,HX_("",00,00,00,00)));
HXLINE( 130)			::PlayState_obj::SONG->__SetField(HX_("player1",b0,09,15,8a),_gthis->eventName->text,::hx::paccDynamic);
HXLINE( 131)			::PlayState_obj::SONG->__SetField(HX_("player2",b1,09,15,8a),_gthis->eventName2->text,::hx::paccDynamic);
HXLINE( 132)			::PlayState_obj::campaignScore = 0;
HXLINE( 133)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1()),null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_7dde36de2ccf1736_59_create)
HXLINE(  58)		 ::CustomPlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  61)		::DiscordClient_obj::changePresence(HX_("Stage Editor",0f,63,39,a5),null(),null(),null(),null());
HXLINE(  64)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE(  66)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  66)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::loadImage(HX_("stageback",e5,7b,3b,06),null()),null(),null(),null(),null(),null());
HXLINE(  67)		this->bg->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  68)		this->bg->scrollFactor->set_y(((Float)0.10));
HXLINE(  69)		 ::flixel::FlxSprite _hx_tmp1 = this->bg;
HXDLIN(  69)		_hx_tmp1->setGraphicSize(::Std_obj::_hx_int((this->bg->get_width() * ((Float)1.1))),null());
HXLINE(  70)		this->bg->updateHitbox();
HXLINE(  71)		{
HXLINE(  71)			 ::flixel::FlxSprite _this = this->bg;
HXDLIN(  71)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  71)			bool _hx_tmp2;
HXDLIN(  71)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  71)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(  71)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(  71)			if (_hx_tmp2) {
HXLINE(  71)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  71)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  71)			bool _hx_tmp3;
HXDLIN(  71)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  71)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE(  71)					_hx_tmp3 = false;
            				}
            			}
HXDLIN(  71)			if (_hx_tmp3) {
HXLINE(  71)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  71)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  72)		this->bg->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  73)		this->add(this->bg);
HXLINE(  75)		 ::flixel::FlxSprite _hx_tmp4 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-650,450,null());
HXDLIN(  75)		this->front = _hx_tmp4->loadGraphic(::Paths_obj::loadImage(HX_("stagefront",2b,fd,b0,c6),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  76)		 ::flixel::FlxSprite _hx_tmp5 = this->front;
HXDLIN(  76)		_hx_tmp5->setGraphicSize(::Std_obj::_hx_int((this->front->get_width() * ((Float)1.1))),null());
HXLINE(  77)		this->front->updateHitbox();
HXLINE(  78)		this->front->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  79)		this->front->scrollFactor->set(((Float)0.9),((Float)0.9));
HXLINE(  80)		this->add(this->front);
HXLINE(  82)		 ::flixel::FlxSprite _hx_tmp6 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  82)		this->bg2 = _hx_tmp6->loadGraphic(::Paths_obj::loadImage(HX_("stagecurtains",df,ec,1a,4b),null()),null(),null(),null(),null(),null());
HXLINE(  83)		this->bg2->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  84)		this->bg2->scrollFactor->set_y(((Float)0.10));
HXLINE(  85)		 ::flixel::FlxSprite _hx_tmp7 = this->bg2;
HXDLIN(  85)		_hx_tmp7->setGraphicSize(::Std_obj::_hx_int((this->bg2->get_width() * ((Float)1.1))),null());
HXLINE(  86)		this->bg2->updateHitbox();
HXLINE(  87)		{
HXLINE(  87)			 ::flixel::FlxSprite _this1 = this->bg2;
HXDLIN(  87)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  87)			bool _hx_tmp8;
HXDLIN(  87)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  87)					_hx_tmp8 = true;
            				}
            				break;
            				default:{
HXLINE(  87)					_hx_tmp8 = false;
            				}
            			}
HXDLIN(  87)			if (_hx_tmp8) {
HXLINE(  87)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  87)				_this1->set_x(((( (Float)(_hx_tmp) ) - _this1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  87)			bool _hx_tmp9;
HXDLIN(  87)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  87)					_hx_tmp9 = true;
            				}
            				break;
            				default:{
HXLINE(  87)					_hx_tmp9 = false;
            				}
            			}
HXDLIN(  87)			if (_hx_tmp9) {
HXLINE(  87)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  87)				_this1->set_y(((( (Float)(_hx_tmp) ) - _this1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  88)		this->bg2->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  89)		this->add(this->bg2);
HXLINE(  91)		this->char3 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(300) ),( (Float)(110) ),HX_("gf",1f,5a,00,00),false);
HXLINE(  92)		 ::Character _hx_tmp10 = this->char3;
HXDLIN(  92)		_hx_tmp10->setGraphicSize(::Std_obj::_hx_int((this->char3->get_width() * ((Float)0.8))),null());
HXLINE(  93)		this->add(this->char3);
HXLINE(  95)		this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(770) ),( (Float)(350) ),this->charselect,true);
HXLINE(  96)		 ::Character _hx_tmp11 = this->char1;
HXDLIN(  96)		_hx_tmp11->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE(  97)		this->add(this->char1);
HXLINE(  99)		this->char2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(100) ),( (Float)(30) ),this->charselect2,false);
HXLINE( 100)		 ::Character _hx_tmp12 = this->char2;
HXDLIN( 100)		_hx_tmp12->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 101)		this->add(this->char2);
HXLINE( 103)		this->versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(HX_("Controls - Zooms E/Q - ",69,1d,60,5a) + this->stagepath),12,null());
HXLINE( 104)		this->versionShit->scrollFactor->set(null(),null());
HXLINE( 105)		this->versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 106)		this->add(this->versionShit);
HXLINE( 108)		this->button =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,20,HX_("Change Char",86,eb,35,10),this->nullFunction_dyn());
HXLINE( 109)		this->add(this->button);
HXLINE( 110)		this->eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,50,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 111)		this->add(this->eventName);
HXLINE( 112)		this->eventName2 =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,300,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 113)		this->add(this->eventName2);
HXLINE( 114)		this->button2 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,400,20,HX_("Oppont. C.",03,a8,b6,92),this->nullFunction_dyn());
HXLINE( 115)		this->add(this->button2);
HXLINE( 116)		this->songChange =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,850,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 117)		this->eventNamee =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,850,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 118)		this->add(this->eventNamee);
HXLINE( 119)		this->button4 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,850,20,HX_("Song Ch",10,da,53,77), ::Dynamic(new _hx_Closure_0()));
HXLINE( 122)		this->add(this->button4);
HXLINE( 123)		this->button5 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,950,20,HX_("Play",14,5a,33,35), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE( 138)		this->add(this->button5);
HXLINE( 140)		this->super::create();
            	}


void CustomPlayState_obj::nullFunction(){
            	HX_STACKFRAME(&_hx_pos_7dde36de2ccf1736_144_nullFunction)
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomPlayState_obj,nullFunction,(void))

void CustomPlayState_obj::PasteFunction(){
            	HX_STACKFRAME(&_hx_pos_7dde36de2ccf1736_148_PasteFunction)
HXLINE( 149)		 ::Dynamic c = ::openfl::desktop::Clipboard_obj::get_generalClipboard()->getData(2,1);
HXLINE( 150)		 ::flixel::addons::ui::FlxUIInputText _hx_tmp = this->eventName2;
HXDLIN( 150)		_hx_tmp->set_text(::Std_obj::string(c));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CustomPlayState_obj,PasteFunction,(void))

void CustomPlayState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_7dde36de2ccf1736_154_update)
HXLINE( 155)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 157)			 ::flixel::FlxState nextState =  ::EngineEditorsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 157)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 157)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 159)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 159)		if (_this->keyManager->checkStatusUnsafe(69,_this->status)) {
HXLINE( 161)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 161)			_g->set_zoom((_g->zoom + (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 163)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 163)		if (_this1->keyManager->checkStatusUnsafe(81,_this1->status)) {
HXLINE( 165)			 ::flixel::FlxCamera _g = ::flixel::FlxG_obj::camera;
HXDLIN( 165)			_g->set_zoom((_g->zoom - (elapsed * ::flixel::FlxG_obj::camera->zoom)));
            		}
HXLINE( 167)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< CustomPlayState_obj > CustomPlayState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CustomPlayState_obj > __this = new CustomPlayState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CustomPlayState_obj > CustomPlayState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CustomPlayState_obj *__this = (CustomPlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CustomPlayState_obj), true, "CustomPlayState"));
	*(void **)__this = CustomPlayState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CustomPlayState_obj::CustomPlayState_obj()
{
}

void CustomPlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CustomPlayState);
	HX_MARK_MEMBER_NAME(stagepath,"stagepath");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(char2,"char2");
	HX_MARK_MEMBER_NAME(char3,"char3");
	HX_MARK_MEMBER_NAME(charnew,"charnew");
	HX_MARK_MEMBER_NAME(charselect,"charselect");
	HX_MARK_MEMBER_NAME(charselect2,"charselect2");
	HX_MARK_MEMBER_NAME(eventName,"eventName");
	HX_MARK_MEMBER_NAME(eventNamee,"eventNamee");
	HX_MARK_MEMBER_NAME(eventNameEE,"eventNameEE");
	HX_MARK_MEMBER_NAME(eventNameEEe,"eventNameEEe");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(eventName2,"eventName2");
	HX_MARK_MEMBER_NAME(eventName3,"eventName3");
	HX_MARK_MEMBER_NAME(button2,"button2");
	HX_MARK_MEMBER_NAME(button3,"button3");
	HX_MARK_MEMBER_NAME(button4,"button4");
	HX_MARK_MEMBER_NAME(button5,"button5");
	HX_MARK_MEMBER_NAME(button6,"button6");
	HX_MARK_MEMBER_NAME(button7,"button7");
	HX_MARK_MEMBER_NAME(button8,"button8");
	HX_MARK_MEMBER_NAME(songChange,"songChange");
	HX_MARK_MEMBER_NAME(versionShit,"versionShit");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(bg2,"bg2");
	HX_MARK_MEMBER_NAME(front,"front");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CustomPlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(stagepath,"stagepath");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(char2,"char2");
	HX_VISIT_MEMBER_NAME(char3,"char3");
	HX_VISIT_MEMBER_NAME(charnew,"charnew");
	HX_VISIT_MEMBER_NAME(charselect,"charselect");
	HX_VISIT_MEMBER_NAME(charselect2,"charselect2");
	HX_VISIT_MEMBER_NAME(eventName,"eventName");
	HX_VISIT_MEMBER_NAME(eventNamee,"eventNamee");
	HX_VISIT_MEMBER_NAME(eventNameEE,"eventNameEE");
	HX_VISIT_MEMBER_NAME(eventNameEEe,"eventNameEEe");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(eventName2,"eventName2");
	HX_VISIT_MEMBER_NAME(eventName3,"eventName3");
	HX_VISIT_MEMBER_NAME(button2,"button2");
	HX_VISIT_MEMBER_NAME(button3,"button3");
	HX_VISIT_MEMBER_NAME(button4,"button4");
	HX_VISIT_MEMBER_NAME(button5,"button5");
	HX_VISIT_MEMBER_NAME(button6,"button6");
	HX_VISIT_MEMBER_NAME(button7,"button7");
	HX_VISIT_MEMBER_NAME(button8,"button8");
	HX_VISIT_MEMBER_NAME(songChange,"songChange");
	HX_VISIT_MEMBER_NAME(versionShit,"versionShit");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(bg2,"bg2");
	HX_VISIT_MEMBER_NAME(front,"front");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CustomPlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { return ::hx::Val( bg2 ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		if (HX_FIELD_EQ(inName,"char2") ) { return ::hx::Val( char2 ); }
		if (HX_FIELD_EQ(inName,"char3") ) { return ::hx::Val( char3 ); }
		if (HX_FIELD_EQ(inName,"front") ) { return ::hx::Val( front ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charnew") ) { return ::hx::Val( charnew ); }
		if (HX_FIELD_EQ(inName,"button2") ) { return ::hx::Val( button2 ); }
		if (HX_FIELD_EQ(inName,"button3") ) { return ::hx::Val( button3 ); }
		if (HX_FIELD_EQ(inName,"button4") ) { return ::hx::Val( button4 ); }
		if (HX_FIELD_EQ(inName,"button5") ) { return ::hx::Val( button5 ); }
		if (HX_FIELD_EQ(inName,"button6") ) { return ::hx::Val( button6 ); }
		if (HX_FIELD_EQ(inName,"button7") ) { return ::hx::Val( button7 ); }
		if (HX_FIELD_EQ(inName,"button8") ) { return ::hx::Val( button8 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stagepath") ) { return ::hx::Val( stagepath ); }
		if (HX_FIELD_EQ(inName,"eventName") ) { return ::hx::Val( eventName ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charselect") ) { return ::hx::Val( charselect ); }
		if (HX_FIELD_EQ(inName,"eventNamee") ) { return ::hx::Val( eventNamee ); }
		if (HX_FIELD_EQ(inName,"eventName2") ) { return ::hx::Val( eventName2 ); }
		if (HX_FIELD_EQ(inName,"eventName3") ) { return ::hx::Val( eventName3 ); }
		if (HX_FIELD_EQ(inName,"songChange") ) { return ::hx::Val( songChange ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charselect2") ) { return ::hx::Val( charselect2 ); }
		if (HX_FIELD_EQ(inName,"eventNameEE") ) { return ::hx::Val( eventNameEE ); }
		if (HX_FIELD_EQ(inName,"versionShit") ) { return ::hx::Val( versionShit ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventNameEEe") ) { return ::hx::Val( eventNameEEe ); }
		if (HX_FIELD_EQ(inName,"nullFunction") ) { return ::hx::Val( nullFunction_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"PasteFunction") ) { return ::hx::Val( PasteFunction_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CustomPlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { bg2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char2") ) { char2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char3") ) { char3=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"front") ) { front=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"charnew") ) { charnew=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button2") ) { button2=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button3") ) { button3=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button4") ) { button4=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button5") ) { button5=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button6") ) { button6=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button7") ) { button7=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button8") ) { button8=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"stagepath") ) { stagepath=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName") ) { eventName=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"charselect") ) { charselect=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNamee") ) { eventNamee=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName2") ) { eventName2=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventName3") ) { eventName3=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"songChange") ) { songChange=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"charselect2") ) { charselect2=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"eventNameEE") ) { eventNameEE=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"versionShit") ) { versionShit=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"eventNameEEe") ) { eventNameEEe=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CustomPlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("stagepath",63,87,7c,0f));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("char2",9c,9c,b3,45));
	outFields->push(HX_("char3",9d,9c,b3,45));
	outFields->push(HX_("charnew",4a,db,76,cf));
	outFields->push(HX_("charselect",52,3e,be,a9));
	outFields->push(HX_("charselect2",a0,49,b8,dc));
	outFields->push(HX_("eventName",85,7b,0c,f8));
	outFields->push(HX_("eventNamee",40,99,df,12));
	outFields->push(HX_("eventNameEE",25,63,c6,70));
	outFields->push(HX_("eventNameEEe",a0,5d,d0,3c));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("eventName2",0d,99,df,12));
	outFields->push(HX_("eventName3",0e,99,df,12));
	outFields->push(HX_("button2",00,52,75,ca));
	outFields->push(HX_("button3",01,52,75,ca));
	outFields->push(HX_("button4",02,52,75,ca));
	outFields->push(HX_("button5",03,52,75,ca));
	outFields->push(HX_("button6",04,52,75,ca));
	outFields->push(HX_("button7",05,52,75,ca));
	outFields->push(HX_("button8",06,52,75,ca));
	outFields->push(HX_("songChange",25,37,f7,12));
	outFields->push(HX_("versionShit",f8,4e,3b,e2));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("bg2",cd,b6,4a,00));
	outFields->push(HX_("front",a9,18,8e,06));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CustomPlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(CustomPlayState_obj,stagepath),HX_("stagepath",63,87,7c,0f)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(CustomPlayState_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(CustomPlayState_obj,char2),HX_("char2",9c,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(CustomPlayState_obj,char3),HX_("char3",9d,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(CustomPlayState_obj,charnew),HX_("charnew",4a,db,76,cf)},
	{::hx::fsString,(int)offsetof(CustomPlayState_obj,charselect),HX_("charselect",52,3e,be,a9)},
	{::hx::fsString,(int)offsetof(CustomPlayState_obj,charselect2),HX_("charselect2",a0,49,b8,dc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventName),HX_("eventName",85,7b,0c,f8)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventNamee),HX_("eventNamee",40,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventNameEE),HX_("eventNameEE",25,63,c6,70)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventNameEEe),HX_("eventNameEEe",a0,5d,d0,3c)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventName2),HX_("eventName2",0d,99,df,12)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,eventName3),HX_("eventName3",0e,99,df,12)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button2),HX_("button2",00,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button3),HX_("button3",01,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button4),HX_("button4",02,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button5),HX_("button5",03,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button6),HX_("button6",04,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button7),HX_("button7",05,52,75,ca)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(CustomPlayState_obj,button8),HX_("button8",06,52,75,ca)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(CustomPlayState_obj,songChange),HX_("songChange",25,37,f7,12)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CustomPlayState_obj,versionShit),HX_("versionShit",f8,4e,3b,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomPlayState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomPlayState_obj,bg2),HX_("bg2",cd,b6,4a,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CustomPlayState_obj,front),HX_("front",a9,18,8e,06)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CustomPlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String CustomPlayState_obj_sMemberFields[] = {
	HX_("stagepath",63,87,7c,0f),
	HX_("char1",9b,9c,b3,45),
	HX_("char2",9c,9c,b3,45),
	HX_("char3",9d,9c,b3,45),
	HX_("charnew",4a,db,76,cf),
	HX_("charselect",52,3e,be,a9),
	HX_("charselect2",a0,49,b8,dc),
	HX_("eventName",85,7b,0c,f8),
	HX_("eventNamee",40,99,df,12),
	HX_("eventNameEE",25,63,c6,70),
	HX_("eventNameEEe",a0,5d,d0,3c),
	HX_("button",f2,61,e0,d9),
	HX_("eventName2",0d,99,df,12),
	HX_("eventName3",0e,99,df,12),
	HX_("button2",00,52,75,ca),
	HX_("button3",01,52,75,ca),
	HX_("button4",02,52,75,ca),
	HX_("button5",03,52,75,ca),
	HX_("button6",04,52,75,ca),
	HX_("button7",05,52,75,ca),
	HX_("button8",06,52,75,ca),
	HX_("songChange",25,37,f7,12),
	HX_("versionShit",f8,4e,3b,e2),
	HX_("bg",c5,55,00,00),
	HX_("bg2",cd,b6,4a,00),
	HX_("front",a9,18,8e,06),
	HX_("create",fc,66,0f,7c),
	HX_("nullFunction",bf,64,2f,31),
	HX_("PasteFunction",6b,15,9b,e2),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class CustomPlayState_obj::__mClass;

void CustomPlayState_obj::__register()
{
	CustomPlayState_obj _hx_dummy;
	CustomPlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CustomPlayState",6c,05,30,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CustomPlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CustomPlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CustomPlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CustomPlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

