// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModsMenuState
#include <ModsMenuState.h>
#endif
#ifndef INCLUDED_ModsMetadata
#include <ModsMetadata.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_494b7a3607376380_31_new,"ModsMenuState","new",0x4cc28b93,"ModsMenuState.new","ModsMenuState.hx",31,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_45_create,"ModsMenuState","create",0xe4fd6da9,"ModsMenuState.create","ModsMenuState.hx",45,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_119_update,"ModsMenuState","update",0xeff38cb6,"ModsMenuState.update","ModsMenuState.hx",119,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_174_createMod,"ModsMenuState","createMod",0x13549099,"ModsMenuState.createMod","ModsMenuState.hx",174,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_180_createMod,"ModsMenuState","createMod",0x13549099,"ModsMenuState.createMod","ModsMenuState.hx",180,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_151_createMod,"ModsMenuState","createMod",0x13549099,"ModsMenuState.createMod","ModsMenuState.hx",151,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_185_changeSelection,"ModsMenuState","changeSelection",0x0329d46f,"ModsMenuState.changeSelection","ModsMenuState.hx",185,0xc380473d)
HX_LOCAL_STACK_FRAME(_hx_pos_494b7a3607376380_36_boot,"ModsMenuState","boot",0xd590959f,"ModsMenuState.boot","ModsMenuState.hx",36,0xc380473d)

void ModsMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_494b7a3607376380_31_new)
HXLINE(  33)		this->mods = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  31)		super::__construct(TransIn,TransOut);
            	}

Dynamic ModsMenuState_obj::__CreateEmpty() { return new ModsMenuState_obj; }

void *ModsMenuState_obj::_hx_vtable = 0;

Dynamic ModsMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ModsMenuState_obj > _hx_result = new ModsMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool ModsMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6fd9fb99 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ModsMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_494b7a3607376380_45_create)
HXLINE(  48)		::String library = null();
HXDLIN(  48)		::Array< ::String > initCreditlist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("modList",40,e8,de,dc) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  50)		::String library1 = null();
HXDLIN(  50)		initCreditlist = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("modList",40,e8,de,dc) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(  52)		{
HXLINE(  52)			int _g = 0;
HXDLIN(  52)			int _g1 = initCreditlist->length;
HXDLIN(  52)			while((_g < _g1)){
HXLINE(  52)				_g = (_g + 1);
HXDLIN(  52)				int i = (_g - 1);
HXLINE(  54)				::Array< ::String > data = initCreditlist->__get(i).split(HX_(":",3a,00,00,00));
HXLINE(  55)				::Array< ::Dynamic> _hx_tmp = this->mods;
HXDLIN(  55)				_hx_tmp->push( ::ModsMetadata_obj::__alloc( HX_CTX ,data->__get(0),data->__get(1)));
            			}
            		}
HXLINE(  68)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  71)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  71)		::String library2 = null();
HXDLIN(  71)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library2),null(),null(),null(),null(),null());
HXLINE(  72)		this->bg->set_color(-16181);
HXLINE(  73)		this->add(this->bg);
HXLINE(  75)		this->descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  76)		this->descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muff.ttf",20,12,d0,fd)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  77)		this->descText->scrollFactor->set(null(),null());
HXLINE(  78)		this->descText->set_text(HX_("what",44,a3,f7,4e));
HXLINE(  79)		this->descText->set_borderSize(((Float)2.4));
HXLINE(  80)		this->add(this->descText);
HXLINE(  82)		 ::flixel::FlxSprite _hx_tmp1 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,870,180,null());
HXDLIN(  82)		this->modIcon = _hx_tmp1->loadGraphic(((HX_("mods/",9e,2f,58,0c) + this->mods->__get(::ModsMenuState_obj::curSelected).StaticCast<  ::ModsMetadata >()->modName) + HX_("/icon.png",63,0c,3e,1b)),null(),null(),null(),null(),null());
HXLINE(  83)		 ::flixel::FlxSprite _hx_tmp2 = this->modIcon;
HXDLIN(  83)		_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->modIcon->get_width() * ((Float)0.8))),null());
HXLINE(  84)		this->add(this->modIcon);
HXLINE(  85)		this->modIcon->set_visible(false);
HXLINE(  87)		this->grpMods =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  88)		this->add(this->grpMods);
HXLINE(  90)		{
HXLINE(  90)			int _g2 = 0;
HXDLIN(  90)			int _g3 = this->mods->length;
HXDLIN(  90)			while((_g2 < _g3)){
HXLINE(  90)				_g2 = (_g2 + 1);
HXDLIN(  90)				int i = (_g2 - 1);
HXLINE(  92)				 ::Alphabet modText =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(((70 * i) + 30)) ),this->mods->__get(i).StaticCast<  ::ModsMetadata >()->modName,true,false,null(),null(),null());
HXLINE(  93)				modText->isMenuItem = true;
HXLINE(  94)				modText->targetY = ( (Float)(i) );
HXLINE(  95)				this->grpMods->add(modText).StaticCast<  ::Alphabet >();
            			}
            		}
HXLINE( 102)		this->changeSelection(null());
HXLINE( 106)		 ::flixel::text::FlxText descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE( 107)		descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muff.ttf",20,12,d0,fd)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 108)		descText->scrollFactor->set(null(),null());
HXLINE( 109)		descText->set_borderSize(((Float)2.4));
HXLINE( 110)		this->add(descText);
HXLINE( 112)		this->button =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,20,HX_("Create Mod",9e,3b,c7,33),this->createMod_dyn());
HXLINE( 113)		this->add(this->button);
HXLINE( 115)		this->super::create();
            	}


void ModsMenuState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_494b7a3607376380_119_update)
HXLINE( 120)		this->super::update(elapsed);
HXLINE( 122)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE( 123)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE( 124)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE( 125)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 125)		bool space = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXLINE( 127)		int shiftMult = 1;
HXLINE( 128)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN( 128)		if (_this1->keyManager->checkStatusUnsafe(16,_this1->status)) {
HXLINE( 129)			shiftMult = 3;
            		}
HXLINE( 131)		if (upP) {
HXLINE( 133)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 133)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 134)			this->changeSelection(-(shiftMult));
HXLINE( 135)			this->modIcon->loadGraphic(((HX_("mods/",9e,2f,58,0c) + this->mods->__get(::ModsMenuState_obj::curSelected).StaticCast<  ::ModsMetadata >()->modName) + HX_("/icon.png",63,0c,3e,1b)),null(),null(),null(),null(),null());
HXLINE( 136)			this->modIcon->set_visible(true);
            		}
HXLINE( 138)		if (downP) {
HXLINE( 140)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 140)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
HXLINE( 141)			this->changeSelection(shiftMult);
HXLINE( 142)			this->modIcon->loadGraphic(((HX_("mods/",9e,2f,58,0c) + this->mods->__get(::ModsMenuState_obj::curSelected).StaticCast<  ::ModsMetadata >()->modName) + HX_("/icon.png",63,0c,3e,1b)),null(),null(),null(),null(),null());
HXLINE( 143)			this->modIcon->set_visible(true);
            		}
HXLINE( 146)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 147)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 147)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 147)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


void ModsMenuState_obj::createMod(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_494b7a3607376380_174_createMod)
HXLINE( 174)			 ::flixel::FlxState nextState =  ::ModsMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 174)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 174)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIInputText,eventNameEE) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_494b7a3607376380_180_createMod)
HXLINE( 180)			::sys::FileSystem_obj::createDirectory((HX_("mods/",9e,2f,58,0c) + eventNameEE->text));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_494b7a3607376380_151_createMod)
HXLINE( 152)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 152)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 153)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 154)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 155)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE( 156)		bg1->updateHitbox();
HXLINE( 157)		{
HXLINE( 157)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 157)			bool _hx_tmp;
HXDLIN( 157)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 157)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 157)					_hx_tmp = false;
            				}
            			}
HXDLIN( 157)			if (_hx_tmp) {
HXLINE( 157)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 157)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 157)			bool _hx_tmp1;
HXDLIN( 157)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 157)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 157)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 157)			if (_hx_tmp1) {
HXLINE( 157)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 157)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 158)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 159)		this->add(bg1);
HXLINE( 161)		 ::flixel::FlxSprite bgHM =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 161)		 ::flixel::FlxSprite bgHM1 = bgHM->loadGraphic(::Paths_obj::loadImage(HX_("no/menuBGMods",03,ed,b6,49),null()),null(),null(),null(),null(),null());
HXLINE( 162)		bgHM1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 163)		bgHM1->scrollFactor->set_y(((Float)0.10));
HXLINE( 164)		bgHM1->setGraphicSize(::Std_obj::_hx_int((bgHM1->get_width() * ((Float)1.1))),null());
HXLINE( 165)		bgHM1->updateHitbox();
HXLINE( 166)		{
HXLINE( 166)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 166)			bool _hx_tmp2;
HXDLIN( 166)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 166)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE( 166)					_hx_tmp2 = false;
            				}
            			}
HXDLIN( 166)			if (_hx_tmp2) {
HXLINE( 166)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 166)				bgHM1->set_x(((( (Float)(_hx_tmp) ) - bgHM1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 166)			bool _hx_tmp3;
HXDLIN( 166)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 166)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE( 166)					_hx_tmp3 = false;
            				}
            			}
HXDLIN( 166)			if (_hx_tmp3) {
HXLINE( 166)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 166)				bgHM1->set_y(((( (Float)(_hx_tmp) ) - bgHM1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 167)		bgHM1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 168)		this->add(bgHM1);
HXLINE( 170)		 ::flixel::addons::ui::FlxUIInputText eventNameEE =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,350,220,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 171)		this->add(eventNameEE);
HXLINE( 173)		 ::flixel::ui::FlxButton close =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,1150,20,HX_("X",58,00,00,00), ::Dynamic(new _hx_Closure_0()));
HXLINE( 176)		close->set_color(-65536);
HXLINE( 177)		this->add(close);
HXLINE( 179)		 ::flixel::ui::FlxButton button5 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,500,220,HX_("Create Mod",9e,3b,c7,33), ::Dynamic(new _hx_Closure_1(eventNameEE)));
HXLINE( 182)		this->add(button5);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ModsMenuState_obj,createMod,(void))

void ModsMenuState_obj::changeSelection(::hx::Null< int >  __o_change){
            		int change = __o_change.Default(0);
            	HX_STACKFRAME(&_hx_pos_494b7a3607376380_185_changeSelection)
HXLINE( 186)		 ::Dynamic _hx_tmp = ::hx::ClassOf< ::ModsMenuState >();
HXDLIN( 186)		::ModsMenuState_obj::curSelected = (::ModsMenuState_obj::curSelected + change);
HXLINE( 188)		if ((::ModsMenuState_obj::curSelected < 0)) {
HXLINE( 189)			::ModsMenuState_obj::curSelected = (this->mods->length - 1);
            		}
HXLINE( 190)		if ((::ModsMenuState_obj::curSelected >= this->mods->length)) {
HXLINE( 191)			::ModsMenuState_obj::curSelected = 0;
            		}
HXLINE( 193)		this->descText->set_text(this->mods->__get(::ModsMenuState_obj::curSelected).StaticCast<  ::ModsMetadata >()->desc);
HXLINE( 196)		int bullShit = 0;
HXLINE( 198)		{
HXLINE( 198)			int _g = 0;
HXDLIN( 198)			::Array< ::Dynamic> _g1 = this->grpMods->members;
HXDLIN( 198)			while((_g < _g1->length)){
HXLINE( 198)				 ::Alphabet item = _g1->__get(_g).StaticCast<  ::Alphabet >();
HXDLIN( 198)				_g = (_g + 1);
HXLINE( 200)				item->targetY = ( (Float)((bullShit - ::ModsMenuState_obj::curSelected)) );
HXLINE( 201)				bullShit = (bullShit + 1);
HXLINE( 203)				item->set_alpha(((Float)0.6));
HXLINE( 206)				if ((item->targetY == 0)) {
HXLINE( 208)					item->set_alpha(( (Float)(1) ));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ModsMenuState_obj,changeSelection,(void))

int ModsMenuState_obj::curSelected;


::hx::ObjectPtr< ModsMenuState_obj > ModsMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< ModsMenuState_obj > __this = new ModsMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< ModsMenuState_obj > ModsMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	ModsMenuState_obj *__this = (ModsMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ModsMenuState_obj), true, "ModsMenuState"));
	*(void **)__this = ModsMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

ModsMenuState_obj::ModsMenuState_obj()
{
}

void ModsMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ModsMenuState);
	HX_MARK_MEMBER_NAME(mods,"mods");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(grpMods,"grpMods");
	HX_MARK_MEMBER_NAME(modIcon,"modIcon");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ModsMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(mods,"mods");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(grpMods,"grpMods");
	HX_VISIT_MEMBER_NAME(modIcon,"modIcon");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ModsMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mods") ) { return ::hx::Val( mods ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"grpMods") ) { return ::hx::Val( grpMods ); }
		if (HX_FIELD_EQ(inName,"modIcon") ) { return ::hx::Val( modIcon ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"createMod") ) { return ::hx::Val( createMod_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"changeSelection") ) { return ::hx::Val( changeSelection_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ModsMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val ModsMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"mods") ) { mods=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"grpMods") ) { grpMods=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"modIcon") ) { modIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ModsMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void ModsMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("mods",71,d3,60,48));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("grpMods",f6,e1,ec,ff));
	outFields->push(HX_("modIcon",5b,b3,de,da));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ModsMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ModsMenuState_obj,mods),HX_("mods",71,d3,60,48)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(ModsMenuState_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ModsMenuState_obj,grpMods),HX_("grpMods",f6,e1,ec,ff)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,modIcon),HX_("modIcon",5b,b3,de,da)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ModsMenuState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ModsMenuState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(ModsMenuState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ModsMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &ModsMenuState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ModsMenuState_obj_sMemberFields[] = {
	HX_("mods",71,d3,60,48),
	HX_("button",f2,61,e0,d9),
	HX_("grpMods",f6,e1,ec,ff),
	HX_("modIcon",5b,b3,de,da),
	HX_("descText",9e,53,35,f3),
	HX_("bg",c5,55,00,00),
	HX_("colorTween",08,c2,dc,3d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("createMod",26,ed,e0,49),
	HX_("changeSelection",bc,98,b5,48),
	::String(null()) };

static void ModsMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ModsMenuState_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ModsMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ModsMenuState_obj::curSelected,"curSelected");
};

#endif

::hx::Class ModsMenuState_obj::__mClass;

static ::String ModsMenuState_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void ModsMenuState_obj::__register()
{
	ModsMenuState_obj _hx_dummy;
	ModsMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ModsMenuState",21,c6,f2,f5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ModsMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &ModsMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = ModsMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ModsMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ModsMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ModsMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ModsMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ModsMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ModsMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ModsMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_494b7a3607376380_36_boot)
HXDLIN(  36)		curSelected = 0;
            	}
}

