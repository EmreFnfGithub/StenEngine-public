// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_ImageOutline
#include <ImageOutline.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_StenEngineFPS
#include <StenEngineFPS.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_lime_text_Font
#include <lime/text/Font.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_Bitmap
#include <openfl/display/Bitmap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_text_Font
#include <openfl/text/Font.h>
#endif
#ifndef INCLUDED_openfl_text_TextField
#include <openfl/text/TextField.h>
#endif
#ifndef INCLUDED_openfl_text_TextFormat
#include <openfl/text/TextFormat.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_066619175bd98079_27_new,"StenEngineFPS","new",0x62d613ef,"StenEngineFPS.new","StenEngineFPS.hx",27,0x188cfe61)
HX_LOCAL_STACK_FRAME(_hx_pos_066619175bd98079_87___enterFrame,"StenEngineFPS","__enterFrame",0x5f19d1a6,"StenEngineFPS.__enterFrame","StenEngineFPS.hx",87,0x188cfe61)
HX_LOCAL_STACK_FRAME(_hx_pos_066619175bd98079_82_boot,"StenEngineFPS","boot",0x10945dc3,"StenEngineFPS.boot","StenEngineFPS.hx",82,0x188cfe61)

void StenEngineFPS_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color){
            		Float x = __o_x.Default(10);
            		Float y = __o_y.Default(10);
            		int color = __o_color.Default(0);
            	HX_GC_STACKFRAME(&_hx_pos_066619175bd98079_27_new)
HXLINE(  80)		this->skippedFrames = 0;
HXLINE(  71)		int color1 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  71)		{
HXLINE(  71)			color1 = (color1 & -16711681);
HXDLIN(  71)			color1 = (color1 | 9699328);
            		}
HXDLIN(  71)		{
HXLINE(  71)			color1 = (color1 & -65281);
HXDLIN(  71)			color1 = (color1 | 0);
            		}
HXDLIN(  71)		{
HXLINE(  71)			color1 = (color1 & -256);
HXDLIN(  71)			color1 = (color1 | 211);
            		}
HXDLIN(  71)		{
HXLINE(  71)			color1 = (color1 & 16777215);
HXDLIN(  71)			color1 = (color1 | -16777216);
            		}
HXLINE(  72)		int color11 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  72)		{
HXLINE(  72)			color11 = (color11 & -16711681);
HXDLIN(  72)			color11 = (color11 | 4915200);
            		}
HXDLIN(  72)		{
HXLINE(  72)			color11 = (color11 & -65281);
HXDLIN(  72)			color11 = (color11 | 0);
            		}
HXDLIN(  72)		{
HXLINE(  72)			color11 = (color11 & -256);
HXDLIN(  72)			color11 = (color11 | 130);
            		}
HXDLIN(  72)		{
HXLINE(  72)			color11 = (color11 & 16777215);
HXDLIN(  72)			color11 = (color11 | -16777216);
            		}
HXLINE(  73)		int color2 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  73)		{
HXLINE(  73)			color2 = (color2 & -16711681);
HXDLIN(  73)			color2 = (color2 | 0);
            		}
HXDLIN(  73)		{
HXLINE(  73)			color2 = (color2 & -65281);
HXDLIN(  73)			color2 = (color2 | 0);
            		}
HXDLIN(  73)		{
HXLINE(  73)			color2 = (color2 & -256);
HXDLIN(  73)			color2 = (color2 | 255);
            		}
HXDLIN(  73)		{
HXLINE(  73)			color2 = (color2 & 16777215);
HXDLIN(  73)			color2 = (color2 | -16777216);
            		}
HXLINE(  74)		int color3 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  74)		{
HXLINE(  74)			color3 = (color3 & -16711681);
HXDLIN(  74)			color3 = (color3 | 0);
            		}
HXDLIN(  74)		{
HXLINE(  74)			color3 = (color3 & -65281);
HXDLIN(  74)			color3 = (color3 | 65280);
            		}
HXDLIN(  74)		{
HXLINE(  74)			color3 = (color3 & -256);
HXDLIN(  74)			color3 = (color3 | 0);
            		}
HXDLIN(  74)		{
HXLINE(  74)			color3 = (color3 & 16777215);
HXDLIN(  74)			color3 = (color3 | -16777216);
            		}
HXLINE(  75)		int color4 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  75)		{
HXLINE(  75)			color4 = (color4 & -16711681);
HXDLIN(  75)			color4 = (color4 | 16711680);
            		}
HXDLIN(  75)		{
HXLINE(  75)			color4 = (color4 & -65281);
HXDLIN(  75)			color4 = (color4 | 65280);
            		}
HXDLIN(  75)		{
HXLINE(  75)			color4 = (color4 & -256);
HXDLIN(  75)			color4 = (color4 | 0);
            		}
HXDLIN(  75)		{
HXLINE(  75)			color4 = (color4 & 16777215);
HXDLIN(  75)			color4 = (color4 | -16777216);
            		}
HXLINE(  76)		int color5 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  76)		{
HXLINE(  76)			color5 = (color5 & -16711681);
HXDLIN(  76)			color5 = (color5 | 16711680);
            		}
HXDLIN(  76)		{
HXLINE(  76)			color5 = (color5 & -65281);
HXDLIN(  76)			color5 = (color5 | 32512);
            		}
HXDLIN(  76)		{
HXLINE(  76)			color5 = (color5 & -256);
HXDLIN(  76)			color5 = (color5 | 0);
            		}
HXDLIN(  76)		{
HXLINE(  76)			color5 = (color5 & 16777215);
HXDLIN(  76)			color5 = (color5 | -16777216);
            		}
HXLINE(  77)		int color6 = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(  77)		{
HXLINE(  77)			color6 = (color6 & -16711681);
HXDLIN(  77)			color6 = (color6 | 16711680);
            		}
HXDLIN(  77)		{
HXLINE(  77)			color6 = (color6 & -65281);
HXDLIN(  77)			color6 = (color6 | 0);
            		}
HXDLIN(  77)		{
HXLINE(  77)			color6 = (color6 & -256);
HXDLIN(  77)			color6 = (color6 | 0);
            		}
HXDLIN(  77)		{
HXLINE(  77)			color6 = (color6 & 16777215);
HXDLIN(  77)			color6 = (color6 | -16777216);
            		}
HXLINE(  70)		this->array = ::Array_obj< int >::__new(7)->init(0,color1)->init(1,color11)->init(2,color2)->init(3,color3)->init(4,color4)->init(5,color5)->init(6,color6);
HXLINE(  42)		super::__construct();
HXLINE(  44)		this->set_x(x);
HXLINE(  45)		this->set_y(y);
HXLINE(  47)		this->currentFPS = 0;
HXLINE(  48)		this->set_selectable(false);
HXLINE(  49)		this->mouseEnabled = false;
HXLINE(  50)		this->set_defaultTextFormat( ::openfl::text::TextFormat_obj::__alloc( HX_CTX ,::openfl::utils::Assets_obj::getFont(HX_("assets/fonts/vcr.ttf",46,38,26,7e),null())->name,14,color,null(),null(),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  51)		this->set_text(HX_("FPS: ",af,da,2c,83));
HXLINE(  52)		{
HXLINE(  52)			 ::StenEngineFPS _g = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  52)			_g->set_width((_g->get_width() + 200));
            		}
HXLINE(  54)		this->cacheCount = 0;
HXLINE(  55)		this->currentTime = ( (Float)(0) );
HXLINE(  56)		this->times = ::Array_obj< Float >::__new(0);
HXLINE(  66)		this->bitmap = ::ImageOutline_obj::renderImage(::hx::ObjectPtr<OBJ_>(this),1,0,1,true,null());
HXLINE(  67)		::hx::TCast<  ::openfl::display::DisplayObjectContainer >::cast(::openfl::Lib_obj::get_current()->getChildAt(0))->addChild(this->bitmap);
            	}

Dynamic StenEngineFPS_obj::__CreateEmpty() { return new StenEngineFPS_obj; }

void *StenEngineFPS_obj::_hx_vtable = 0;

Dynamic StenEngineFPS_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StenEngineFPS_obj > _hx_result = new StenEngineFPS_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool StenEngineFPS_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x6b353933) {
		if (inClassId<=(int)0x0c89e854) {
			if (inClassId<=(int)0x0330636f) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0330636f;
			} else {
				return inClassId==(int)0x0c89e854;
			}
		} else {
			return inClassId==(int)0x6b353933;
		}
	} else {
		return inClassId==(int)0x7a9305bd || inClassId==(int)0x7f0de750;
	}
}

void StenEngineFPS_obj::_hx___enterFrame(int _tmp_deltaTime){
            	HX_STACKFRAME(&_hx_pos_066619175bd98079_87___enterFrame)
HXLINE(  88)		Float deltaTime = ( (Float)(_tmp_deltaTime) );
HXDLIN(  88)		if (::MusicBeatState_obj::initSave) {
HXLINE(  89)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsRain",dd,e5,17,c7),::hx::paccDynamic)) )) {
HXLINE(  91)				if ((::StenEngineFPS_obj::currentColor >= this->array->length)) {
HXLINE(  92)					::StenEngineFPS_obj::currentColor = 0;
            				}
HXLINE(  93)				::StenEngineFPS_obj::currentColor = ::Math_obj::round(((( (Float)(this->skippedFrames) ) / (( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ) / ( (Float)(3) ))) * ( (Float)(this->array->length) )));
HXLINE(  94)				 ::Main _hx_tmp = ::hx::TCast<  ::Main >::cast(::openfl::Lib_obj::get_current()->getChildAt(0));
HXDLIN(  94)				_hx_tmp->changeFPSColor(this->array->__get(::StenEngineFPS_obj::currentColor));
HXLINE(  95)				::StenEngineFPS_obj::currentColor++;
HXLINE(  96)				this->skippedFrames++;
HXLINE(  97)				if ((this->skippedFrames > (( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ) / ( (Float)(3) )))) {
HXLINE(  98)					this->skippedFrames = 0;
            				}
            			}
            		}
HXLINE( 101)		 ::StenEngineFPS _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 101)		_hx_tmp->currentTime = (_hx_tmp->currentTime + deltaTime);
HXLINE( 102)		this->times->push(this->currentTime);
HXLINE( 104)		while((this->times->__get(0) < (this->currentTime - ( (Float)(1000) )))){
HXLINE( 106)			this->times->shift();
            		}
HXLINE( 109)		int currentCount = this->times->length;
HXLINE( 110)		this->currentFPS = ::Math_obj::round((( (Float)((currentCount + this->cacheCount)) ) / ( (Float)(2) )));
HXLINE( 112)		if ((currentCount != this->cacheCount)) {
HXLINE( 114)			::String _hx_tmp;
HXDLIN( 114)			if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("fps",e9,c7,4d,00),::hx::paccDynamic)) )) {
HXLINE( 116)				::String _hx_tmp1;
HXDLIN( 116)				if (::Main_obj::watermarks) {
HXLINE( 116)					_hx_tmp1 = HX_("\nSten Engine Release ",eb,48,73,9b);
            				}
            				else {
HXLINE( 116)					_hx_tmp1 = HX_("",00,00,00,00);
            				}
HXLINE( 114)				_hx_tmp = ((HX_("FPS: ",af,da,2c,83) + this->currentFPS) + _hx_tmp1);
            			}
            			else {
HXLINE( 116)				if (::Main_obj::watermarks) {
HXLINE( 114)					_hx_tmp = HX_("Sten Engine Release ",e1,47,c1,aa);
            				}
            				else {
HXLINE( 114)					_hx_tmp = HX_("",00,00,00,00);
            				}
            			}
HXDLIN( 114)			this->set_text(_hx_tmp);
            		}
HXLINE( 126)		this->set_visible(true);
HXLINE( 128)		::Main_obj::instance->removeChild(this->bitmap);
HXLINE( 130)		this->bitmap = ::ImageOutline_obj::renderImage(::hx::ObjectPtr<OBJ_>(this),2,0,1,null(),null());
HXLINE( 132)		::Main_obj::instance->addChild(this->bitmap);
HXLINE( 134)		this->set_visible(false);
HXLINE( 136)		this->cacheCount = currentCount;
            	}


int StenEngineFPS_obj::currentColor;


::hx::ObjectPtr< StenEngineFPS_obj > StenEngineFPS_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color) {
	::hx::ObjectPtr< StenEngineFPS_obj > __this = new StenEngineFPS_obj();
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

::hx::ObjectPtr< StenEngineFPS_obj > StenEngineFPS_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y,::hx::Null< int >  __o_color) {
	StenEngineFPS_obj *__this = (StenEngineFPS_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(StenEngineFPS_obj), true, "StenEngineFPS"));
	*(void **)__this = StenEngineFPS_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y,__o_color);
	return __this;
}

StenEngineFPS_obj::StenEngineFPS_obj()
{
}

void StenEngineFPS_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StenEngineFPS);
	HX_MARK_MEMBER_NAME(currentFPS,"currentFPS");
	HX_MARK_MEMBER_NAME(bitmap,"bitmap");
	HX_MARK_MEMBER_NAME(cacheCount,"cacheCount");
	HX_MARK_MEMBER_NAME(currentTime,"currentTime");
	HX_MARK_MEMBER_NAME(times,"times");
	HX_MARK_MEMBER_NAME(array,"array");
	HX_MARK_MEMBER_NAME(skippedFrames,"skippedFrames");
	 ::openfl::text::TextField_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void StenEngineFPS_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(currentFPS,"currentFPS");
	HX_VISIT_MEMBER_NAME(bitmap,"bitmap");
	HX_VISIT_MEMBER_NAME(cacheCount,"cacheCount");
	HX_VISIT_MEMBER_NAME(currentTime,"currentTime");
	HX_VISIT_MEMBER_NAME(times,"times");
	HX_VISIT_MEMBER_NAME(array,"array");
	HX_VISIT_MEMBER_NAME(skippedFrames,"skippedFrames");
	 ::openfl::text::TextField_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val StenEngineFPS_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { return ::hx::Val( times ); }
		if (HX_FIELD_EQ(inName,"array") ) { return ::hx::Val( array ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { return ::hx::Val( bitmap ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { return ::hx::Val( currentFPS ); }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { return ::hx::Val( cacheCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { return ::hx::Val( currentTime ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"__enterFrame") ) { return ::hx::Val( _hx___enterFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skippedFrames") ) { return ::hx::Val( skippedFrames ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StenEngineFPS_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"currentColor") ) { outValue = ( currentColor ); return true; }
	}
	return false;
}

::hx::Val StenEngineFPS_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"times") ) { times=inValue.Cast< ::Array< Float > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"array") ) { array=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bitmap") ) { bitmap=inValue.Cast<  ::openfl::display::Bitmap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"currentFPS") ) { currentFPS=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cacheCount") ) { cacheCount=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"currentTime") ) { currentTime=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"skippedFrames") ) { skippedFrames=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool StenEngineFPS_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"currentColor") ) { currentColor=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void StenEngineFPS_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("currentFPS",30,71,28,c7));
	outFields->push(HX_("bitmap",ef,0f,0c,f1));
	outFields->push(HX_("cacheCount",2d,ab,1b,8d));
	outFields->push(HX_("currentTime",e6,a4,8e,85));
	outFields->push(HX_("times",c6,bf,35,10));
	outFields->push(HX_("array",99,6d,8f,25));
	outFields->push(HX_("skippedFrames",76,1f,4b,c6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StenEngineFPS_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(StenEngineFPS_obj,currentFPS),HX_("currentFPS",30,71,28,c7)},
	{::hx::fsObject /*  ::openfl::display::Bitmap */ ,(int)offsetof(StenEngineFPS_obj,bitmap),HX_("bitmap",ef,0f,0c,f1)},
	{::hx::fsInt,(int)offsetof(StenEngineFPS_obj,cacheCount),HX_("cacheCount",2d,ab,1b,8d)},
	{::hx::fsFloat,(int)offsetof(StenEngineFPS_obj,currentTime),HX_("currentTime",e6,a4,8e,85)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(StenEngineFPS_obj,times),HX_("times",c6,bf,35,10)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(StenEngineFPS_obj,array),HX_("array",99,6d,8f,25)},
	{::hx::fsInt,(int)offsetof(StenEngineFPS_obj,skippedFrames),HX_("skippedFrames",76,1f,4b,c6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo StenEngineFPS_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &StenEngineFPS_obj::currentColor,HX_("currentColor",6a,56,68,91)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String StenEngineFPS_obj_sMemberFields[] = {
	HX_("currentFPS",30,71,28,c7),
	HX_("bitmap",ef,0f,0c,f1),
	HX_("cacheCount",2d,ab,1b,8d),
	HX_("currentTime",e6,a4,8e,85),
	HX_("times",c6,bf,35,10),
	HX_("array",99,6d,8f,25),
	HX_("skippedFrames",76,1f,4b,c6),
	HX_("__enterFrame",15,7f,e3,3a),
	::String(null()) };

static void StenEngineFPS_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StenEngineFPS_obj::currentColor,"currentColor");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StenEngineFPS_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StenEngineFPS_obj::currentColor,"currentColor");
};

#endif

::hx::Class StenEngineFPS_obj::__mClass;

static ::String StenEngineFPS_obj_sStaticFields[] = {
	HX_("currentColor",6a,56,68,91),
	::String(null())
};

void StenEngineFPS_obj::__register()
{
	StenEngineFPS_obj _hx_dummy;
	StenEngineFPS_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("StenEngineFPS",7d,f0,4b,9e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StenEngineFPS_obj::__GetStatic;
	__mClass->mSetStaticField = &StenEngineFPS_obj::__SetStatic;
	__mClass->mMarkFunc = StenEngineFPS_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StenEngineFPS_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StenEngineFPS_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StenEngineFPS_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StenEngineFPS_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StenEngineFPS_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StenEngineFPS_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void StenEngineFPS_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_066619175bd98079_82_boot)
HXDLIN(  82)		currentColor = 0;
            	}
}

