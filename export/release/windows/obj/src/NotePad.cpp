// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_NotePad
#include <NotePad.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fca793774ac89c3c_44_new,"NotePad","new",0x447a01d3,"NotePad.new","NotePad.hx",44,0x78d858fd)
HX_LOCAL_STACK_FRAME(_hx_pos_fca793774ac89c3c_47_create,"NotePad","create",0x83215f69,"NotePad.create","NotePad.hx",47,0x78d858fd)
HX_LOCAL_STACK_FRAME(_hx_pos_fca793774ac89c3c_58_update,"NotePad","update",0x8e177e76,"NotePad.update","NotePad.hx",58,0x78d858fd)

void NotePad_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_fca793774ac89c3c_44_new)
HXDLIN(  44)		super::__construct(TransIn,TransOut);
            	}

Dynamic NotePad_obj::__CreateEmpty() { return new NotePad_obj; }

void *NotePad_obj::_hx_vtable = 0;

Dynamic NotePad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< NotePad_obj > _hx_result = new NotePad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool NotePad_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x14ef67d9) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x14ef67d9;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void NotePad_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_fca793774ac89c3c_47_create)
HXLINE(  49)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  51)		this->notePad =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,50,20,500,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE(  52)		this->add(this->notePad);
HXLINE(  54)		this->super::create();
            	}


void NotePad_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_fca793774ac89c3c_58_update)
HXDLIN(  58)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< NotePad_obj > NotePad_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< NotePad_obj > __this = new NotePad_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< NotePad_obj > NotePad_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	NotePad_obj *__this = (NotePad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(NotePad_obj), true, "NotePad"));
	*(void **)__this = NotePad_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

NotePad_obj::NotePad_obj()
{
}

void NotePad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(NotePad);
	HX_MARK_MEMBER_NAME(notePad,"notePad");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void NotePad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(notePad,"notePad");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val NotePad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"notePad") ) { return ::hx::Val( notePad ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val NotePad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"notePad") ) { notePad=inValue.Cast<  ::flixel::addons::ui::FlxUIInputText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void NotePad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("notePad",81,f4,50,4d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo NotePad_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIInputText */ ,(int)offsetof(NotePad_obj,notePad),HX_("notePad",81,f4,50,4d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *NotePad_obj_sStaticStorageInfo = 0;
#endif

static ::String NotePad_obj_sMemberFields[] = {
	HX_("notePad",81,f4,50,4d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class NotePad_obj::__mClass;

void NotePad_obj::__register()
{
	NotePad_obj _hx_dummy;
	NotePad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("NotePad",61,1c,a2,1a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(NotePad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< NotePad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = NotePad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = NotePad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

