// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_OutdatedSubState2
#include <OutdatedSubState2.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_ColorTween
#include <flixel/tweens/misc/ColorTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_funkinMedia_FunkinMedia
#include <funkinMedia/FunkinMedia.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_30_new,"funkinMedia.FunkinMedia","new",0xc558b9ca,"funkinMedia.FunkinMedia.new","funkinMedia/FunkinMedia.hx",30,0xcbd2aca7)
HX_LOCAL_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_50_create,"funkinMedia.FunkinMedia","create",0xfa52bbd2,"funkinMedia.FunkinMedia.create","funkinMedia/FunkinMedia.hx",50,0xcbd2aca7)
HX_LOCAL_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_63_create,"funkinMedia.FunkinMedia","create",0xfa52bbd2,"funkinMedia.FunkinMedia.create","funkinMedia/FunkinMedia.hx",63,0xcbd2aca7)
HX_LOCAL_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_77_create,"funkinMedia.FunkinMedia","create",0xfa52bbd2,"funkinMedia.FunkinMedia.create","funkinMedia/FunkinMedia.hx",77,0xcbd2aca7)
HX_LOCAL_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_35_create,"funkinMedia.FunkinMedia","create",0xfa52bbd2,"funkinMedia.FunkinMedia.create","funkinMedia/FunkinMedia.hx",35,0xcbd2aca7)
static const ::String _hx_array_data_f939ccd8_5[] = {
	HX_("#ff4242",1f,6c,3a,55),HX_("#3727e8",3f,4a,e3,df),HX_("#e000d1",5b,87,95,d4),HX_("#523961",a1,ae,43,cc),
};
static const int _hx_array_data_f939ccd8_6[] = {
	(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_8c7e528a49ab42e2_99_update,"funkinMedia.FunkinMedia","update",0x0548dadf,"funkinMedia.FunkinMedia.update","funkinMedia/FunkinMedia.hx",99,0xcbd2aca7)
namespace funkinMedia{

void FunkinMedia_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_30_new)
HXLINE(  33)		this->updateAvailable = false;
HXLINE(  30)		super::__construct(TransIn,TransOut);
            	}

Dynamic FunkinMedia_obj::__CreateEmpty() { return new FunkinMedia_obj; }

void *FunkinMedia_obj::_hx_vtable = 0;

Dynamic FunkinMedia_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< FunkinMedia_obj > _hx_result = new FunkinMedia_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool FunkinMedia_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0e963c2c) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0e963c2c;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void FunkinMedia_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0,::Array< ::String >,bgColors,::Array< int >,colorRotation, ::flixel::FlxSprite,menuBG1) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_50_create)
HXLINE(  51)			 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN(  51)			int menuBG2 = menuBG1->color;
HXDLIN(  51)			::flixel::tweens::FlxTween_obj::color(menuBG,2,menuBG2,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE(  52)			if ((colorRotation->__get(0) < (bgColors->length - 1))) {
HXLINE(  53)				colorRotation[0]++;
            			}
            			else {
HXLINE(  55)				colorRotation[0] = 0;
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::funkinMedia::FunkinMedia,_gthis) HXARGC(1)
            		void _hx_run(::String data){
            			HX_GC_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_63_create)
HXLINE(  64)			 ::flixel::text::FlxText funkinmediaaa =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,30,(::flixel::FlxG_obj::height - 700),0,((HX_("Funkin Media",b5,39,24,63) + HX_(" ",20,00,00,00)) + data),31,null());
HXLINE(  65)			funkinmediaaa->scrollFactor->set(null(),null());
HXLINE(  66)			funkinmediaaa->setFormat(HX_("PhantomMuff 1.5",0d,79,26,b7),46,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  67)			_gthis->add(funkinmediaaa).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run(::String data2){
            			HX_GC_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_77_create)
HXLINE(  78)			::String updateVersion = ::StringTools_obj::trim(data2.split(HX_("\n",0a,00,00,00))->__get(0));
HXLINE(  79)			::String curVersion = ::MainMenuState_obj::StenEngineVer;
HXLINE(  80)			if ((updateVersion != curVersion)) {
HXLINE(  82)				 ::flixel::FlxState nextState =  ::OutdatedSubState2_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  82)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  82)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_35_create)
HXLINE(  34)		 ::funkinMedia::FunkinMedia _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  36)		::Array< ::String > bgColors = ::Array_obj< ::String >::fromData( _hx_array_data_f939ccd8_5,4);
HXLINE(  37)		::Array< int > colorRotation = ::Array_obj< int >::fromData( _hx_array_data_f939ccd8_6,1);
HXLINE(  39)		 ::flixel::FlxSprite menuBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  39)		 ::flixel::FlxSprite menuBG1 = menuBG->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE(  41)		 ::flixel::FlxSprite menuBG2 = menuBG1;
HXDLIN(  41)		menuBG2->setGraphicSize(::Std_obj::_hx_int((menuBG1->get_width() * ((Float)1.1))),null());
HXLINE(  42)		menuBG1->updateHitbox();
HXLINE(  43)		{
HXLINE(  43)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  43)			bool _hx_tmp;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  43)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp) {
HXLINE(  43)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN(  43)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  43)				menuBG->set_x(((( (Float)(_hx_tmp) ) - menuBG1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  43)			bool _hx_tmp1;
HXDLIN(  43)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  43)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  43)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  43)			if (_hx_tmp1) {
HXLINE(  43)				 ::flixel::FlxSprite menuBG = menuBG1;
HXDLIN(  43)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  43)				menuBG->set_y(((( (Float)(_hx_tmp) ) - menuBG1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  44)		menuBG1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  45)		this->add(menuBG1);
HXLINE(  47)		 ::flixel::FlxSprite menuBG3 = menuBG1;
HXDLIN(  47)		int menuBG4 = menuBG1->color;
HXDLIN(  47)		::flixel::tweens::FlxTween_obj::color(menuBG3,2,menuBG4,( (int)(::flixel::util::_FlxColor::FlxColor_Impl__obj::fromString(bgColors->__get(colorRotation->__get(0)))) ),null());
HXLINE(  49)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(bgColors,colorRotation,menuBG1)),0);
HXLINE(  58)		::String ver = (HX_("v",76,00,00,00) + ::MainMenuState_obj::StenEngineVer);
HXLINE(  60)		 ::sys::Http http =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/EmreFnfGithub/FunkinMediaStenEngine/main/version.txt",63,6a,41,37));
HXLINE(  62)		http->onData =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE(  72)		http->request(null());
HXLINE(  74)		 ::sys::Http http2 =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/EmreFnfGithub/StenEngine-public/main/gameVer.txt",91,f3,1e,48));
HXLINE(  76)		http2->onData =  ::Dynamic(new _hx_Closure_2());
HXLINE(  88)		http2->request(null());
HXLINE(  90)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,HX_("Press S to Sten Web Site",ee,f9,fe,3b),12,null());
HXLINE(  91)		versionShit->scrollFactor->set(null(),null());
HXLINE(  92)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  93)		this->add(versionShit);
            	}


void FunkinMedia_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_8c7e528a49ab42e2_99_update)
HXLINE( 100)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 102)			 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 102)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 102)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 104)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 104)		if (_this->keyManager->checkStatusUnsafe(83,_this->status)) {
HXLINE( 106)			::CoolUtil_obj::browserLoad(HX_("https://emrefnfgithub.github.io/",b5,bd,7a,c9));
            		}
            	}



::hx::ObjectPtr< FunkinMedia_obj > FunkinMedia_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< FunkinMedia_obj > __this = new FunkinMedia_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< FunkinMedia_obj > FunkinMedia_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	FunkinMedia_obj *__this = (FunkinMedia_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(FunkinMedia_obj), true, "funkinMedia.FunkinMedia"));
	*(void **)__this = FunkinMedia_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

FunkinMedia_obj::FunkinMedia_obj()
{
}

::hx::Val FunkinMedia_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { return ::hx::Val( updateAvailable ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val FunkinMedia_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { updateAvailable=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FunkinMedia_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("updateAvailable",80,2a,0e,c7));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo FunkinMedia_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(FunkinMedia_obj,updateAvailable),HX_("updateAvailable",80,2a,0e,c7)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *FunkinMedia_obj_sStaticStorageInfo = 0;
#endif

static ::String FunkinMedia_obj_sMemberFields[] = {
	HX_("updateAvailable",80,2a,0e,c7),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class FunkinMedia_obj::__mClass;

void FunkinMedia_obj::__register()
{
	FunkinMedia_obj _hx_dummy;
	FunkinMedia_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("funkinMedia.FunkinMedia",d8,cc,39,f9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(FunkinMedia_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< FunkinMedia_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FunkinMedia_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FunkinMedia_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace funkinMedia
