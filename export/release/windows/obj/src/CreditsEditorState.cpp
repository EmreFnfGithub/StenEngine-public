// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_AttachedSprite
#include <AttachedSprite.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CreditsEditorState
#include <CreditsEditorState.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7d0502112989d350_25_new,"CreditsEditorState","new",0x8deb0f3c,"CreditsEditorState.new","CreditsEditorState.hx",25,0x47cfabb4)
HX_LOCAL_STACK_FRAME(_hx_pos_7d0502112989d350_38_create,"CreditsEditorState","create",0xd37dd9a0,"CreditsEditorState.create","CreditsEditorState.hx",38,0x47cfabb4)
HX_LOCAL_STACK_FRAME(_hx_pos_7d0502112989d350_62_update,"CreditsEditorState","update",0xde73f8ad,"CreditsEditorState.update","CreditsEditorState.hx",62,0x47cfabb4)
HX_LOCAL_STACK_FRAME(_hx_pos_7d0502112989d350_29_boot,"CreditsEditorState","boot",0x97db45d6,"CreditsEditorState.boot","CreditsEditorState.hx",29,0x47cfabb4)

void CreditsEditorState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_7d0502112989d350_25_new)
HXDLIN(  25)		super::__construct(TransIn,TransOut);
            	}

Dynamic CreditsEditorState_obj::__CreateEmpty() { return new CreditsEditorState_obj; }

void *CreditsEditorState_obj::_hx_vtable = 0;

Dynamic CreditsEditorState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CreditsEditorState_obj > _hx_result = new CreditsEditorState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool CreditsEditorState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3ab7e40a || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void CreditsEditorState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_7d0502112989d350_38_create)
HXLINE(  39)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  39)		::String library = null();
HXDLIN(  39)		this->bg = _hx_tmp->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  40)		this->bg->set_color(-16181);
HXLINE(  41)		this->add(this->bg);
HXLINE(  43)		this->descBox =  ::AttachedSprite_obj::__alloc( HX_CTX ,null(),null(),null(),null());
HXLINE(  44)		this->descBox->makeGraphic(1,1,-16777216,null(),null());
HXLINE(  45)		this->descBox->xAdd = ( (Float)(-10) );
HXLINE(  46)		this->descBox->yAdd = ( (Float)(-10) );
HXLINE(  47)		this->descBox->alphaMult = ((Float)0.6);
HXLINE(  48)		this->descBox->set_alpha(((Float)0.6));
HXLINE(  49)		this->add(this->descBox);
HXLINE(  52)		 ::flixel::text::FlxText descText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,50,600,1180,HX_("",00,00,00,00),32,null());
HXLINE(  53)		descText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("muff.ttf",20,12,d0,fd)),32,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  54)		descText->scrollFactor->set(null(),null());
HXLINE(  55)		descText->set_borderSize(((Float)2.4));
HXLINE(  56)		this->add(descText);
HXLINE(  58)		this->super::create();
            	}


void CreditsEditorState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_7d0502112989d350_62_update)
HXLINE(  63)		this->super::update(elapsed);
HXLINE(  65)		bool upP = ::PlayerSettings_obj::player1->controls->_upP->check();
HXLINE(  66)		bool downP = ::PlayerSettings_obj::player1->controls->_downP->check();
HXLINE(  67)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE(  68)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(  68)		bool space = _this->keyManager->checkStatusUnsafe(32,_this->status);
HXLINE(  70)		int shiftMult = 1;
HXLINE(  71)		 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  71)		if (_this1->keyManager->checkStatusUnsafe(16,_this1->status)) {
HXLINE(  72)			shiftMult = 3;
            		}
HXLINE(  74)		if (upP) {
HXLINE(  76)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  76)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
            		}
HXLINE(  78)		if (downP) {
HXLINE(  80)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  80)			_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),((Float)0.4),null(),null(),null(),null());
            		}
HXLINE(  83)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  84)			 ::flixel::FlxState nextState =  ::CreditsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  84)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  84)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


int CreditsEditorState_obj::curSelected;


::hx::ObjectPtr< CreditsEditorState_obj > CreditsEditorState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< CreditsEditorState_obj > __this = new CreditsEditorState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< CreditsEditorState_obj > CreditsEditorState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	CreditsEditorState_obj *__this = (CreditsEditorState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CreditsEditorState_obj), true, "CreditsEditorState"));
	*(void **)__this = CreditsEditorState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

CreditsEditorState_obj::CreditsEditorState_obj()
{
}

void CreditsEditorState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CreditsEditorState);
	HX_MARK_MEMBER_NAME(descBox,"descBox");
	HX_MARK_MEMBER_NAME(grpCredits,"grpCredits");
	HX_MARK_MEMBER_NAME(descText,"descText");
	HX_MARK_MEMBER_NAME(bg,"bg");
	HX_MARK_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CreditsEditorState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(descBox,"descBox");
	HX_VISIT_MEMBER_NAME(grpCredits,"grpCredits");
	HX_VISIT_MEMBER_NAME(descText,"descText");
	HX_VISIT_MEMBER_NAME(bg,"bg");
	HX_VISIT_MEMBER_NAME(colorTween,"colorTween");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CreditsEditorState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { return ::hx::Val( bg ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { return ::hx::Val( descBox ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { return ::hx::Val( descText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { return ::hx::Val( grpCredits ); }
		if (HX_FIELD_EQ(inName,"colorTween") ) { return ::hx::Val( colorTween ); }
	}
	return super::__Field(inName,inCallProp);
}

bool CreditsEditorState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { outValue = ( curSelected ); return true; }
	}
	return false;
}

::hx::Val CreditsEditorState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"bg") ) { bg=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"descBox") ) { descBox=inValue.Cast<  ::AttachedSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"descText") ) { descText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"grpCredits") ) { grpCredits=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"colorTween") ) { colorTween=inValue.Cast<  ::flixel::tweens::FlxTween >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool CreditsEditorState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void CreditsEditorState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("descBox",3a,20,25,19));
	outFields->push(HX_("grpCredits",b5,20,38,34));
	outFields->push(HX_("descText",9e,53,35,f3));
	outFields->push(HX_("bg",c5,55,00,00));
	outFields->push(HX_("colorTween",08,c2,dc,3d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CreditsEditorState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::AttachedSprite */ ,(int)offsetof(CreditsEditorState_obj,descBox),HX_("descBox",3a,20,25,19)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(CreditsEditorState_obj,grpCredits),HX_("grpCredits",b5,20,38,34)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CreditsEditorState_obj,descText),HX_("descText",9e,53,35,f3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CreditsEditorState_obj,bg),HX_("bg",c5,55,00,00)},
	{::hx::fsObject /*  ::flixel::tweens::FlxTween */ ,(int)offsetof(CreditsEditorState_obj,colorTween),HX_("colorTween",08,c2,dc,3d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo CreditsEditorState_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &CreditsEditorState_obj::curSelected,HX_("curSelected",fb,eb,ab,32)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String CreditsEditorState_obj_sMemberFields[] = {
	HX_("descBox",3a,20,25,19),
	HX_("grpCredits",b5,20,38,34),
	HX_("descText",9e,53,35,f3),
	HX_("bg",c5,55,00,00),
	HX_("colorTween",08,c2,dc,3d),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

static void CreditsEditorState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CreditsEditorState_obj::curSelected,"curSelected");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CreditsEditorState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CreditsEditorState_obj::curSelected,"curSelected");
};

#endif

::hx::Class CreditsEditorState_obj::__mClass;

static ::String CreditsEditorState_obj_sStaticFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	::String(null())
};

void CreditsEditorState_obj::__register()
{
	CreditsEditorState_obj _hx_dummy;
	CreditsEditorState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CreditsEditorState",4a,01,f4,e2);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CreditsEditorState_obj::__GetStatic;
	__mClass->mSetStaticField = &CreditsEditorState_obj::__SetStatic;
	__mClass->mMarkFunc = CreditsEditorState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CreditsEditorState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CreditsEditorState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CreditsEditorState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CreditsEditorState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CreditsEditorState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CreditsEditorState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void CreditsEditorState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_7d0502112989d350_29_boot)
HXDLIN(  29)		curSelected = 0;
            	}
}

