// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Boyfriend
#include <Boyfriend.h>
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_ChartingBox
#include <ChartingBox.h>
#endif
#ifndef INCLUDED_ChartingState
#include <ChartingState.h>
#endif
#ifndef INCLUDED_Conductor
#include <Conductor.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_Debug
#include <Debug.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_Event
#include <Event.h>
#endif
#ifndef INCLUDED_HealthIcon
#include <HealthIcon.h>
#endif
#ifndef INCLUDED_HelperFunctions
#include <HelperFunctions.h>
#endif
#ifndef INCLUDED_Lambda
#include <Lambda.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Note
#include <Note.h>
#endif
#ifndef INCLUDED_NoteskinHelpers
#include <NoteskinHelpers.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_SectionRender
#include <SectionRender.h>
#endif
#ifndef INCLUDED_Song
#include <Song.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_TimingStruct
#include <TimingStruct.h>
#endif
#ifndef INCLUDED_Waveform
#include <Waveform.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_IFlxBasic
#include <flixel/IFlxBasic.h>
#endif
#ifndef INCLUDED_flixel_IFlxSprite
#include <flixel/IFlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_display_FlxGridOverlay
#include <flixel/addons/display/FlxGridOverlay.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxInputText
#include <flixel/addons/ui/FlxInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI
#include <flixel/addons/ui/FlxUI.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUI9SliceSprite
#include <flixel/addons/ui/FlxUI9SliceSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIButton
#include <flixel/addons/ui/FlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUICheckBox
#include <flixel/addons/ui/FlxUICheckBox.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownHeader
#include <flixel/addons/ui/FlxUIDropDownHeader.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIDropDownMenu
#include <flixel/addons/ui/FlxUIDropDownMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIGroup
#include <flixel/addons/ui/FlxUIGroup.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIInputText
#include <flixel/addons/ui/FlxUIInputText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUINumericStepper
#include <flixel/addons/ui/FlxUINumericStepper.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUISprite
#include <flixel/addons/ui/FlxUISprite.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITabMenu
#include <flixel/addons/ui/FlxUITabMenu.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIText
#include <flixel/addons/ui/FlxUIText.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUITypedButton
#include <flixel/addons/ui/FlxUITypedButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_StrNameLabel
#include <flixel/addons/ui/StrNameLabel.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ICursorPointable
#include <flixel/addons/ui/interfaces/ICursorPointable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFireTongue
#include <flixel/addons/ui/interfaces/IFireTongue.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIButton
#include <flixel/addons/ui/interfaces/IFlxUIButton.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIClickable
#include <flixel/addons/ui/interfaces/IFlxUIClickable.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIWidget
#include <flixel/addons/ui/interfaces/IFlxUIWidget.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IHasParams
#include <flixel/addons/ui/interfaces/IHasParams.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_ILabeled
#include <flixel/addons/ui/interfaces/ILabeled.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IResizable
#include <flixel/addons/ui/interfaces/IResizable.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroupIterator
#include <flixel/group/FlxTypedGroupIterator.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouseButton
#include <flixel/input/mouse/FlxMouseButton.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_debug_log_LogStyle
#include <flixel/system/debug/log/LogStyle.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton
#include <flixel/ui/FlxTypedButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_ArraySort
#include <haxe/ds/ArraySort.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_haxe_format_JsonParser
#include <haxe/format/JsonParser.h>
#endif
#ifndef INCLUDED_haxe_format_JsonPrinter
#include <haxe/format/JsonPrinter.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_lime__internal_backend_native_NativeAudioSource
#include <lime/_internal/backend/native/NativeAudioSource.h>
#endif
#ifndef INCLUDED_lime_app_Application
#include <lime/app/Application.h>
#endif
#ifndef INCLUDED_lime_app_IModule
#include <lime/app/IModule.h>
#endif
#ifndef INCLUDED_lime_app_Module
#include <lime/app/Module.h>
#endif
#ifndef INCLUDED_lime_media_AudioSource
#include <lime/media/AudioSource.h>
#endif
#ifndef INCLUDED_lime_media_openal_AL
#include <lime/media/openal/AL.h>
#endif
#ifndef INCLUDED_lime_ui_Window
#include <lime/ui/Window.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_media_Sound
#include <openfl/media/Sound.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_openfl_media_SoundLoaderContext
#include <openfl/media/SoundLoaderContext.h>
#endif
#ifndef INCLUDED_openfl_net_FileReference
#include <openfl/net/FileReference.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_smTools_SMFile
#include <smTools/SMFile.h>
#endif
#ifndef INCLUDED_smTools_SMHeader
#include <smTools/SMHeader.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c8186eee1bd9a607_54_new,"ChartingState","new",0x5e894bff,"ChartingState.new","ChartingState.hx",54,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_158_create,"ChartingState","create",0xe351b8bd,"ChartingState.create","ChartingState.hx",158,0xd9647851)
static const ::String _hx_array_data_9bdde08d_6[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_463_regenerateLines,"ChartingState","regenerateLines",0x6a7da516,"ChartingState.regenerateLines","ChartingState.hx",463,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_522_addGrid,"ChartingState","addGrid",0x736e50a6,"ChartingState.addGrid","ChartingState.hx",522,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_563_containsName,"ChartingState","containsName",0x8c788c8b,"ChartingState.containsName","ChartingState.hx",563,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_600_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",600,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_676_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",676,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_755_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",755,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_837_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",837,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_892_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",892,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_911_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",911,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_916_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",916,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_920_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",920,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_579_addEventsUI,"ChartingState","addEventsUI",0x0ee43b8d,"ChartingState.addEventsUI","ChartingState.hx",579,0xd9647851)
static const ::String _hx_array_data_9bdde08d_32[] = {
	HX_("BPM Change",d1,e8,85,d1),HX_("Scroll Speed Change",fc,2c,18,61),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_965_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",965,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_973_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",973,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_960_addOptionsUI,"ChartingState","addOptionsUI",0x6ad04b52,"ChartingState.addOptionsUI","ChartingState.hx",960,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_993_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",993,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_999_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",999,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1004_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1004,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1009_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1009,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1013_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1013,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1068_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1068,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1077_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1077,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1090_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1090,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1105_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1105,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1113_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1113,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1121_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",1121,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_984_addSongUI,"ChartingState","addSongUI",0xfd857f49,"ChartingState.addSongUI","ChartingState.hx",984,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1193_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1193,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1199_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1199,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1213_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1213,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1252_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1252,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1264_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1264,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1184_addSectionUI,"ChartingState","addSectionUI",0x70a90d99,"ChartingState.addSectionUI","ChartingState.hx",1184,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1318_goToSection,"ChartingState","goToSection",0x859ef101,"ChartingState.goToSection","ChartingState.hx",1318,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1356_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1356,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1342_addNoteUI,"ChartingState","addNoteUI",0x01b274a6,"ChartingState.addNoteUI","ChartingState.hx",1342,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1397_pasteNotesFromArray,"ChartingState","pasteNotesFromArray",0x6ce427a0,"ChartingState.pasteNotesFromArray","ChartingState.hx",1397,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1451_offsetSelectedNotes,"ChartingState","offsetSelectedNotes",0x5b9cd9f2,"ChartingState.offsetSelectedNotes","ChartingState.hx",1451,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1582_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1582,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1527_loadSong,"ChartingState","loadSong",0x36c2f91c,"ChartingState.loadSong","ChartingState.hx",1527,0xd9647851)
static const ::String _hx_array_data_9bdde08d_80[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1594_generateUI,"ChartingState","generateUI",0x13f5670a,"ChartingState.generateUI","ChartingState.hx",1594,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1614_getEvent,"ChartingState","getEvent",0x4f66dba5,"ChartingState.getEvent","ChartingState.hx",1614,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1747_poggers,"ChartingState","poggers",0x186dfa06,"ChartingState.poggers","ChartingState.hx",1747,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1812_stepStartTime,"ChartingState","stepStartTime",0xba6fcd02,"ChartingState.stepStartTime","ChartingState.hx",1812,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1816_sectionStartTime,"ChartingState","sectionStartTime",0x9b4027eb,"ChartingState.sectionStartTime","ChartingState.hx",1816,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1838_swapSection,"ChartingState","swapSection",0x81d47e31,"ChartingState.swapSection","ChartingState.hx",1838,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1832_swapSection,"ChartingState","swapSection",0x81d47e31,"ChartingState.swapSection","ChartingState.hx",1832,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1881_resizeEverything,"ChartingState","resizeEverything",0xa26a0e88,"ChartingState.resizeEverything","ChartingState.hx",1881,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_1920_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",1920,0xd9647851)
static const bool _hx_array_data_9bdde08d_132[] = {
	0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2478_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2478,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2584_update,"ChartingState","update",0xee47d7ca,"ChartingState.update","ChartingState.hx",2584,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2813_changeNoteSustain,"ChartingState","changeNoteSustain",0x9b3f5f20,"ChartingState.changeNoteSustain","ChartingState.hx",2813,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2841_resetSection,"ChartingState","resetSection",0xb8b9e457,"ChartingState.resetSection","ChartingState.hx",2841,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2861_changeSection,"ChartingState","changeSection",0xb8ce82b4,"ChartingState.changeSection","ChartingState.hx",2861,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2895_copySection,"ChartingState","copySection",0xd085354f,"ChartingState.copySection","ChartingState.hx",2895,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2914_updateSectionUI,"ChartingState","updateSectionUI",0x006c124f,"ChartingState.updateSectionUI","ChartingState.hx",2914,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2939_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2939,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2932_updateHeads,"ChartingState","updateHeads",0x26e9ef29,"ChartingState.updateHeads","ChartingState.hx",2932,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2980_updateNoteUI,"ChartingState","updateNoteUI",0x1a7d0230,"ChartingState.updateNoteUI","ChartingState.hx",2980,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_2994_updateGrid,"ChartingState","updateGrid",0xc2b587b0,"ChartingState.updateGrid","ChartingState.hx",2994,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3062_addSection,"ChartingState","addSection",0x8af6f805,"ChartingState.addSection","ChartingState.hx",3062,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3096_selectNote,"ChartingState","selectNote",0x7d3a534f,"ChartingState.selectNote","ChartingState.hx",3096,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3136_deleteNote,"ChartingState","deleteNote",0x61ebbbfe,"ChartingState.deleteNote","ChartingState.hx",3136,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3180_clearSection,"ChartingState","clearSection",0x225a5059,"ChartingState.clearSection","ChartingState.hx",3180,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3187_clearSong,"ChartingState","clearSong",0xd7f188e1,"ChartingState.clearSong","ChartingState.hx",3187,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3197_newSection,"ChartingState","newSection",0x606eefa6,"ChartingState.newSection","ChartingState.hx",3197,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3237_recalculateAllSectionTimes,"ChartingState","recalculateAllSectionTimes",0xbe1ad090,"ChartingState.recalculateAllSectionTimes","ChartingState.hx",3237,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3259_shiftNotes,"ChartingState","shiftNotes",0x74b78ea0,"ChartingState.shiftNotes","ChartingState.hx",3259,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3309_getSectionByTime,"ChartingState","getSectionByTime",0x743e0fd4,"ChartingState.getSectionByTime","ChartingState.hx",3309,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3327_getNoteByTime,"ChartingState","getNoteByTime",0x06f3c7ab,"ChartingState.getNoteByTime","ChartingState.hx",3327,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3340_addNote,"ChartingState","addNote",0x780c91d2,"ChartingState.addNote","ChartingState.hx",3340,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3442_getStrumTime,"ChartingState","getStrumTime",0xec7b6301,"ChartingState.getStrumTime","ChartingState.hx",3442,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3447_getYfromStrum,"ChartingState","getYfromStrum",0x7268247b,"ChartingState.getYfromStrum","ChartingState.hx",3447,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3476_loadLevel,"ChartingState","loadLevel",0xa572de5d,"ChartingState.loadLevel","ChartingState.hx",3476,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3481_getNotes,"ChartingState","getNotes",0x796cefcc,"ChartingState.getNotes","ChartingState.hx",3481,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3493_loadJson,"ChartingState","loadJson",0x30d3176f,"ChartingState.loadJson","ChartingState.hx",3493,0xd9647851)
static const ::String _hx_array_data_9bdde08d_193[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3533_loadAutosave,"ChartingState","loadAutosave",0xe706d2f3,"ChartingState.loadAutosave","ChartingState.hx",3533,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3586_autosaveSong,"ChartingState","autosaveSong",0x50afbca2,"ChartingState.autosaveSong","ChartingState.hx",3586,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3598_saveLevel,"ChartingState","saveLevel",0x18e899e6,"ChartingState.saveLevel","ChartingState.hx",3598,0xd9647851)
static const ::String _hx_array_data_9bdde08d_206[] = {
	HX_("-easy",af,a6,14,2c),HX_("",00,00,00,00),HX_("-hard",98,49,10,2e),HX_("-insane",97,16,20,ed),
};
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3631_onSaveComplete,"ChartingState","onSaveComplete",0x9fbb2796,"ChartingState.onSaveComplete","ChartingState.hx",3631,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3643_onSaveCancel,"ChartingState","onSaveCancel",0xc234b317,"ChartingState.onSaveCancel","ChartingState.hx",3643,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_3654_onSaveError,"ChartingState","onSaveError",0x40b268cb,"ChartingState.onSaveError","ChartingState.hx",3654,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_69_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",69,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_70_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",70,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_83_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",83,0xd9647851)
HX_LOCAL_STACK_FRAME(_hx_pos_c8186eee1bd9a607_145_boot,"ChartingState","boot",0x51b233b3,"ChartingState.boot","ChartingState.hx",145,0xd9647851)

void ChartingState_obj::__construct(::hx::Null< bool >  __o_reloadOnInit){
            		bool reloadOnInit = __o_reloadOnInit.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_54_new)
HXLINE(3473)		this->daSpacing = ((Float)0.3);
HXLINE(3337)		this->curSelectedNoteObject = null();
HXLINE(1917)		this->lastAction = HX_("",00,00,00,00);
HXLINE(1915)		this->selectInitialY = ((Float)0);
HXLINE(1914)		this->selectInitialX = ((Float)0);
HXLINE(1912)		this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1911)		this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1910)		this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1907)		this->waitingForRelease = false;
HXLINE(1903)		this->snapSelection = 3;
HXLINE(1901)		this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1878)		this->lastUpdatedSection = null();
HXLINE(1877)		this->updateFrame = 0;
HXLINE(1875)		this->lastBPM = ((Float)0);
HXLINE(1874)		this->currentBPM = ((Float)0);
HXLINE(1872)		this->changeIndex = 0;
HXLINE(1870)		this->diff = ((Float)0);
HXLINE(1829)		this->doSnapShit = false;
HXLINE(1828)		this->writingNotes = false;
HXLINE(1736)		this->updatedSection = false;
HXLINE( 576)		this->Typeables = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 574)		this->chartEvents = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 560)		this->currentEventPosition = ((Float)0);
HXLINE( 559)		this->savedValue = HX_("100",71,58,25,00);
HXLINE( 558)		this->savedType = HX_("BPM Change",d1,e8,85,d1);
HXLINE( 557)		this->currentSelectedEventName = HX_("",00,00,00,00);
HXLINE( 155)		this->reloadOnInit = false;
HXLINE( 137)		this->claps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 129)		this->height = 0;
HXLINE( 121)		this->player1 =  ::Boyfriend_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("bf",c4,55,00,00));
HXLINE( 120)		this->player2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(0) ),HX_("dad",47,36,4c,00),null());
HXLINE( 116)		this->tempBpm = ((Float)0);
HXLINE(  97)		this->defaultSnap = true;
HXLINE(  96)		this->subDivisions = ((Float)1);
HXLINE(  94)		this->GRID_SIZE = 40;
HXLINE(  89)		this->amountSteps = 0;
HXLINE(  88)		this->curSong = HX_("Dad Battle",31,46,15,16);
HXLINE(  81)		this->curSection = 0;
HXLINE(  75)		this->zoomFactor = ((Float)0.4);
HXLINE(  74)		this->beatsShown = ((Float)1);
HXLINE(  72)		this->speed = ((Float)1.0);
HXLINE(  64)		this->deezNuts =  ::haxe::ds::IntMap_obj::__alloc( HX_CTX );
HXLINE(  62)		this->snap = 16;
HXLINE(  60)		this->playClaps = false;
HXLINE( 149)		super::__construct(null(),null());
HXLINE( 152)		this->reloadOnInit = reloadOnInit;
            	}

Dynamic ChartingState_obj::__CreateEmpty() { return new ChartingState_obj; }

void *ChartingState_obj::_hx_vtable = 0;

Dynamic ChartingState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChartingState_obj > _hx_result = new ChartingState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ChartingState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x7824f5cd || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void ChartingState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_158_create)
HXLINE( 160)		::DiscordClient_obj::changePresence(HX_("Chart Editor",ef,b4,29,e9),null(),null(),true,null());
HXLINE( 163)		this->curSection = ::ChartingState_obj::lastSection;
HXLINE( 166)		 ::flixel::FlxSprite bg = ::CoolUtil_obj::addBG2(::hx::ObjectPtr<OBJ_>(this));
HXLINE( 167)		bg->scrollFactor->set(0,0);
HXLINE( 174)		::PlayState_obj::noteskinSprite = ::NoteskinHelpers_obj::generateNoteskinSprite(( (int)(::flixel::FlxG_obj::save->data->__Field(HX_("noteskin",6f,0f,af,70),::hx::paccDynamic)) ));
HXLINE( 176)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 178)		::ChartingState_obj::instance = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 180)		this->deezNuts->set(4,1);
HXLINE( 181)		this->deezNuts->set(8,2);
HXLINE( 182)		this->deezNuts->set(12,3);
HXLINE( 183)		this->deezNuts->set(16,4);
HXLINE( 184)		this->deezNuts->set(24,6);
HXLINE( 185)		this->deezNuts->set(32,8);
HXLINE( 186)		this->deezNuts->set(64,16);
HXLINE( 188)		if (::hx::IsNull( ::flixel::FlxG_obj::save->data->__Field(HX_("showHelp",5e,f6,91,ac),::hx::paccDynamic) )) {
HXLINE( 189)			::flixel::FlxG_obj::save->data->__SetField(HX_("showHelp",5e,f6,91,ac),true,::hx::paccDynamic);
            		}
HXLINE( 191)		this->sectionRenderes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 192)		this->lines =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 193)		this->texts =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 195)		::TimingStruct_obj::clearTimings();
HXLINE( 197)		if (::hx::IsNotNull( ::PlayState_obj::SONG )) {
HXLINE( 199)			if (::PlayState_obj::isSM) {
HXLINE( 202)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            			}
            			else {
HXLINE( 207)				::String diff = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_6,4)->__get(::PlayState_obj::storyDifficulty);
HXLINE( 208)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),diff));
            			}
            		}
            		else {
HXLINE( 213)			::ChartingState_obj::_song =  ::Dynamic(::hx::Anon_obj::Create(14)
            				->setFixed(0,HX_("speed",87,97,69,81),( (Float)(1) ))
            				->setFixed(1,HX_("stage",be,6a,0b,84),HX_("stage",be,6a,0b,84))
            				->setFixed(2,HX_("player1",b0,09,15,8a),HX_("bf",c4,55,00,00))
            				->setFixed(3,HX_("player2",b1,09,15,8a),HX_("dad",47,36,4c,00))
            				->setFixed(4,HX_("notes",41,dc,ca,9f),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(5,HX_("noteStyle",df,ef,aa,c1),HX_("normal",27,72,69,30))
            				->setFixed(6,HX_("validScore",b6,dc,18,c7),false)
            				->setFixed(7,HX_("chartVersion",da,e9,39,c8),::ChartingState_obj::latestChartVersion)
            				->setFixed(8,HX_("gfVersion",b9,c6,7d,f3),HX_("gf",1f,5a,00,00))
            				->setFixed(9,HX_("bpm",df,be,4a,00),( (Float)(150) ))
            				->setFixed(10,HX_("needsVoices",be,05,e9,0d),true)
            				->setFixed(11,HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(0))
            				->setFixed(12,HX_("songId",10,c3,88,2d),HX_("test",52,c8,f9,4c))
            				->setFixed(13,HX_("songName",c0,d0,d7,36),HX_("Test",72,f4,d2,37)));
            		}
HXLINE( 231)		this->addGrid(1);
HXLINE( 233)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("chartVersion",da,e9,39,c8),::hx::paccDynamic) )) {
HXLINE( 234)			::ChartingState_obj::_song->__SetField(HX_("chartVersion",da,e9,39,c8),HX_("2",32,00,00,00),::hx::paccDynamic);
            		}
HXLINE( 241)		this->snapText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,60,10,0,HX_("",00,00,00,00),14,null());
HXLINE( 242)		this->snapText->scrollFactor->set(null(),null());
HXLINE( 244)		this->curRenderedNotes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 245)		this->curRenderedSustains =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 247)		::flixel::FlxG_obj::mouse->set_visible(true);
HXLINE( 249)		this->tempBpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE( 251)		this->addSection(null());
HXLINE( 255)		this->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),this->reloadOnInit);
HXLINE( 256)		::Conductor_obj::changeBPM(( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),null());
HXLINE( 257)		::Conductor_obj::mapBPMChanges(::ChartingState_obj::_song);
HXLINE( 259)		::ChartingState_obj::leftIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 260)		::ChartingState_obj::rightIcon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null());
HXLINE( 262)		int index = 0;
HXLINE( 264)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 265)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 267)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length == 0)) {
HXLINE( 268)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 272)		int currentIndex = 0;
HXLINE( 273)		{
HXLINE( 273)			int _g = 0;
HXDLIN( 273)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 273)			while((_g < _g1->length)){
HXLINE( 273)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 273)				_g = (_g + 1);
HXLINE( 275)				 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 276)				::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 277)				Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 278)				Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 280)				if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 282)					Float beat = pos;
HXLINE( 284)					Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 286)					::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 288)					if ((currentIndex != 0)) {
HXLINE( 290)						 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 291)						data->endBeat = beat;
HXLINE( 292)						data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 293)						Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 294)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 295)						::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            					}
HXLINE( 298)					currentIndex = (currentIndex + 1);
            				}
            			}
            		}
HXLINE( 302)		 ::TimingStruct lastSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 304)		{
HXLINE( 304)			int _g2 = 0;
HXDLIN( 304)			int _g3 = ::TimingStruct_obj::AllTimings->length;
HXDLIN( 304)			while((_g2 < _g3)){
HXLINE( 304)				_g2 = (_g2 + 1);
HXDLIN( 304)				int i = (_g2 - 1);
HXLINE( 306)				 ::TimingStruct seg = ::TimingStruct_obj::AllTimings->__get(i).StaticCast<  ::TimingStruct >();
HXLINE( 307)				if ((i == (::TimingStruct_obj::AllTimings->length - 1))) {
HXLINE( 308)					lastSeg = seg;
            				}
            			}
            		}
HXLINE( 313)		this->recalculateAllSectionTimes();
HXLINE( 315)		this->poggers();
HXLINE( 319)		{
HXLINE( 319)			int _g4 = 0;
HXDLIN( 319)			while((_g4 < 9000000)){
HXLINE( 319)				_g4 = (_g4 + 1);
HXDLIN( 319)				int i = (_g4 - 1);
HXLINE( 321)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(i) ));
HXLINE( 323)				Float start = ((( (Float)(i) ) - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 325)				Float time = ((seg->startTime + start) * ( (Float)(1000) ));
HXLINE( 327)				if ((time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE( 328)					goto _hx_goto_3;
            				}
HXLINE( 330)				::ChartingState_obj::lengthInBeats = ( (Float)(i) );
            			}
            			_hx_goto_3:;
            		}
HXLINE( 333)		::ChartingState_obj::lengthInSteps = (::ChartingState_obj::lengthInBeats * ( (Float)(4) ));
HXLINE( 337)		int sections = ::Math_obj::floor(((::ChartingState_obj::lengthInSteps + 16) / ( (Float)(16) )));
HXLINE( 339)		Float targetY = this->getYfromStrum(::flixel::FlxG_obj::sound->music->_length);
HXLINE( 343)		{
HXLINE( 343)			int _g5 = 0;
HXDLIN( 343)			int _g6 = ::Math_obj::round((targetY / ( (Float)(640) )));
HXDLIN( 343)			while((_g5 < _g6)){
HXLINE( 343)				_g5 = (_g5 + 1);
HXDLIN( 343)				int awfgaw = (_g5 - 1);
HXLINE( 345)				 ::SectionRender renderer =  ::SectionRender_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)((640 * awfgaw)) ),this->GRID_SIZE,null());
HXLINE( 346)				if (::hx::IsNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw) )) {
HXLINE( 347)					::Array< ::Dynamic> _hx_tmp = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN( 347)					_hx_tmp->push(this->newSection(16,true,false,false));
            				}
HXLINE( 349)				renderer->section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw);
HXLINE( 351)				this->sectionRenderes->add(renderer).StaticCast<  ::SectionRender >();
HXLINE( 353)				Float down = this->getYfromStrum(( (Float)(renderer->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 353)				Float down1 = (down * this->zoomFactor);
HXLINE( 355)				 ::flixel::FlxSprite sectionicon;
HXDLIN( 355)				if (( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE( 355)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
            				else {
HXLINE( 355)					sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            				}
HXLINE( 356)				sectionicon->set_x(( (Float)(-95) ));
HXLINE( 357)				sectionicon->set_y((down1 - ( (Float)(75) )));
HXLINE( 358)				sectionicon->setGraphicSize(0,45);
HXLINE( 360)				renderer->icon = sectionicon;
HXLINE( 361)				renderer->lastUpdated = ( (bool)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(awfgaw)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE( 363)				this->add(sectionicon);
HXLINE( 364)				this->height = ::Math_obj::floor(renderer->y);
            			}
            		}
HXLINE( 369)		Float _hx_tmp = (this->gridBG->get_width() / ( (Float)(2) ));
HXDLIN( 369)		this->gridBlackLine =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp,null(),null())->makeGraphic(2,this->height,-16777216,null(),null());
HXLINE( 374)		::ChartingState_obj::leftIcon->setGraphicSize(0,45);
HXLINE( 375)		::ChartingState_obj::rightIcon->setGraphicSize(0,45);
HXLINE( 377)		this->add(::ChartingState_obj::leftIcon);
HXLINE( 378)		this->add(::ChartingState_obj::rightIcon);
HXLINE( 380)		::ChartingState_obj::leftIcon->setPosition(0,-100);
HXLINE( 381)		 ::HealthIcon _hx_tmp1 = ::ChartingState_obj::rightIcon;
HXDLIN( 381)		_hx_tmp1->setPosition((this->gridBG->get_width() / ( (Float)(2) )),-100);
HXLINE( 383)		::ChartingState_obj::leftIcon->scrollFactor->set(null(),null());
HXLINE( 384)		::ChartingState_obj::rightIcon->scrollFactor->set(null(),null());
HXLINE( 386)		this->bpmTxt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,985,25,0,HX_("",00,00,00,00),16,null());
HXLINE( 387)		this->bpmTxt->scrollFactor->set(null(),null());
HXLINE( 388)		this->add(this->bpmTxt);
HXLINE( 390)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN( 390)		this->strumLine = _hx_tmp2->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,null(),null(),null());
HXLINE( 392)		this->dummyArrow =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(this->GRID_SIZE,this->GRID_SIZE,null(),null(),null());
HXLINE( 393)		::Array< ::Dynamic> tabs = ::Array_obj< ::Dynamic>::__new(4)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Song",f5,4f,31,37))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Data",55,ca,2e,d8))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Section",c5,2d,29,2b))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Section Data",85,da,d0,2d))))->init(2, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Note",12,44,e3,33))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Note Data",18,cd,41,e6))))->init(3, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Assets",a3,bc,97,80))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Assets",a3,bc,97,80))));
HXLINE( 400)		this->UI_box =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),tabs,null(),true,null(),null());
HXLINE( 401)		this->UI_box->scrollFactor->set(null(),null());
HXLINE( 402)		this->UI_box->resize(( (Float)(300) ),( (Float)(400) ));
HXLINE( 403)		this->UI_box->set_x(((( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) )) + 40));
HXLINE( 404)		this->UI_box->set_y(( (Float)(20) ));
HXLINE( 406)		::Array< ::Dynamic> opt_tabs = ::Array_obj< ::Dynamic>::__new(2)->init(0, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Options",3e,5b,4f,ad))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Options",13,6c,3f,84))))->init(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("name",4b,72,ff,48),HX_("Events",39,c3,fe,ca))
            			->setFixed(1,HX_("label",f4,0d,af,6f),HX_("Song Events",04,64,1b,cd))));
HXLINE( 408)		this->UI_options =  ::flixel::addons::ui::FlxUITabMenu_obj::__alloc( HX_CTX ,null(),null(),opt_tabs,null(),true,null(),null());
HXLINE( 410)		this->UI_options->scrollFactor->set(null(),null());
HXLINE( 411)		this->UI_options->set_selected_tab(0);
HXLINE( 412)		this->UI_options->resize(( (Float)(300) ),( (Float)(200) ));
HXLINE( 413)		this->UI_options->set_x(this->UI_box->x);
HXLINE( 414)		this->UI_options->set_y(( (Float)((::flixel::FlxG_obj::height - 300)) ));
HXLINE( 415)		this->add(this->UI_options);
HXLINE( 416)		this->add(this->UI_box);
HXLINE( 418)		this->addSongUI();
HXLINE( 419)		this->addSectionUI();
HXLINE( 420)		this->addNoteUI();
HXLINE( 422)		this->addOptionsUI();
HXLINE( 423)		this->addEventsUI();
HXLINE( 425)		this->regenerateLines();
HXLINE( 427)		this->updateGrid();
HXLINE( 431)		this->add(this->sectionRenderes);
HXLINE( 432)		this->add(this->dummyArrow);
HXLINE( 433)		this->add(this->strumLine);
HXLINE( 434)		this->add(this->lines);
HXLINE( 435)		this->add(this->texts);
HXLINE( 436)		this->add(this->gridBlackLine);
HXLINE( 437)		this->add(this->curRenderedNotes);
HXLINE( 438)		this->add(this->curRenderedSustains);
HXLINE( 439)		this->selectedBoxes =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 441)		this->add(this->selectedBoxes);
HXLINE( 446)		this->add(this->snapText);
HXLINE( 448)		this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(929) ),( (Float)(230) ),( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE( 449)		 ::Character _hx_tmp3 = this->char1;
HXDLIN( 449)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.6))),null());
HXLINE( 450)		this->char1->scrollFactor->set(0,0);
HXLINE( 451)		this->add(this->char1);
HXLINE( 452)		this->char2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(30) ),( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE( 453)		 ::Character _hx_tmp4 = this->char2;
HXDLIN( 453)		_hx_tmp4->setGraphicSize(::Std_obj::_hx_int((this->char2->get_width() * ((Float)0.6))),null());
HXLINE( 454)		this->char2->scrollFactor->set(0,0);
HXLINE( 455)		this->add(this->char2);
HXLINE( 457)		this->super::create();
            	}


void ChartingState_obj::regenerateLines(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_463_regenerateLines)
HXLINE( 464)		while((this->lines->members->get_length() > 0)){
HXLINE( 466)			Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >()->destroy();
HXLINE( 467)			this->lines->members->remove(Dynamic( this->lines->members->__get(0)).StaticCast<  ::flixel::FlxSprite >());
            		}
HXLINE( 470)		while((this->texts->members->get_length() > 0)){
HXLINE( 472)			Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >()->destroy();
HXLINE( 473)			this->texts->members->remove(Dynamic( this->texts->members->__get(0)).StaticCast<  ::flixel::text::FlxText >());
            		}
HXLINE( 477)		if (::hx::IsNotNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 478)			int _g = 0;
HXDLIN( 478)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 478)			while((_g < _g1->length)){
HXLINE( 478)				 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 478)				_g = (_g + 1);
HXLINE( 480)				 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtBeat(i->position);
HXLINE( 482)				Float posi = ( (Float)(0) );
HXLINE( 484)				if (::hx::IsNotNull( seg )) {
HXLINE( 486)					Float start = ((i->position - seg->startBeat) / (seg->bpm / ( (Float)(60) )));
HXLINE( 488)					posi = (seg->startTime + start);
            				}
HXLINE( 491)				Float pos = this->getYfromStrum((posi * ( (Float)(1000) )));
HXDLIN( 491)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 493)				if ((pos1 < 0)) {
HXLINE( 494)					pos1 = ( (Float)(0) );
            				}
HXLINE( 496)				::String type = i->type;
HXLINE( 498)				 ::flixel::text::FlxText text =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,-190,pos1,0,((((i->name + HX_("\n",0a,00,00,00)) + type) + HX_("\n",0a,00,00,00)) + i->value),12,null());
HXLINE( 499)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 499)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16776961,null(),null());
HXLINE( 501)				line1->set_alpha(((Float)0.2));
HXLINE( 503)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 504)				this->texts->add(text).StaticCast<  ::flixel::text::FlxText >();
HXLINE( 506)				this->add(line1);
HXLINE( 507)				this->add(text);
            			}
            		}
HXLINE( 510)		{
HXLINE( 510)			 ::Dynamic filter = null();
HXDLIN( 510)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN( 510)			while(i->hasNext()){
HXLINE( 510)				 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE( 512)				Float pos = this->getYfromStrum(( (Float)(i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) ));
HXDLIN( 512)				Float pos1 = (pos * this->zoomFactor);
HXLINE( 513)				i1->icon->set_y((pos1 - ( (Float)(75) )));
HXLINE( 515)				 ::flixel::FlxSprite line =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,pos1,null());
HXDLIN( 515)				 ::flixel::FlxSprite line1 = line->makeGraphic(::Std_obj::_hx_int(( (Float)((this->GRID_SIZE * 8)) )),4,-16777216,null(),null());
HXLINE( 516)				line1->set_alpha(((Float)0.4));
HXLINE( 517)				this->lines->add(line1).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,regenerateLines,(void))

void ChartingState_obj::addGrid( ::Dynamic __o_divisions){
            		 ::Dynamic divisions = __o_divisions;
            		if (::hx::IsNull(__o_divisions)) divisions = 1;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_522_addGrid)
HXLINE( 524)		Float h = (( (Float)(this->GRID_SIZE) ) / ( (Float)(divisions) ));
HXLINE( 525)		if ((::Math_obj::floor(h) != h)) {
HXLINE( 526)			h = ( (Float)(this->GRID_SIZE) );
            		}
HXLINE( 528)		this->remove(this->gridBG,null());
HXLINE( 529)		int _hx_tmp = this->GRID_SIZE;
HXDLIN( 529)		int _hx_tmp1 = ::Std_obj::_hx_int(h);
HXDLIN( 529)		this->gridBG = ::flixel::addons::display::FlxGridOverlay_obj::create(_hx_tmp,_hx_tmp1,(this->GRID_SIZE * 8),(this->GRID_SIZE * 16),null(),null(),null());
HXLINE( 545)		int totalHeight = 0;
HXLINE( 549)		this->remove(this->gridBlackLine,null());
HXLINE( 550)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->gridBG->get_width() / ( (Float)(2) )),null(),null());
HXDLIN( 550)		this->gridBlackLine = _hx_tmp2->makeGraphic(2,::Std_obj::_hx_int(( (Float)(::Math_obj::floor(::ChartingState_obj::lengthInSteps)) )),-16777216,null(),null());
HXLINE( 551)		this->add(this->gridBlackLine);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addGrid,(void))

 ::Event ChartingState_obj::containsName(::String name,::Array< ::Dynamic> events){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_563_containsName)
HXLINE( 564)		{
HXLINE( 564)			int _g = 0;
HXDLIN( 564)			while((_g < events->length)){
HXLINE( 564)				 ::Event i = events->__get(_g).StaticCast<  ::Event >();
HXDLIN( 564)				_g = (_g + 1);
HXLINE( 566)				::String thisName = ( (::String)(::Reflect_obj::field(i,HX_("name",4b,72,ff,48))) );
HXLINE( 568)				if ((thisName == name)) {
HXLINE( 569)					return i;
            				}
            			}
            		}
HXLINE( 571)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,containsName,return )

void ChartingState_obj::addEventsUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_600_addEventsUI)
HXLINE( 601)			::String _gthis1 = _gthis->currentSelectedEventName;
HXDLIN( 601)			Float _gthis2 = _gthis->currentEventPosition;
HXDLIN( 601)			Float pog = ::HelperFunctions_obj::truncateFloat(::Std_obj::parseFloat(_gthis->savedValue),3);
HXDLIN( 601)			 ::Event pog1 =  ::Event_obj::__alloc( HX_CTX ,_gthis1,_gthis2,pog,_gthis->savedType);
HXLINE( 606)			 ::Event obj = _gthis->containsName(pog1->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 608)			if ((pog1->name == HX_("",00,00,00,00))) {
HXLINE( 609)				return;
            			}
HXLINE( 613)			if (::hx::IsNotNull( obj )) {
HXLINE( 614)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj);
            			}
HXLINE( 615)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog1);
HXLINE( 619)			::TimingStruct_obj::clearTimings();
HXLINE( 621)			int currentIndex = 0;
HXLINE( 622)			{
HXLINE( 622)				int _g = 0;
HXDLIN( 622)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 622)				while((_g < _g1->length)){
HXLINE( 622)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 622)					_g = (_g + 1);
HXLINE( 624)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 625)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 626)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 627)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 630)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 632)						Float beat = pos;
HXLINE( 634)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 636)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 638)						if ((currentIndex != 0)) {
HXLINE( 640)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 641)							data->endBeat = beat;
HXLINE( 642)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 643)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 644)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 645)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 648)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 652)			if ((pog1->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 654)				_gthis->recalculateAllSectionTimes();
HXLINE( 655)				_gthis->poggers();
            			}
HXLINE( 658)			_gthis->regenerateLines();
HXLINE( 660)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 662)			{
HXLINE( 662)				int _g2_current = 0;
HXDLIN( 662)				::Array< ::Dynamic> _g2_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 662)				while((_g2_current < _g2_array->length)){
HXLINE( 662)					 ::Event _g3_value = _g2_array->__get(_g2_current).StaticCast<  ::Event >();
HXDLIN( 662)					_g2_current = (_g2_current + 1);
HXDLIN( 662)					int _g3_key = (_g2_current - 1);
HXDLIN( 662)					int key = _g3_key;
HXDLIN( 662)					 ::Event value = _g3_value;
HXLINE( 664)					listofnames->push(value->name);
            				}
            			}
HXLINE( 667)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis3 = _gthis->listOfEvents;
HXDLIN( 667)			_gthis3->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 669)			_gthis->listOfEvents->set_selectedLabel(pog1->name);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_1, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_676_addEventsUI)
HXLINE( 677)			::String pog = (HX_("New Event ",c6,9a,0f,64) + ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3));
HXLINE( 678)			Float pog1 = ::HelperFunctions_obj::truncateFloat(_gthis->curDecimalBeat,3);
HXLINE( 677)			 ::Event pog2 =  ::Event_obj::__alloc( HX_CTX ,pog,pog1,( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1));
HXLINE( 682)			 ::Event obj = _gthis->containsName(pog2->name,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 684)			if (::hx::IsNotNull( obj )) {
HXLINE( 685)				return;
            			}
HXLINE( 689)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->push(pog2);
HXLINE( 691)			eventName->set_text(pog2->name);
HXLINE( 692)			eventType->set_selectedLabel(pog2->type);
HXLINE( 693)			eventValue->set_text((pog2->value + HX_("",00,00,00,00)));
HXLINE( 694)			eventPos->set_text((pog2->position + HX_("",00,00,00,00)));
HXLINE( 695)			_gthis->currentSelectedEventName = pog2->name;
HXLINE( 696)			_gthis->currentEventPosition = pog2->position;
HXLINE( 698)			_gthis->savedType = pog2->type;
HXLINE( 699)			_gthis->savedValue = (pog2->value + HX_("",00,00,00,00));
HXLINE( 701)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 703)			{
HXLINE( 703)				int _g_current = 0;
HXDLIN( 703)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 703)				while((_g_current < _g_array->length)){
HXLINE( 703)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 703)					_g_current = (_g_current + 1);
HXDLIN( 703)					int _g1_key = (_g_current - 1);
HXDLIN( 703)					int key = _g1_key;
HXDLIN( 703)					 ::Event value = _g1_value;
HXLINE( 705)					listofnames->push(value->name);
            				}
            			}
HXLINE( 708)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis1 = _gthis->listOfEvents;
HXDLIN( 708)			_gthis1->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 710)			_gthis->listOfEvents->set_selectedLabel(pog2->name);
HXLINE( 712)			::TimingStruct_obj::clearTimings();
HXLINE( 714)			int currentIndex = 0;
HXLINE( 715)			{
HXLINE( 715)				int _g = 0;
HXDLIN( 715)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 715)				while((_g < _g1->length)){
HXLINE( 715)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 715)					_g = (_g + 1);
HXLINE( 717)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 718)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 719)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 720)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 723)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 725)						Float beat = pos;
HXLINE( 727)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 729)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 731)						if ((currentIndex != 0)) {
HXLINE( 733)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 734)							data->endBeat = beat;
HXLINE( 735)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 736)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 737)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 738)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 741)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 746)			{
HXLINE( 746)				int _g2 = 0;
HXDLIN( 746)				::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN( 746)				while((_g2 < _g3->length)){
HXLINE( 746)					 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN( 746)					_g2 = (_g2 + 1);
HXLINE( 749)					_gthis->recalculateAllSectionTimes();
            				}
            			}
HXLINE( 750)			_gthis->poggers();
HXLINE( 752)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_2, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_755_addEventsUI)
HXLINE( 758)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 758)			::String obj = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 758)			 ::Event obj1 = _gthis1->containsName(obj,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 762)			if (::hx::IsNull( obj1 )) {
HXLINE( 763)				return;
            			}
HXLINE( 767)			( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->remove(obj1);
HXLINE( 769)			 ::Event firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
HXLINE( 771)			if (::hx::IsNull( firstEvent )) {
HXLINE( 773)				::Array< ::Dynamic> eventRemove = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 773)				eventRemove->push( ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1)));
HXLINE( 774)				firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            			}
HXLINE( 777)			eventName->set_text(firstEvent->name);
HXLINE( 778)			eventType->set_selectedLabel(firstEvent->type);
HXLINE( 779)			eventValue->set_text((firstEvent->value + HX_("",00,00,00,00)));
HXLINE( 780)			eventPos->set_text((firstEvent->position + HX_("",00,00,00,00)));
HXLINE( 781)			_gthis->currentSelectedEventName = firstEvent->name;
HXLINE( 782)			_gthis->currentEventPosition = firstEvent->position;
HXLINE( 784)			_gthis->savedType = firstEvent->type;
HXLINE( 785)			_gthis->savedValue = (firstEvent->value + HX_("",00,00,00,00));
HXLINE( 787)			::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 789)			{
HXLINE( 789)				int _g_current = 0;
HXDLIN( 789)				::Array< ::Dynamic> _g_array = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 789)				while((_g_current < _g_array->length)){
HXLINE( 789)					 ::Event _g1_value = _g_array->__get(_g_current).StaticCast<  ::Event >();
HXDLIN( 789)					_g_current = (_g_current + 1);
HXDLIN( 789)					int _g1_key = (_g_current - 1);
HXDLIN( 789)					int key = _g1_key;
HXDLIN( 789)					 ::Event value = _g1_value;
HXLINE( 791)					listofnames->push(value->name);
            				}
            			}
HXLINE( 794)			 ::flixel::addons::ui::FlxUIDropDownMenu _gthis2 = _gthis->listOfEvents;
HXDLIN( 794)			_gthis2->setData(::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true));
HXLINE( 796)			_gthis->listOfEvents->set_selectedLabel(firstEvent->name);
HXLINE( 798)			::TimingStruct_obj::clearTimings();
HXLINE( 800)			int currentIndex = 0;
HXLINE( 801)			{
HXLINE( 801)				int _g = 0;
HXDLIN( 801)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 801)				while((_g < _g1->length)){
HXLINE( 801)					 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 801)					_g = (_g + 1);
HXLINE( 803)					 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE( 804)					::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE( 805)					Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE( 806)					Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE( 809)					if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE( 811)						Float beat = pos;
HXLINE( 813)						Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE( 815)						::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE( 817)						if ((currentIndex != 0)) {
HXLINE( 819)							 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE( 820)							data->endBeat = beat;
HXLINE( 821)							data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE( 822)							Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE( 823)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE( 824)							::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            						}
HXLINE( 827)						currentIndex = (currentIndex + 1);
            					}
            				}
            			}
HXLINE( 831)			_gthis->recalculateAllSectionTimes();
HXLINE( 832)			_gthis->poggers();
HXLINE( 834)			_gthis->regenerateLines();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_837_addEventsUI)
HXLINE( 838)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 839)			if (::hx::IsNull( obj )) {
HXLINE( 840)				return;
            			}
HXLINE( 841)			_gthis->currentEventPosition = _gthis->curDecimalBeat;
HXLINE( 842)			obj->position = _gthis->currentEventPosition;
HXLINE( 843)			eventPos->set_text((_gthis->currentEventPosition + HX_("",00,00,00,00)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S5(::hx::LocalFunc,_hx_Closure_4, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUIInputText,eventName, ::flixel::addons::ui::FlxUIInputText,eventValue, ::flixel::addons::ui::FlxUIInputText,eventPos) HXARGC(1)
            		void _hx_run(::String name){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_892_addEventsUI)
HXLINE( 893)			 ::ChartingState _gthis1 = _gthis;
HXDLIN( 893)			::String event = _gthis->listOfEvents->get_selectedLabel();
HXDLIN( 893)			 ::Event event1 = _gthis1->containsName(event,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 895)			if (::hx::IsNull( event1 )) {
HXLINE( 896)				return;
            			}
HXLINE( 900)			eventName->set_text(event1->name);
HXLINE( 901)			eventValue->set_text((event1->value + HX_("",00,00,00,00)));
HXLINE( 902)			eventPos->set_text((event1->position + HX_("",00,00,00,00)));
HXLINE( 903)			eventType->set_selectedLabel(event1->type);
HXLINE( 904)			_gthis->currentSelectedEventName = event1->name;
HXLINE( 905)			_gthis->currentEventPosition = event1->position;
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_911_addEventsUI)
HXLINE( 911)			_gthis->savedValue = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::flixel::addons::ui::FlxUIDropDownMenu,eventType, ::ChartingState,_gthis) HXARGC(1)
            		void _hx_run(::String type){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_916_addEventsUI)
HXLINE( 916)			_gthis->savedType = eventType->get_selectedLabel();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis) HXARGC(2)
            		void _hx_run(::String string,::String string2){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_920_addEventsUI)
HXLINE( 921)			 ::Event obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 922)			if (::hx::IsNull( obj )) {
HXLINE( 924)				_gthis->currentSelectedEventName = string;
HXLINE( 925)				return;
            			}
HXLINE( 927)			obj = _gthis->containsName(string,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 928)			if (::hx::IsNotNull( obj )) {
HXLINE( 929)				return;
            			}
HXLINE( 930)			obj = _gthis->containsName(_gthis->currentSelectedEventName,( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) ));
HXLINE( 931)			obj->name = string;
HXLINE( 932)			_gthis->currentSelectedEventName = string;
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_579_addEventsUI)
HXLINE( 578)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 580)		if (::hx::IsNull( ::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic) )) {
HXLINE( 582)			::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),::Array_obj< ::Dynamic>::__new(1)->init(0, ::Event_obj::__alloc( HX_CTX ,HX_("Init BPM",cf,ed,e8,08),( (Float)(0) ),( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) ),HX_("BPM Change",d1,e8,85,d1))),::hx::paccDynamic);
            		}
HXLINE( 585)		::String firstEvent = HX_("",00,00,00,00);
HXLINE( 587)		if ((::Lambda_obj::count(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic),null()) != 0)) {
HXLINE( 589)			firstEvent = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->name;
            		}
HXLINE( 592)		 ::flixel::text::FlxText listLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,5,null(),HX_("List of Events",00,a9,f1,9c),null(),null());
HXLINE( 593)		 ::flixel::text::FlxText nameLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,5,null(),HX_("Event Name",51,cc,89,80),null(),null());
HXLINE( 594)		 ::flixel::addons::ui::FlxUIInputText eventName =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,20,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 595)		 ::flixel::text::FlxText typeLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,45,null(),HX_("Type of Event",37,e6,4b,c6),null(),null());
HXLINE( 596)		 ::flixel::addons::ui::FlxUIDropDownMenu eventType =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,60,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_32,2),true),null(),null(),null(),null(),null());
HXLINE( 597)		 ::flixel::text::FlxText valueLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,45,null(),HX_("Event Value",ab,ea,3c,93),null(),null());
HXLINE( 598)		 ::flixel::addons::ui::FlxUIInputText eventValue =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,60,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 599)		 ::flixel::ui::FlxButton eventSave =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,155,HX_("Save Event",f7,de,33,df), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 673)		 ::flixel::text::FlxText posLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,150,85,null(),HX_("Event Position",af,75,21,14),null(),null());
HXLINE( 674)		 ::flixel::addons::ui::FlxUIInputText eventPos =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,150,100,80,HX_("",00,00,00,00),null(),null(),null(),null());
HXLINE( 675)		 ::flixel::ui::FlxButton eventAdd =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,95,155,HX_("Add Event",9b,64,c0,f9), ::Dynamic(new _hx_Closure_1(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 754)		 ::flixel::ui::FlxButton eventRemove =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,180,155,HX_("Remove Event",3e,37,09,d7), ::Dynamic(new _hx_Closure_2(eventType,_gthis,eventName,eventValue,eventPos)));
HXLINE( 836)		 ::flixel::ui::FlxButton updatePos =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,150,120,HX_("Update Pos",fd,ab,f0,d9), ::Dynamic(new _hx_Closure_3(_gthis,eventPos)));
HXLINE( 846)		::Array< ::String > listofnames = ::Array_obj< ::String >::__new(0);
HXLINE( 848)		 ::Event firstEventObject = null();
HXLINE( 850)		{
HXLINE( 850)			int _g = 0;
HXDLIN( 850)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN( 850)			while((_g < _g1->length)){
HXLINE( 850)				 ::Event event = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN( 850)				_g = (_g + 1);
HXLINE( 852)				::String name = ( (::String)(::Reflect_obj::field(event,HX_("name",4b,72,ff,48))) );
HXLINE( 853)				::String type = ( (::String)(::Reflect_obj::field(event,HX_("type",ba,f2,08,4d))) );
HXLINE( 854)				Float pos = ( (Float)(::Reflect_obj::field(event,HX_("position",a9,a0,fa,ca))) );
HXLINE( 855)				Float value = ( (Float)(::Reflect_obj::field(event,HX_("value",71,7f,b8,31))) );
HXLINE( 859)				 ::Event eventt =  ::Event_obj::__alloc( HX_CTX ,name,pos,value,type);
HXLINE( 861)				this->chartEvents->push(eventt);
HXLINE( 862)				listofnames->push(name);
            			}
            		}
HXLINE( 865)		::ChartingState_obj::_song->__SetField(HX_("eventObjects",da,5f,a4,12),this->chartEvents,::hx::paccDynamic);
HXLINE( 867)		if ((listofnames->length == 0)) {
HXLINE( 868)			listofnames->push(HX_("",00,00,00,00));
            		}
HXLINE( 870)		if ((( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) )->length != 0)) {
HXLINE( 871)			firstEventObject = Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >();
            		}
HXLINE( 874)		if ((firstEvent != HX_("",00,00,00,00))) {
HXLINE( 877)			eventName->set_text(firstEventObject->name);
HXLINE( 879)			eventType->set_selectedLabel(firstEventObject->type);
HXLINE( 881)			eventValue->set_text((firstEventObject->value + HX_("",00,00,00,00)));
HXLINE( 883)			this->currentSelectedEventName = firstEventObject->name;
HXLINE( 885)			this->currentEventPosition = firstEventObject->position;
HXLINE( 887)			eventPos->set_text((this->currentEventPosition + HX_("",00,00,00,00)));
            		}
HXLINE( 891)		this->listOfEvents =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,20,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(listofnames,true), ::Dynamic(new _hx_Closure_4(eventType,_gthis,eventName,eventValue,eventPos)),null(),null(),null(),null());
HXLINE( 908)		eventValue->callback =  ::Dynamic(new _hx_Closure_5(_gthis));
HXLINE( 914)		eventType->callback =  ::Dynamic(new _hx_Closure_6(eventType,_gthis));
HXLINE( 919)		eventName->callback =  ::Dynamic(new _hx_Closure_7(_gthis));
HXLINE( 936)		this->Typeables->push(eventPos);
HXLINE( 937)		this->Typeables->push(eventValue);
HXLINE( 938)		this->Typeables->push(eventName);
HXLINE( 940)		 ::flixel::addons::ui::FlxUI tab_events =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 941)		tab_events->name = HX_("Events",39,c3,fe,ca);
HXLINE( 942)		tab_events->add(posLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 943)		tab_events->add(valueLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 944)		tab_events->add(nameLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 945)		tab_events->add(listLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 946)		tab_events->add(typeLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 947)		tab_events->add(eventName).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 948)		tab_events->add(eventValue).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 949)		tab_events->add(eventSave).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 950)		tab_events->add(eventAdd).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 951)		tab_events->add(eventRemove).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 952)		tab_events->add(eventPos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 953)		tab_events->add(updatePos).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 954)		tab_events->add(eventType).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 955)		tab_events->add(this->listOfEvents).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 956)		this->UI_options->addGroup(tab_events);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addEventsUI,(void))

void ChartingState_obj::addOptionsUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUICheckBox,hitsounds) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_965_addOptionsUI)
HXLINE( 965)			_gthis->playClaps = hitsounds->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_973_addOptionsUI)
HXLINE( 973)			_gthis->defaultSnap = _gthis->check_snap->checked;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_960_addOptionsUI)
HXLINE( 959)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 961)		 ::flixel::addons::ui::FlxUICheckBox hitsounds =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,60,null(),null(),HX_("Play hitsounds",4b,26,03,51),100,null(),null());
HXLINE( 962)		hitsounds->set_checked(false);
HXLINE( 963)		hitsounds->callback =  ::Dynamic(new _hx_Closure_0(_gthis,hitsounds));
HXLINE( 968)		this->check_snap =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,80,25,null(),null(),HX_("Snap to grid",d5,83,5b,e7),100,null(),null());
HXLINE( 969)		this->check_snap->set_checked(this->defaultSnap);
HXLINE( 971)		this->check_snap->callback =  ::Dynamic(new _hx_Closure_1(_gthis));
HXLINE( 977)		 ::flixel::addons::ui::FlxUI tab_options =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_options,null(),null(),null(),null());
HXLINE( 978)		tab_options->name = HX_("Options",3e,5b,4f,ad);
HXLINE( 979)		tab_options->add(hitsounds).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 980)		this->UI_options->addGroup(tab_options);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addOptionsUI,(void))

void ChartingState_obj::addSongUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::addons::ui::FlxUICheckBox,check_voices) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_993_addSongUI)
HXLINE( 993)			::ChartingState_obj::_song->__SetField(HX_("needsVoices",be,05,e9,0d),check_voices->checked,::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_999_addSongUI)
HXLINE( 999)			_gthis->saveLevel();
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1004_addSongUI)
HXLINE(1004)			_gthis->loadSong(( (::String)(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1009_addSongUI)
HXLINE(1009)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1009)			_gthis1->loadJson(( (::String)(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ).toLowerCase());
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1013_addSongUI)
HXLINE(1014)			{
HXLINE(1014)				int _g = 0;
HXDLIN(1014)				int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(1014)				while((_g < _g1)){
HXLINE(1014)					_g = (_g + 1);
HXDLIN(1014)					int ii = (_g - 1);
HXLINE(1016)					{
HXLINE(1016)						int _g1 = 0;
HXDLIN(1016)						int _g2 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1016)						while((_g1 < _g2)){
HXLINE(1016)							_g1 = (_g1 + 1);
HXDLIN(1016)							int i = (_g1 - 1);
HXLINE(1018)							 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(ii)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            						}
            					}
            				}
            			}
HXLINE(1021)			_gthis->resetSection(true);
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_5, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialstep, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDial, ::flixel::addons::ui::FlxUINumericStepper,stepperShiftNoteDialms) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1068_addSongUI)
HXLINE(1068)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1068)			int shiftNoteButton = ::Std_obj::_hx_int(stepperShiftNoteDial->value);
HXDLIN(1068)			int shiftNoteButton1 = ::Std_obj::_hx_int(stepperShiftNoteDialstep->value);
HXDLIN(1068)			_gthis1->shiftNotes(shiftNoteButton,shiftNoteButton1,::Std_obj::_hx_int(stepperShiftNoteDialms->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_6, ::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1077_addSongUI)
HXLINE(1078)			::Array< ::String > characters1 = characters;
HXDLIN(1078)			 ::Dynamic player1DropDown = ::Std_obj::parseInt(character);
HXDLIN(1078)			::ChartingState_obj::_song->__SetField(HX_("player1",b0,09,15,8a),characters1->__get(( (int)(player1DropDown) )),::hx::paccDynamic);
HXLINE(1079)			_gthis->remove(_gthis->char1,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1080)			_gthis->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(929) ),( (Float)(30) ),( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),true);
HXLINE(1081)			 ::Character _gthis1 = _gthis->char1;
HXDLIN(1081)			_gthis1->setGraphicSize(::Std_obj::_hx_int((_gthis->char1->get_width() * ((Float)0.6))),null());
HXLINE(1082)			_gthis->char1->scrollFactor->set(0,0);
HXLINE(1083)			_gthis->add(_gthis->char1).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_7, ::ChartingState,_gthis,::Array< ::String >,characters) HXARGC(1)
            		void _hx_run(::String character){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1090_addSongUI)
HXLINE(1091)			::Array< ::String > characters1 = characters;
HXDLIN(1091)			 ::Dynamic player2DropDown = ::Std_obj::parseInt(character);
HXDLIN(1091)			::ChartingState_obj::_song->__SetField(HX_("player2",b1,09,15,8a),characters1->__get(( (int)(player2DropDown) )),::hx::paccDynamic);
HXLINE(1092)			_gthis->remove(_gthis->char2,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1093)			_gthis->char2 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(30) ),( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),false);
HXLINE(1094)			 ::Character _gthis1 = _gthis->char2;
HXDLIN(1094)			_gthis1->setGraphicSize(::Std_obj::_hx_int((_gthis->char2->get_width() * ((Float)0.6))),null());
HXLINE(1095)			_gthis->char2->scrollFactor->set(0,0);
HXLINE(1096)			_gthis->add(_gthis->char2).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_8,::Array< ::String >,gfVersions) HXARGC(1)
            		void _hx_run(::String gfVersion){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1105_addSongUI)
HXLINE(1105)			::Array< ::String > gfVersions1 = gfVersions;
HXDLIN(1105)			 ::Dynamic gfVersionDropDown = ::Std_obj::parseInt(gfVersion);
HXDLIN(1105)			::ChartingState_obj::_song->__SetField(HX_("gfVersion",b9,c6,7d,f3),gfVersions1->__get(( (int)(gfVersionDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_9,::Array< ::String >,stages) HXARGC(1)
            		void _hx_run(::String stage){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1113_addSongUI)
HXLINE(1113)			::Array< ::String > stages1 = stages;
HXDLIN(1113)			 ::Dynamic stageDropDown = ::Std_obj::parseInt(stage);
HXDLIN(1113)			::ChartingState_obj::_song->__SetField(HX_("stage",be,6a,0b,84),stages1->__get(( (int)(stageDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_10,::Array< ::String >,noteStyles) HXARGC(1)
            		void _hx_run(::String noteStyle){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1121_addSongUI)
HXLINE(1121)			::Array< ::String > noteStyles1 = noteStyles;
HXDLIN(1121)			 ::Dynamic noteStyleDropDown = ::Std_obj::parseInt(noteStyle);
HXDLIN(1121)			::ChartingState_obj::_song->__SetField(HX_("noteStyle",df,ef,aa,c1),noteStyles1->__get(( (int)(noteStyleDropDown) )),::hx::paccDynamic);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_984_addSongUI)
HXLINE( 983)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 985)		 ::flixel::addons::ui::FlxUIInputText UI_songTitle =  ::flixel::addons::ui::FlxUIInputText_obj::__alloc( HX_CTX ,10,10,70,( (::String)(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),8,null(),null(),null());
HXLINE( 986)		this->typingShit = UI_songTitle;
HXLINE( 988)		 ::flixel::addons::ui::FlxUICheckBox check_voices =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,25,null(),null(),HX_("Has voice track",b7,2b,b0,eb),100,null(),null());
HXLINE( 989)		check_voices->set_checked(( (bool)(::ChartingState_obj::_song->__Field(HX_("needsVoices",be,05,e9,0d),::hx::paccDynamic)) ));
HXLINE( 991)		check_voices->callback =  ::Dynamic(new _hx_Closure_0(check_voices));
HXLINE( 997)		 ::flixel::ui::FlxButton saveButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,110,8,HX_("Save",5d,b7,26,37), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1002)		Float saveButton1 = saveButton->x;
HXDLIN(1002)		Float reloadSong = ((saveButton1 + saveButton->get_width()) + 10);
HXDLIN(1002)		 ::flixel::ui::FlxButton reloadSong1 =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong,saveButton->y,HX_("Reload Audio",cf,9c,c1,ed), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1007)		 ::flixel::ui::FlxButton reloadSongJson =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSong1->x,(saveButton->y + 30),HX_("Reload JSON",2f,1c,a5,4a), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1012)		 ::flixel::ui::FlxButton restart =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,140,HX_("Reset Chart",8d,3f,ff,f3), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1024)		 ::flixel::ui::FlxButton loadAutosaveBtn =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,reloadSongJson->x,(reloadSongJson->y + 30),HX_("load autosave",66,5f,5a,83),this->loadAutosave_dyn());
HXLINE(1025)		 ::flixel::addons::ui::FlxUINumericStepper stepperBPM =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,65,((Float)0.1),1,((Float)1.0),((Float)5000.0),1,null(),null(),null(),null(),null());
HXLINE(1026)		stepperBPM->set_value(::Conductor_obj::bpm);
HXLINE(1027)		stepperBPM->name = HX_("song_bpm",35,36,15,42);
HXLINE(1029)		 ::flixel::text::FlxText stepperBPMLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,65,null(),HX_("BPM",bf,5a,32,00),null(),null());
HXLINE(1031)		 ::flixel::addons::ui::FlxUINumericStepper stepperSpeed =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,80,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1032)		stepperSpeed->set_value(( (Float)(::ChartingState_obj::_song->__Field(HX_("speed",87,97,69,81),::hx::paccDynamic)) ));
HXLINE(1033)		stepperSpeed->name = HX_("song_speed",5d,10,41,a4);
HXLINE(1035)		 ::flixel::text::FlxText stepperSpeedLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,80,null(),HX_("Scroll Speed",34,bf,42,cb),null(),null());
HXLINE(1037)		 ::flixel::addons::ui::FlxUINumericStepper stepperVocalVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,95,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1039)		if (!(::PlayState_obj::isSM)) {
HXLINE(1040)			stepperVocalVol->set_value(this->vocals->_volume);
            		}
            		else {
HXLINE(1042)			stepperVocalVol->set_value(( (Float)(1) ));
            		}
HXLINE(1046)		stepperVocalVol->name = HX_("song_vocalvol",a8,3c,96,f8);
HXLINE(1048)		 ::flixel::text::FlxText stepperVocalVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,95,null(),HX_("Vocal Volume",65,14,e3,28),null(),null());
HXLINE(1050)		 ::flixel::addons::ui::FlxUINumericStepper stepperSongVol =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,110,((Float)0.1),1,((Float)0.1),10,1,null(),null(),null(),null(),null());
HXLINE(1051)		stepperSongVol->set_value(::flixel::FlxG_obj::sound->music->_volume);
HXLINE(1052)		stepperSongVol->name = HX_("song_instvol",63,a1,f2,af);
HXLINE(1054)		 ::flixel::text::FlxText stepperSongVolLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,110,null(),HX_("Instrumental Volume",68,1c,6d,b8),null(),null());
HXLINE(1056)		 ::flixel::text::FlxText shiftNoteDialLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,245,null(),HX_("Shift All Notes by # Sections",b8,17,67,0a),null(),null());
HXLINE(1057)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDial =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,260,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1058)		stepperShiftNoteDial->name = HX_("song_shiftnote",4a,09,de,10);
HXLINE(1059)		 ::flixel::text::FlxText shiftNoteDialLabel2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,275,null(),HX_("Shift All Notes by # Steps",9d,04,94,41),null(),null());
HXLINE(1060)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialstep =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,290,1,0,-1000,1000,0,null(),null(),null(),null(),null());
HXLINE(1061)		stepperShiftNoteDialstep->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1062)		 ::flixel::text::FlxText shiftNoteDialLabel3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,305,null(),HX_("Shift All Notes by # ms",90,5c,27,48),null(),null());
HXLINE(1063)		 ::flixel::addons::ui::FlxUINumericStepper stepperShiftNoteDialms =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,320,1,0,-1000,1000,2,null(),null(),null(),null(),null());
HXLINE(1064)		stepperShiftNoteDialms->name = HX_("song_shiftnotems",30,cf,6a,8b);
HXLINE(1066)		 ::flixel::ui::FlxButton shiftNoteButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,335,HX_("Shift",62,5c,50,0f), ::Dynamic(new _hx_Closure_5(_gthis,stepperShiftNoteDialstep,stepperShiftNoteDial,stepperShiftNoteDialms)));
HXLINE(1071)		::String library = null();
HXDLIN(1071)		::Array< ::String > characters = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/characterList",c2,06,08,81) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(1072)		::String library1 = null();
HXDLIN(1072)		::Array< ::String > gfVersions = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/gfVersionList",d2,b9,ee,44) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library1));
HXLINE(1073)		::String library2 = null();
HXDLIN(1073)		::Array< ::String > stages = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/stageList",d7,5a,0b,5e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library2));
HXLINE(1074)		::String library3 = null();
HXDLIN(1074)		::Array< ::String > noteStyles = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/noteStyleList",f8,6d,9e,7c) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library3));
HXLINE(1076)		 ::flixel::addons::ui::FlxUIDropDownMenu player1DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_6(_gthis,characters)),null(),null(),null(),null());
HXLINE(1085)		player1DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1087)		 ::flixel::text::FlxText player1Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,80,64,HX_("Player 1",d2,1d,05,22),null(),null());
HXLINE(1089)		 ::flixel::addons::ui::FlxUIDropDownMenu player2DropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,100,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(characters,true), ::Dynamic(new _hx_Closure_7(_gthis,characters)),null(),null(),null(),null());
HXLINE(1099)		player2DropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ));
HXLINE(1101)		 ::flixel::text::FlxText player2Label =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,80,64,HX_("Player 2",d3,1d,05,22),null(),null());
HXLINE(1103)		 ::flixel::addons::ui::FlxUIDropDownMenu gfVersionDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(gfVersions,true), ::Dynamic(new _hx_Closure_8(gfVersions)),null(),null(),null(),null());
HXLINE(1107)		gfVersionDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("gfVersion",b9,c6,7d,f3),::hx::paccDynamic)) ));
HXLINE(1109)		 ::flixel::text::FlxText gfVersionLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,180,64,HX_("Girlfriend",da,95,f9,8e),null(),null());
HXLINE(1111)		 ::flixel::addons::ui::FlxUIDropDownMenu stageDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,140,200,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(stages,true), ::Dynamic(new _hx_Closure_9(stages)),null(),null(),null(),null());
HXLINE(1115)		stageDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("stage",be,6a,0b,84),::hx::paccDynamic)) ));
HXLINE(1117)		 ::flixel::text::FlxText stageLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,140,180,64,HX_("Stage",9e,da,38,17),null(),null());
HXLINE(1119)		 ::flixel::addons::ui::FlxUIDropDownMenu noteStyleDropDown =  ::flixel::addons::ui::FlxUIDropDownMenu_obj::__alloc( HX_CTX ,10,300,::flixel::addons::ui::FlxUIDropDownMenu_obj::makeStrIdLabelArray(noteStyles,true), ::Dynamic(new _hx_Closure_10(noteStyles)),null(),null(),null(),null());
HXLINE(1123)		noteStyleDropDown->set_selectedLabel(( (::String)(::ChartingState_obj::_song->__Field(HX_("noteStyle",df,ef,aa,c1),::hx::paccDynamic)) ));
HXLINE(1125)		 ::flixel::text::FlxText noteStyleLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,10,280,64,HX_("Note Skin",6b,8d,33,f0),null(),null());
HXLINE(1127)		 ::flixel::addons::ui::FlxUI tab_group_song =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1128)		tab_group_song->name = HX_("Song",f5,4f,31,37);
HXLINE(1129)		tab_group_song->add(UI_songTitle).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1130)		tab_group_song->add(restart).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1131)		tab_group_song->add(check_voices).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1133)		tab_group_song->add(saveButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1134)		tab_group_song->add(reloadSong1).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1135)		tab_group_song->add(reloadSongJson).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1136)		tab_group_song->add(loadAutosaveBtn).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1137)		tab_group_song->add(stepperBPM).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1138)		tab_group_song->add(stepperBPMLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1139)		tab_group_song->add(stepperSpeed).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1140)		tab_group_song->add(stepperSpeedLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1141)		tab_group_song->add(stepperVocalVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1142)		tab_group_song->add(stepperVocalVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1143)		tab_group_song->add(stepperSongVol).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1144)		tab_group_song->add(stepperSongVolLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1145)		tab_group_song->add(shiftNoteDialLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1146)		tab_group_song->add(stepperShiftNoteDial).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1147)		tab_group_song->add(shiftNoteDialLabel2).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1148)		tab_group_song->add(stepperShiftNoteDialstep).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1149)		tab_group_song->add(shiftNoteDialLabel3).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1150)		tab_group_song->add(stepperShiftNoteDialms).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1151)		tab_group_song->add(shiftNoteButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1154)		 ::flixel::addons::ui::FlxUI tab_group_assets =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1155)		tab_group_assets->name = HX_("Assets",a3,bc,97,80);
HXLINE(1156)		tab_group_assets->add(noteStyleDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1157)		tab_group_assets->add(noteStyleLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1158)		tab_group_assets->add(gfVersionDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1159)		tab_group_assets->add(gfVersionLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1160)		tab_group_assets->add(stageDropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1161)		tab_group_assets->add(stageLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1162)		tab_group_assets->add(player1DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1163)		tab_group_assets->add(player2DropDown).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1164)		tab_group_assets->add(player1Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1165)		tab_group_assets->add(player2Label).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1167)		this->UI_box->addGroup(tab_group_song);
HXLINE(1168)		this->UI_box->addGroup(tab_group_assets);
HXLINE(1170)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,280,0,1,1);
HXLINE(1171)		this->add(this->camFollow);
HXLINE(1173)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSongUI,(void))

void ChartingState_obj::addSectionUI(){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis, ::flixel::addons::ui::FlxUINumericStepper,stepperCopy) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1193_addSectionUI)
HXLINE(1193)			 ::ChartingState _gthis1 = _gthis;
HXDLIN(1193)			_gthis1->copySection(::Std_obj::_hx_int(stepperCopy->value));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1199_addSectionUI)
HXLINE(1200)			 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(1202)			if (::hx::IsNotNull( secit )) {
HXLINE(1204)				 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(1206)				if (::hx::IsNotNull( secit )) {
HXLINE(1208)					_gthis->swapSection(secit);
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1213_addSectionUI)
HXLINE(1214)			 ::Dynamic sect = _gthis->lastUpdatedSection;
HXLINE(1218)			if (::hx::IsNull( sect )) {
HXLINE(1219)				return;
            			}
HXLINE(1221)			sect->__SetField(HX_("mustHitSection",3b,5f,87,62),_gthis->check_mustHitSection->checked,::hx::paccDynamic);
HXLINE(1222)			_gthis->updateHeads();
HXLINE(1224)			{
HXLINE(1224)				 ::Dynamic filter = null();
HXDLIN(1224)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->sectionRenderes->members,filter);
HXDLIN(1224)				while(i->hasNext()){
HXLINE(1224)					 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1226)					if (::hx::IsEq( i1->section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),sect->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1228)						Float cachedY = i1->icon->y;
HXLINE(1229)						_gthis->remove(i1->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(1230)						 ::flixel::FlxSprite sectionicon;
HXDLIN(1230)						if (_gthis->check_mustHitSection->checked) {
HXLINE(1230)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
            						else {
HXLINE(1230)							sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            						}
HXLINE(1231)						sectionicon->set_x(( (Float)(-95) ));
HXLINE(1232)						sectionicon->set_y(cachedY);
HXLINE(1233)						sectionicon->setGraphicSize(0,45);
HXLINE(1235)						i1->icon = sectionicon;
HXLINE(1236)						i1->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(1238)						_gthis->add(sectionicon).StaticCast<  ::flixel::FlxBasic >();
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1252_addSectionUI)
HXLINE(1253)			 ::Dynamic section = _gthis->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(1255)			if (::hx::IsNull( section )) {
HXLINE(1256)				return;
            			}
HXLINE(1258)			_gthis->check_mustHitSection->set_checked(( (bool)(section->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(1259)			_gthis->check_CPUAltAnim->set_checked(( (bool)(section->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(1260)			_gthis->check_playerAltAnim->set_checked(( (bool)(section->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_4, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1264_addSectionUI)
HXLINE(1265)			::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(1266)			{
HXLINE(1266)				 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1266)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1267)			if (!(::PlayState_obj::isSM)) {
HXLINE(1268)				 ::flixel::_hx_system::FlxSound _this = _gthis->vocals;
HXDLIN(1268)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(1269)			::PlayState_obj::startTime = ( (Float)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection)->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic)) );
HXLINE(1270)			while((_gthis->curRenderedNotes->members->get_length() > 0)){
HXLINE(1272)				_gthis->curRenderedNotes->remove(Dynamic( _gthis->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            			}
HXLINE(1275)			while((_gthis->curRenderedSustains->members->get_length() > 0)){
HXLINE(1277)				_gthis->curRenderedSustains->remove(Dynamic( _gthis->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            			}
HXLINE(1280)			while((_gthis->sectionRenderes->members->get_length() > 0)){
HXLINE(1282)				_gthis->sectionRenderes->remove(Dynamic( _gthis->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            			}
HXLINE(1284)			::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1286)			{
HXLINE(1286)				int _g = 0;
HXDLIN(1286)				::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1286)				while((_g < _g1->length)){
HXLINE(1286)					 ::Dynamic i = _g1->__get(_g);
HXDLIN(1286)					_g = (_g + 1);
HXLINE(1288)					if (::hx::IsGreater( i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::flixel::FlxG_obj::sound->music->_length )) {
HXLINE(1289)						toRemove->push(i);
            					}
            				}
            			}
HXLINE(1292)			{
HXLINE(1292)				int _g2 = 0;
HXDLIN(1292)				while((_g2 < toRemove->length)){
HXLINE(1292)					 ::Dynamic i = toRemove->__get(_g2);
HXDLIN(1292)					_g2 = (_g2 + 1);
HXLINE(1293)					( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->remove(i);
            				}
            			}
HXLINE(1295)			toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1296)			{
HXLINE(1296)				 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(1296)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(1296)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1184_addSectionUI)
HXLINE(1183)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1185)		 ::flixel::addons::ui::FlxUI tab_group_section =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1186)		tab_group_section->name = HX_("Section",c5,2d,29,2b);
HXLINE(1188)		 ::flixel::addons::ui::FlxUINumericStepper stepperCopy =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,110,132,1,1,-999,999,0,null(),null(),null(),null(),null());
HXLINE(1189)		 ::flixel::text::FlxText stepperCopyLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,174,132,null(),HX_("sections back",99,e8,ca,16),null(),null());
HXLINE(1191)		 ::flixel::ui::FlxButton copyButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,130,HX_("Copy last section",46,61,ca,99), ::Dynamic(new _hx_Closure_0(_gthis,stepperCopy)));
HXLINE(1196)		 ::flixel::ui::FlxButton clearSectionButton =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,150,HX_("Clear Section",12,08,13,f3),this->clearSection_dyn());
HXLINE(1198)		 ::flixel::ui::FlxButton swapSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,170,HX_("Swap Section",58,33,c1,af), ::Dynamic(new _hx_Closure_1(_gthis)));
HXLINE(1212)		this->check_mustHitSection =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,30,null(),null(),HX_("Camera Points to Player?",9b,4c,4b,86),100,null(), ::Dynamic(new _hx_Closure_2(_gthis)));
HXLINE(1242)		this->check_mustHitSection->set_checked(true);
HXLINE(1245)		this->check_CPUAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,340,null(),null(),HX_("CPU Alternate Animation",46,fd,80,2c),100,null(),null());
HXLINE(1246)		this->check_CPUAltAnim->name = HX_("check_CPUAltAnim",09,09,2a,93);
HXLINE(1248)		this->check_playerAltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,180,340,null(),null(),HX_("Player Alternate Animation",3f,b2,0b,ac),100,null(),null());
HXLINE(1249)		this->check_playerAltAnim->name = HX_("check_playerAltAnim",82,25,63,ff);
HXLINE(1251)		 ::flixel::ui::FlxButton refresh =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,60,HX_("Refresh Section",60,26,aa,d5), ::Dynamic(new _hx_Closure_3(_gthis)));
HXLINE(1263)		 ::flixel::ui::FlxButton startSection =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,85,HX_("Play Here",9c,91,40,cc), ::Dynamic(new _hx_Closure_4(_gthis)));
HXLINE(1299)		tab_group_section->add(refresh).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1300)		tab_group_section->add(startSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1303)		tab_group_section->add(this->check_mustHitSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1304)		tab_group_section->add(this->check_CPUAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1305)		tab_group_section->add(this->check_playerAltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1307)		tab_group_section->add(clearSectionButton).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1308)		tab_group_section->add(swapSection).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1310)		this->UI_box->addGroup(tab_group_section);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addSectionUI,(void))

void ChartingState_obj::goToSection(int section){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1318_goToSection)
HXLINE(1319)		int beat = (section * 4);
HXLINE(1320)		 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(( (Float)(beat) ));
HXLINE(1322)		if (::hx::IsNull( data )) {
HXLINE(1323)			return;
            		}
HXLINE(1325)		::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((( (Float)(beat) ) - data->startBeat) / (data->bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
HXLINE(1326)		if (!(::PlayState_obj::isSM)) {
HXLINE(1327)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(1328)		this->curSection = section;
HXLINE(1331)		if ((::flixel::FlxG_obj::sound->music->_time < 0)) {
HXLINE(1332)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		else {
HXLINE(1333)			if ((::flixel::FlxG_obj::sound->music->_time > ::flixel::FlxG_obj::sound->music->_length)) {
HXLINE(1334)				::flixel::FlxG_obj::sound->music->set_time(::flixel::FlxG_obj::sound->music->_length);
            			}
            		}
HXLINE(1336)		this->claps->removeRange(0,this->claps->length);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,goToSection,(void))

void ChartingState_obj::addNoteUI(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1356_addNoteUI)
HXLINE(1356)			if (::hx::IsNotNull( _gthis->curSelectedNote )) {
HXLINE(1358)				 ::Dynamic filter = null();
HXDLIN(1358)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,_gthis->selectedBoxes->members,filter);
HXDLIN(1358)				while(i->hasNext()){
HXLINE(1358)					 ::ChartingBox i1 = i->next().StaticCast<  ::ChartingBox >();
HXLINE(1360)					i1->connectedNoteData->set(3,_gthis->check_naltAnim->checked);
HXLINE(1362)					{
HXLINE(1362)						int _g = 0;
HXDLIN(1362)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1362)						while((_g < _g1->length)){
HXLINE(1362)							 ::Dynamic ii = _g1->__get(_g);
HXDLIN(1362)							_g = (_g + 1);
HXLINE(1364)							{
HXLINE(1364)								int _g2 = 0;
HXDLIN(1364)								::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1364)								while((_g2 < _g3->length)){
HXLINE(1364)									::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1364)									_g2 = (_g2 + 1);
HXLINE(1365)									bool _hx_tmp;
HXDLIN(1365)									if (::hx::IsEq( n->__get(0),i1->connectedNoteData->__get(0) )) {
HXLINE(1365)										_hx_tmp = ::hx::IsEq( n->__get(1),i1->connectedNoteData->__get(1) );
            									}
            									else {
HXLINE(1365)										_hx_tmp = false;
            									}
HXDLIN(1365)									if (_hx_tmp) {
HXLINE(1366)										n->set(3,i1->connectedNoteData->__get(3));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1342_addNoteUI)
HXLINE(1341)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1343)		this->tab_group_note =  ::flixel::addons::ui::FlxUI_obj::__alloc( HX_CTX ,null(),this->UI_box,null(),null(),null(),null());
HXLINE(1344)		this->tab_group_note->name = HX_("Note",12,44,e3,33);
HXLINE(1346)		this->writingNotesText =  ::flixel::addons::ui::FlxUIText_obj::__alloc( HX_CTX ,20,100,0,HX_("",00,00,00,00),null(),null());
HXLINE(1347)		this->writingNotesText->setFormat(HX_("Arial",23,09,b6,b8),20,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(1349)		this->stepperSusLength =  ::flixel::addons::ui::FlxUINumericStepper_obj::__alloc( HX_CTX ,10,10,(::Conductor_obj::stepCrochet / ( (Float)(2) )),0,0,((::Conductor_obj::stepCrochet * ( (Float)(16) )) * ( (Float)(4) )),null(),null(),null(),null(),null(),null());
HXLINE(1350)		this->stepperSusLength->set_value(( (Float)(0) ));
HXLINE(1351)		this->stepperSusLength->name = HX_("note_susLength",8a,6b,51,4b);
HXLINE(1353)		this->check_naltAnim =  ::flixel::addons::ui::FlxUICheckBox_obj::__alloc( HX_CTX ,10,150,null(),null(),HX_("Toggle Alternative Animation",65,67,17,d5),100,null(),null());
HXLINE(1354)		this->check_naltAnim->callback =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(1372)		 ::flixel::text::FlxText stepperSusLengthLabel =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,74,10,null(),HX_("Note Sustain Length",51,bb,65,f7),null(),null());
HXLINE(1374)		 ::flixel::ui::FlxButton applyLength =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,10,100,HX_("Apply Data",5c,22,e4,a8),null());
HXLINE(1376)		this->tab_group_note->add(this->stepperSusLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1377)		this->tab_group_note->add(stepperSusLengthLabel).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1378)		this->tab_group_note->add(applyLength).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1379)		this->tab_group_note->add(this->check_naltAnim).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1381)		this->UI_box->addGroup(this->tab_group_note);
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,addNoteUI,(void))

void ChartingState_obj::pasteNotesFromArray(::Array< ::Dynamic> array,::hx::Null< bool >  __o_fromStrum){
            		bool fromStrum = __o_fromStrum.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1397_pasteNotesFromArray)
HXDLIN(1397)		int _g = 0;
HXDLIN(1397)		while((_g < array->length)){
HXDLIN(1397)			::cpp::VirtualArray i = ::cpp::VirtualArray( array->__get(_g));
HXDLIN(1397)			_g = (_g + 1);
HXLINE(1399)			Float strum = ( (Float)(i->__get(0)) );
HXLINE(1400)			if (fromStrum) {
HXLINE(1401)				strum = (strum + ::Conductor_obj::songPosition);
            			}
HXLINE(1402)			int section = 0;
HXLINE(1403)			{
HXLINE(1403)				int _g1 = 0;
HXDLIN(1403)				::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1403)				while((_g1 < _g2->length)){
HXLINE(1403)					 ::Dynamic ii = _g2->__get(_g1);
HXDLIN(1403)					_g1 = (_g1 + 1);
HXLINE(1405)					bool _hx_tmp;
HXDLIN(1405)					if (::hx::IsLessEq( ii->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),strum )) {
HXLINE(1405)						_hx_tmp = ::hx::IsGreater( ii->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic),strum );
            					}
            					else {
HXLINE(1405)						_hx_tmp = false;
            					}
HXDLIN(1405)					if (_hx_tmp) {
HXLINE(1409)						::Array< Float > newData = ::Array_obj< Float >::__new(5)->init(0,strum)->init(1,i->__get(1))->init(2,i->__get(2))->init(3,i->__get(3))->init(4,i->__get(4));
HXLINE(1410)						( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(newData);
HXLINE(1412)						::cpp::VirtualArray thing = ( (::cpp::VirtualArray)( ::Dynamic(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(1414)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,strum,::Math_obj::floor(::hx::Mod(i->__get(1),4)),null(),false,true,i->__get(3),i->__get(4));
HXLINE(1415)						note->rawNoteData = ( (int)(i->__get(1)) );
HXLINE(1416)						note->sustainLength = ( (Float)(i->__get(2)) );
HXLINE(1417)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(1418)						note->updateHitbox();
HXLINE(1419)						note->set_x(( (Float)(::Math_obj::floor((( (Float)(i->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(1421)						note->charterSelected = true;
HXLINE(1423)						Float _hx_tmp = this->getYfromStrum(strum);
HXDLIN(1423)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1425)						 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(1426)						box->connectedNoteData = thing;
HXLINE(1427)						this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(1429)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1431)						this->pastedNotes->push(note);
HXLINE(1433)						if ((note->sustainLength > 0)) {
HXLINE(1435)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(1436)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(1435)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(1438)							note->noteCharterObject = sustainVis2;
HXLINE(1440)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
HXLINE(1443)						continue;
            					}
HXLINE(1445)					section = (section + 1);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,pasteNotesFromArray,(void))

void ChartingState_obj::offsetSelectedNotes(Float offset){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1451_offsetSelectedNotes)
HXLINE(1452)		::Array< ::Dynamic> toDelete = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1453)		::Array< ::Dynamic> toAdd = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1456)		{
HXLINE(1456)			int _g = 0;
HXDLIN(1456)			int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(1456)			while((_g < _g1)){
HXLINE(1456)				_g = (_g + 1);
HXDLIN(1456)				int i = (_g - 1);
HXLINE(1458)				 ::Note originalNote = Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote;
HXLINE(1460)				toDelete->push(originalNote);
HXLINE(1462)				Float strum = (originalNote->strumTime + offset);
HXLINE(1465)				{
HXLINE(1465)					int _g1 = 0;
HXDLIN(1465)					::Array< ::Dynamic> _g2 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1465)					while((_g1 < _g2->length)){
HXLINE(1465)						 ::Dynamic ii = _g2->__get(_g1);
HXDLIN(1465)						_g1 = (_g1 + 1);
HXLINE(1467)						bool _hx_tmp;
HXDLIN(1467)						if (::hx::IsLessEq( ii->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),strum )) {
HXLINE(1467)							_hx_tmp = ::hx::IsGreater( ii->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic),strum );
            						}
            						else {
HXLINE(1467)							_hx_tmp = false;
            						}
HXDLIN(1467)						if (_hx_tmp) {
HXLINE(1470)							::cpp::VirtualArray newData = ::cpp::VirtualArray_obj::__new(5)->init(0,strum)->init(1,originalNote->rawNoteData)->init(2,originalNote->sustainLength)->init(3,originalNote->isAlt)->init(4,originalNote->beat);
HXLINE(1477)							( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(newData);
HXLINE(1479)							::cpp::VirtualArray thing = ( (::cpp::VirtualArray)( ::Dynamic(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(ii->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(1481)							 ::Note note =  ::Note_obj::__alloc( HX_CTX ,strum,originalNote->noteData,originalNote->prevNote,originalNote->isSustainNote,true,originalNote->isAlt,originalNote->beat);
HXLINE(1483)							note->rawNoteData = originalNote->rawNoteData;
HXLINE(1484)							note->sustainLength = originalNote->sustainLength;
HXLINE(1485)							note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(1486)							note->updateHitbox();
HXLINE(1487)							note->set_x(( (Float)(::Math_obj::floor(( (Float)((originalNote->rawNoteData * this->GRID_SIZE)) ))) ));
HXLINE(1489)							note->charterSelected = true;
HXLINE(1491)							Float _hx_tmp = this->getYfromStrum(strum);
HXDLIN(1491)							note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1493)							 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(1494)							box->connectedNoteData = thing;
HXLINE(1496)							toAdd->push(box);
HXLINE(1498)							this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(1500)							this->pastedNotes->push(note);
HXLINE(1502)							if ((note->sustainLength > 0)) {
HXLINE(1504)								 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(1505)								Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(1504)								 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(1507)								note->noteCharterObject = sustainVis2;
HXLINE(1509)								this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            							}
HXLINE(1512)							continue;
            						}
            					}
            				}
            			}
            		}
HXLINE(1516)		{
HXLINE(1516)			int _g2 = 0;
HXDLIN(1516)			while((_g2 < toDelete->length)){
HXLINE(1516)				 ::Note note = toDelete->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1516)				_g2 = (_g2 + 1);
HXLINE(1518)				this->deleteNote(note);
            			}
            		}
HXLINE(1520)		{
HXLINE(1520)			int _g3 = 0;
HXDLIN(1520)			while((_g3 < toAdd->length)){
HXLINE(1520)				 ::ChartingBox box = toAdd->__get(_g3).StaticCast<  ::ChartingBox >();
HXDLIN(1520)				_g3 = (_g3 + 1);
HXLINE(1522)				this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,offsetSelectedNotes,(void))

void ChartingState_obj::loadSong(::String daSong,::hx::Null< bool >  __o_reloadFromFile){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1582_loadSong)
HXLINE(1583)			if (!(::PlayState_obj::isSM)) {
HXLINE(1585)				_gthis->vocals->pause();
HXLINE(1586)				_gthis->vocals->set_time(( (Float)(0) ));
            			}
HXLINE(1588)			::flixel::FlxG_obj::sound->music->pause();
HXLINE(1589)			::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            		}
            		HX_END_LOCAL_FUNC0((void))

            		bool reloadFromFile = __o_reloadFromFile.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1527_loadSong)
HXLINE(1526)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1528)		if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1530)			 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(1530)			_this->cleanup(_this->autoDestroy,true);
            		}
HXLINE(1533)		if (reloadFromFile) {
HXLINE(1536)			if (::PlayState_obj::isSM) {
HXLINE(1539)				 ::haxe::io::Bytes bytes = ::sys::io::File_obj::getBytes(((::PlayState_obj::pathToSm + HX_("/",2f,00,00,00)) + ::PlayState_obj::sm->header->MUSIC));
HXLINE(1540)				 ::openfl::media::Sound sound =  ::openfl::media::Sound_obj::__alloc( HX_CTX ,null(),null());
HXLINE(1541)				sound->loadCompressedDataFromByteArray(::openfl::utils::_ByteArray::ByteArray_Impl__obj::fromBytesData(bytes->b),bytes->length);
HXLINE(1542)				::flixel::FlxG_obj::sound->playMusic(sound,null(),null(),null());
            			}
            			else {
HXLINE(1545)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(1545)				::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1545)				::String _hx_switch_0 = songLowercase;
            				if (  (_hx_switch_0==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1545)					songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1545)					goto _hx_goto_76;
            				}
            				if (  (_hx_switch_0==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1545)					songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1545)					goto _hx_goto_76;
            				}
            				if (  (_hx_switch_0==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1545)					songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1545)					goto _hx_goto_76;
            				}
            				_hx_goto_76:;
HXDLIN(1545)				_hx_tmp->playMusic((((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Inst.",f9,6e,13,1c)) + HX_("ogg",4f,94,54,00)),((Float)0.6),null(),null());
            			}
HXLINE(1550)			if (::PlayState_obj::isSM) {
HXLINE(1553)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJsonRAW(::sys::io::File_obj::getContent((::PlayState_obj::pathToSm + HX_("/converted.json",73,2b,b3,66)))));
            			}
            			else {
HXLINE(1558)				::String diff = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_80,4)->__get(::PlayState_obj::storyDifficulty);
HXLINE(1559)				::ChartingState_obj::_song = ::Song_obj::conversionChecks(::Song_obj::loadFromJson(( (::String)(::PlayState_obj::SONG->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ),diff));
            			}
            		}
            		else {
HXLINE(1564)			::ChartingState_obj::_song = ::PlayState_obj::SONG;
            		}
HXLINE(1568)		if (::PlayState_obj::isSM) {
HXLINE(1569)			this->vocals = null();
            		}
            		else {
HXLINE(1571)			 ::flixel::_hx_system::FlxSound _hx_tmp =  ::flixel::_hx_system::FlxSound_obj::__alloc( HX_CTX );
HXDLIN(1571)			::String songLowercase = ::StringTools_obj::replace(daSong,HX_(" ",20,00,00,00),HX_("-",2d,00,00,00)).toLowerCase();
HXDLIN(1571)			::String _hx_switch_1 = songLowercase;
            			if (  (_hx_switch_1==HX_("dad-battle",be,d5,66,07)) ){
HXLINE(1571)				songLowercase = HX_("dadbattle",bf,6a,a9,a6);
HXDLIN(1571)				goto _hx_goto_77;
            			}
            			if (  (_hx_switch_1==HX_("m.i.l.f",9e,fe,da,ac)) ){
HXLINE(1571)				songLowercase = HX_("milf",d6,4c,5c,48);
HXDLIN(1571)				goto _hx_goto_77;
            			}
            			if (  (_hx_switch_1==HX_("philly-nice",22,2e,26,44)) ){
HXLINE(1571)				songLowercase = HX_("philly",28,77,5e,ef);
HXDLIN(1571)				goto _hx_goto_77;
            			}
            			_hx_goto_77:;
HXDLIN(1571)			::String result = (((HX_("songs:assets/songs/",c1,ed,e6,7e) + songLowercase) + HX_("/Voices.",1e,f6,e5,90)) + HX_("ogg",4f,94,54,00));
HXDLIN(1571)			::String _hx_tmp1;
HXDLIN(1571)			if (::Paths_obj::doesSoundAssetExist(result)) {
HXLINE(1571)				_hx_tmp1 = result;
            			}
            			else {
HXLINE(1571)				_hx_tmp1 = null();
            			}
HXDLIN(1571)			this->vocals = _hx_tmp->loadEmbedded(_hx_tmp1,null(),null(),null());
            		}
HXLINE(1575)		::flixel::FlxG_obj::sound->list->add(this->vocals).StaticCast<  ::flixel::_hx_system::FlxSound >();
HXLINE(1577)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(1578)		if (!(::PlayState_obj::isSM)) {
HXLINE(1579)			this->vocals->pause();
            		}
HXLINE(1581)		::flixel::FlxG_obj::sound->music->onComplete =  ::Dynamic(new _hx_Closure_0(_gthis));
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,loadSong,(void))

void ChartingState_obj::generateUI(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1594_generateUI)
HXLINE(1595)		while((this->bullshitUI->members->get_length() > 0)){
HXLINE(1597)			this->bullshitUI->remove(Dynamic( this->bullshitUI->members->__get(0)).StaticCast<  ::flixel::FlxBasic >(),true).StaticCast<  ::flixel::FlxBasic >();
            		}
HXLINE(1601)		 ::flixel::text::FlxText title =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->UI_box->x + 20),(this->UI_box->y + 20),0,null(),null(),null());
HXLINE(1602)		this->bullshitUI->add(title).StaticCast<  ::flixel::FlxBasic >();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,generateUI,(void))

void ChartingState_obj::getEvent(::String id, ::Dynamic sender, ::Dynamic data,::cpp::VirtualArray params){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1614_getEvent)
HXDLIN(1614)		if ((id == HX_("click_check_box",dd,c1,1e,a8))) {
HXLINE(1616)			 ::flixel::addons::ui::FlxUICheckBox check = ( ( ::flixel::addons::ui::FlxUICheckBox)(sender) );
HXLINE(1617)			::String label = check->getLabel()->text;
HXLINE(1618)			::String _hx_switch_0 = label;
            			if (  (_hx_switch_0==HX_("CPU Alternate Animation",46,fd,80,2c)) ){
HXLINE(1621)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef),check->checked,::hx::paccDynamic);
HXDLIN(1621)				goto _hx_goto_83;
            			}
            			if (  (_hx_switch_0==HX_("Player Alternate Animation",3f,b2,0b,ac)) ){
HXLINE(1623)				this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("playerAltAnim",79,ce,6b,5d),check->checked,::hx::paccDynamic);
HXDLIN(1623)				goto _hx_goto_83;
            			}
            			_hx_goto_83:;
            		}
            		else {
HXLINE(1626)			bool _hx_tmp;
HXDLIN(1626)			if ((id == HX_("change_numeric_stepper",50,0a,cc,bb))) {
HXLINE(1626)				_hx_tmp = ::Std_obj::isOfType(sender,::hx::ClassOf< ::flixel::addons::ui::FlxUINumericStepper >());
            			}
            			else {
HXLINE(1626)				_hx_tmp = false;
            			}
HXDLIN(1626)			if (_hx_tmp) {
HXLINE(1628)				 ::flixel::addons::ui::FlxUINumericStepper nums = ( ( ::flixel::addons::ui::FlxUINumericStepper)(sender) );
HXLINE(1629)				::String wname = nums->name;
HXLINE(1632)				::String _hx_switch_1 = wname;
            				if (  (_hx_switch_1==HX_("divisions",a6,2a,2c,7f)) ){
HXLINE(1728)					this->subDivisions = nums->value;
HXLINE(1729)					this->updateGrid();
HXLINE(1727)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("note_susLength",8a,6b,51,4b)) ){
HXLINE(1702)					if (::hx::IsNull( this->curSelectedNote )) {
HXLINE(1703)						return;
            					}
HXLINE(1705)					if ((nums->value <= 0)) {
HXLINE(1706)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1707)					this->curSelectedNote->set(2,nums->value);
HXLINE(1708)					this->updateGrid();
HXLINE(1701)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("section_bpm",45,60,97,44)) ){
HXLINE(1711)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1712)						nums->set_value(((Float)0.1));
            					}
HXLINE(1713)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("bpm",df,be,4a,00),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1714)					this->updateGrid();
HXLINE(1710)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("section_length",40,57,01,c1)) ){
HXLINE(1635)					if ((nums->value <= 4)) {
HXLINE(1636)						nums->set_value(( (Float)(4) ));
            					}
HXLINE(1637)					this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("lengthInSteps",3c,ed,41,db),::Std_obj::_hx_int(nums->value),::hx::paccDynamic);
HXLINE(1638)					this->updateGrid();
HXLINE(1634)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("song_bpm",35,36,15,42)) ){
HXLINE(1646)					if ((nums->value <= 0)) {
HXLINE(1647)						nums->set_value(( (Float)(1) ));
            					}
HXLINE(1648)					::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),nums->value,::hx::paccDynamic);
HXLINE(1650)					if ((Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->type != HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1651)						::lime::app::Application_obj::current->_hx___window->alert(HX_("i'm crying, first event isn't a bpm change. fuck you",3a,f3,2b,34),null());
            					}
            					else {
HXLINE(1654)						Dynamic(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic))->__GetItem(0)).StaticCast<  ::Event >()->value = nums->value;
HXLINE(1655)						this->regenerateLines();
            					}
HXLINE(1658)					::TimingStruct_obj::clearTimings();
HXLINE(1660)					int currentIndex = 0;
HXLINE(1661)					{
HXLINE(1661)						int _g = 0;
HXDLIN(1661)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(1661)						while((_g < _g1->length)){
HXLINE(1661)							 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(1661)							_g = (_g + 1);
HXLINE(1663)							 ::Dynamic name = ::Reflect_obj::field(i,HX_("name",4b,72,ff,48));
HXLINE(1664)							::String type = ( (::String)(::Reflect_obj::field(i,HX_("type",ba,f2,08,4d))) );
HXLINE(1665)							Float pos = ( (Float)(::Reflect_obj::field(i,HX_("position",a9,a0,fa,ca))) );
HXLINE(1666)							Float value = ( (Float)(::Reflect_obj::field(i,HX_("value",71,7f,b8,31))) );
HXLINE(1669)							if ((type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(1671)								Float beat = pos;
HXLINE(1673)								Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(1675)								::TimingStruct_obj::addTiming(beat,value,endBeat,( (Float)(0) ));
HXLINE(1677)								if ((currentIndex != 0)) {
HXLINE(1679)									 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(1680)									data->endBeat = beat;
HXLINE(1681)									data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(1682)									Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(1683)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(1684)									::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            								}
HXLINE(1687)								currentIndex = (currentIndex + 1);
            							}
            						}
            					}
HXLINE(1692)					{
HXLINE(1692)						int _g2 = 0;
HXDLIN(1692)						::Array< ::Dynamic> _g3 = ::TimingStruct_obj::AllTimings;
HXDLIN(1692)						while((_g2 < _g3->length)){
HXLINE(1692)							 ::TimingStruct i = _g3->__get(_g2).StaticCast<  ::TimingStruct >();
HXDLIN(1692)							_g2 = (_g2 + 1);
HXLINE(1695)							this->recalculateAllSectionTimes();
            						}
            					}
HXLINE(1697)					this->regenerateLines();
HXLINE(1699)					this->poggers();
HXLINE(1645)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("song_instvol",63,a1,f2,af)) ){
HXLINE(1723)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1724)						nums->set_value(((Float)0.1));
            					}
HXLINE(1725)					::flixel::FlxG_obj::sound->music->set_volume(nums->value);
HXLINE(1722)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("song_speed",5d,10,41,a4)) ){
HXLINE(1641)					if ((nums->value <= 0)) {
HXLINE(1642)						nums->set_value(( (Float)(0) ));
            					}
HXLINE(1643)					::ChartingState_obj::_song->__SetField(HX_("speed",87,97,69,81),nums->value,::hx::paccDynamic);
HXLINE(1640)					goto _hx_goto_84;
            				}
            				if (  (_hx_switch_1==HX_("song_vocalvol",a8,3c,96,f8)) ){
HXLINE(1717)					if ((nums->value <= ((Float)0.1))) {
HXLINE(1718)						nums->set_value(((Float)0.1));
            					}
HXLINE(1719)					if (!(::PlayState_obj::isSM)) {
HXLINE(1720)						this->vocals->set_volume(nums->value);
            					}
HXLINE(1716)					goto _hx_goto_84;
            				}
            				_hx_goto_84:;
            			}
            		}
            	}


void ChartingState_obj::poggers(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1747_poggers)
HXLINE(1748)		::Array< ::Dynamic> notes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1750)		{
HXLINE(1750)			int _g = 0;
HXDLIN(1750)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1750)			while((_g < _g1->length)){
HXLINE(1750)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(1750)				_g = (_g + 1);
HXLINE(1752)				::Array< ::Dynamic> removed = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1754)				{
HXLINE(1754)					int _g2 = 0;
HXDLIN(1754)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1754)					while((_g2 < _g3->length)){
HXLINE(1754)						::cpp::VirtualArray note = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(1754)						_g2 = (_g2 + 1);
HXLINE(1757)						 ::Dynamic old = note->__get(0);
HXLINE(1758)						note->set(0,::TimingStruct_obj::getTimeFromBeat(( (Float)(note->__get(4)) )));
HXLINE(1759)						note->set(2,::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(( (Float)(note->__get(2)) ))));
HXLINE(1760)						if (::hx::IsLess( note->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1762)							notes->push(note);
HXLINE(1763)							removed->push(note);
            						}
HXLINE(1765)						if (::hx::IsGreater( note->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) )) {
HXLINE(1767)							notes->push(note);
HXLINE(1768)							removed->push(note);
            						}
            					}
            				}
HXLINE(1772)				{
HXLINE(1772)					int _g4 = 0;
HXDLIN(1772)					while((_g4 < removed->length)){
HXLINE(1772)						::cpp::VirtualArray i = ::cpp::VirtualArray( removed->__get(_g4));
HXDLIN(1772)						_g4 = (_g4 + 1);
HXLINE(1774)						( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1778)		{
HXLINE(1778)			int _g2 = 0;
HXDLIN(1778)			::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(1778)			while((_g2 < _g3->length)){
HXLINE(1778)				 ::Dynamic section = _g3->__get(_g2);
HXDLIN(1778)				_g2 = (_g2 + 1);
HXLINE(1780)				::Array< ::Dynamic> saveRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1782)				{
HXLINE(1782)					int _g = 0;
HXDLIN(1782)					while((_g < notes->length)){
HXLINE(1782)						::cpp::VirtualArray i = ::cpp::VirtualArray( notes->__get(_g));
HXDLIN(1782)						_g = (_g + 1);
HXLINE(1784)						bool _hx_tmp;
HXDLIN(1784)						if (::hx::IsGreaterEq( i->__get(0),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(1784)							_hx_tmp = ::hx::IsLess( i->__get(0),section->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            						}
            						else {
HXLINE(1784)							_hx_tmp = false;
            						}
HXDLIN(1784)						if (_hx_tmp) {
HXLINE(1786)							saveRemove->push(i);
HXLINE(1787)							( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(i);
            						}
            					}
            				}
HXLINE(1791)				{
HXLINE(1791)					int _g1 = 0;
HXDLIN(1791)					while((_g1 < saveRemove->length)){
HXLINE(1791)						::cpp::VirtualArray i = ::cpp::VirtualArray( saveRemove->__get(_g1));
HXDLIN(1791)						_g1 = (_g1 + 1);
HXLINE(1792)						notes->remove(i);
            					}
            				}
            			}
            		}
HXLINE(1795)		{
HXLINE(1795)			 ::Dynamic filter = null();
HXDLIN(1795)			 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(1795)			while(i->hasNext()){
HXLINE(1795)				 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(1797)				i1->strumTime = ::TimingStruct_obj::getTimeFromBeat(i1->beat);
HXLINE(1798)				Float _hx_tmp = this->getYfromStrum(i1->strumTime);
HXDLIN(1798)				i1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1799)				i1->sustainLength = ::TimingStruct_obj::getTimeFromBeat(::TimingStruct_obj::getBeatFromTime(i1->sustainLength));
HXLINE(1800)				if (::hx::IsNotNull( i1->noteCharterObject )) {
HXLINE(1802)					i1->noteCharterObject->set_y((i1->y + 40));
HXLINE(1803)					 ::flixel::FlxSprite i = i1->noteCharterObject;
HXDLIN(1803)					Float _hx_tmp = this->getYfromStrum((i1->strumTime + i1->sustainLength));
HXDLIN(1803)					i->makeGraphic(8,::Math_obj::floor(((_hx_tmp * this->zoomFactor) - i1->y)),-1,null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,poggers,(void))

Float ChartingState_obj::stepStartTime(int step){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1812_stepStartTime)
HXDLIN(1812)		return ((::Conductor_obj::bpm / (( (Float)(step) ) / ( (Float)(4) ))) / ( (Float)(60) ));
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,stepStartTime,return )

Float ChartingState_obj::sectionStartTime( ::Dynamic __o_customIndex){
            		 ::Dynamic customIndex = __o_customIndex;
            		if (::hx::IsNull(__o_customIndex)) customIndex = -1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1816_sectionStartTime)
HXLINE(1817)		if (::hx::IsEq( customIndex,-1 )) {
HXLINE(1818)			customIndex = this->curSection;
            		}
HXLINE(1819)		Float daBPM = ::Conductor_obj::bpm;
HXLINE(1820)		Float daPos = ( (Float)(0) );
HXLINE(1821)		{
HXLINE(1821)			int _g = 0;
HXDLIN(1821)			 ::Dynamic _g1 = customIndex;
HXDLIN(1821)			while(::hx::IsLess( _g,_g1 )){
HXLINE(1821)				_g = (_g + 1);
HXDLIN(1821)				int i = (_g - 1);
HXLINE(1823)				daPos = (daPos + (( (Float)(4) ) * (( (Float)(60000) ) / daBPM)));
            			}
            		}
HXLINE(1825)		return daPos;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,sectionStartTime,return )

void ChartingState_obj::swapSection( ::Dynamic secit){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(2)
            		int _hx_run(::cpp::VirtualArray a,::cpp::VirtualArray b){
            			HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1838_swapSection)
HXLINE(1838)			if (::hx::IsLess( a->__get(0),b->__get(0) )) {
HXLINE(1839)				return -1;
            			}
            			else {
HXLINE(1840)				if (::hx::IsGreater( a->__get(0),b->__get(0) )) {
HXLINE(1841)					return 1;
            				}
            				else {
HXLINE(1843)					return 0;
            				}
            			}
HXLINE(1838)			return 0;
            		}
            		HX_END_LOCAL_FUNC2(return)

            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1832_swapSection)
HXLINE(1833)		::Array< ::Dynamic> newSwaps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1836)		::haxe::ds::ArraySort_obj::sort(( (::cpp::VirtualArray)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) ), ::Dynamic(new _hx_Closure_0()));
HXLINE(1846)		{
HXLINE(1846)			int _g = 0;
HXDLIN(1846)			int _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(1846)			while((_g < _g1)){
HXLINE(1846)				_g = (_g + 1);
HXDLIN(1846)				int i = (_g - 1);
HXLINE(1848)				::cpp::VirtualArray note = ( (::cpp::VirtualArray)( ::Dynamic(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(i)) );
HXLINE(1849)				 ::Dynamic note1 = note->__get(0);
HXDLIN(1849)				int n = ::Std_obj::_hx_int(( (Float)(note->__get(1)) ));
HXDLIN(1849)				::Array< int > n1 = ::Array_obj< int >::__new(5)->init(0,note1)->init(1,n)->init(2,note->__get(2))->init(3,note->__get(3))->init(4,note->__get(4));
HXLINE(1850)				n1[1] = ::hx::Mod((note->__get(1) + 4),8);
HXLINE(1851)				newSwaps->push(n1);
            			}
            		}
HXLINE(1854)		secit->__SetField(HX_("sectionNotes",1c,c8,a7,fe),newSwaps,::hx::paccDynamic);
HXLINE(1856)		{
HXLINE(1856)			int _g2 = 0;
HXDLIN(1856)			::Array< ::Dynamic> _g3 = this->shownNotes;
HXDLIN(1856)			while((_g2 < _g3->length)){
HXLINE(1856)				 ::Note i = _g3->__get(_g2).StaticCast<  ::Note >();
HXDLIN(1856)				_g2 = (_g2 + 1);
HXLINE(1858)				{
HXLINE(1858)					int _g = 0;
HXDLIN(1858)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(secit->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(1858)					while((_g < _g1->length)){
HXLINE(1858)						::cpp::VirtualArray ii = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(1858)						_g = (_g + 1);
HXLINE(1859)						bool _hx_tmp;
HXDLIN(1859)						if (::hx::IsEq( i->strumTime,ii->__get(0) )) {
HXLINE(1859)							_hx_tmp = (i->noteData == ::hx::Mod(ii->__get(1),4));
            						}
            						else {
HXLINE(1859)							_hx_tmp = false;
            						}
HXDLIN(1859)						if (_hx_tmp) {
HXLINE(1861)							i->set_x(( (Float)(::Math_obj::floor((( (Float)(ii->__get(1)) ) * ( (Float)(this->GRID_SIZE) )))) ));
HXLINE(1863)							Float _hx_tmp = this->getYfromStrum(( (Float)(ii->__get(0)) ));
HXDLIN(1863)							i->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(1864)							bool _hx_tmp1;
HXDLIN(1864)							if ((i->sustainLength > 0)) {
HXLINE(1864)								_hx_tmp1 = ::hx::IsNotNull( i->noteCharterObject );
            							}
            							else {
HXLINE(1864)								_hx_tmp1 = false;
            							}
HXDLIN(1864)							if (_hx_tmp1) {
HXLINE(1865)								i->noteCharterObject->set_x((i->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))));
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,swapSection,(void))

void ChartingState_obj::resizeEverything(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1881_resizeEverything)
HXLINE(1882)		this->regenerateLines();
HXLINE(1884)		{
HXLINE(1884)			int _g = 0;
HXDLIN(1884)			::Array< ::Dynamic> _g1 = this->curRenderedNotes->members;
HXDLIN(1884)			while((_g < _g1->length)){
HXLINE(1884)				 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(1884)				_g = (_g + 1);
HXLINE(1886)				if (::hx::IsNull( i )) {
HXLINE(1887)					continue;
            				}
HXLINE(1888)				Float _hx_tmp = this->getYfromStrum(i->strumTime);
HXDLIN(1888)				i->set_y((_hx_tmp * this->zoomFactor));
HXLINE(1889)				if (::hx::IsNotNull( i->noteCharterObject )) {
HXLINE(1891)					this->curRenderedSustains->remove(i->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
HXLINE(1892)					 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(i->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(i->y + this->GRID_SIZE),null());
HXLINE(1893)					Float sustainVis1 = this->getYfromStrum((i->strumTime + i->sustainLength));
HXLINE(1892)					 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - i->y)),-1,null(),null());
HXLINE(1895)					i->noteCharterObject = sustainVis2;
HXLINE(1896)					this->curRenderedSustains->add(i->noteCharterObject).StaticCast<  ::flixel::FlxSprite >();
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,resizeEverything,(void))

void ChartingState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_1920_update)
HXLINE(1919)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(1921)		try {
            			HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1923)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1924)				if ((::flixel::FlxG_obj::sound->music->_time > (::flixel::FlxG_obj::sound->music->_length - ( (Float)(85) )))) {
HXLINE(1926)					::flixel::FlxG_obj::sound->music->pause();
HXLINE(1927)					::flixel::FlxG_obj::sound->music->set_time((::flixel::FlxG_obj::sound->music->_length - ( (Float)(85) )));
HXLINE(1928)					if (!(::PlayState_obj::isSM)) {
HXLINE(1930)						this->vocals->pause();
HXLINE(1931)						this->vocals->set_time((this->vocals->_length - ( (Float)(85) )));
            					}
            				}
            			}
HXLINE(1942)			{
HXLINE(1942)				 ::Dynamic filter = null();
HXDLIN(1942)				 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->sectionRenderes->members,filter);
HXDLIN(1942)				while(i->hasNext()){
HXLINE(1942)					 ::SectionRender i1 = i->next().StaticCast<  ::SectionRender >();
HXLINE(1944)					Float diff = (i1->y - this->strumLine->y);
HXLINE(1945)					bool _hx_tmp;
HXDLIN(1945)					if ((diff < 2000)) {
HXLINE(1945)						_hx_tmp = (diff >= -2000);
            					}
            					else {
HXLINE(1945)						_hx_tmp = false;
            					}
HXDLIN(1945)					if (_hx_tmp) {
HXLINE(1947)						i1->set_active(true);
HXLINE(1948)						i1->set_visible(true);
            					}
            					else {
HXLINE(1952)						i1->set_active(false);
HXLINE(1953)						i1->set_visible(false);
            					}
            				}
            			}
HXLINE(1957)			this->shownNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(1959)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(1961)				if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(1967)					::lime::media::openal::AL_obj::sourcef(::flixel::FlxG_obj::sound->music->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
HXLINE(1968)					try {
            						HX_STACK_CATCHABLE( ::Dynamic, 0);
HXLINE(1972)						bool _hx_tmp;
HXDLIN(1972)						if (::hx::IsNotNull( this->vocals )) {
HXLINE(1972)							_hx_tmp = (this->vocals->_length > 0);
            						}
            						else {
HXLINE(1972)							_hx_tmp = false;
            						}
HXDLIN(1972)						if (_hx_tmp) {
HXLINE(1974)							::lime::media::openal::AL_obj::sourcef(this->vocals->_channel->_hx___source->_hx___backend->handle,4099,this->speed);
            						}
            					} catch( ::Dynamic _hx_e) {
            						if (_hx_e.IsClass<  ::Dynamic >() ){
            							HX_STACK_BEGIN_CATCH
            							 ::Dynamic _g = _hx_e;
            						}
            						else {
            							HX_STACK_DO_THROW(_hx_e);
            						}
            					}
            				}
            			}
HXLINE(1986)			{
HXLINE(1986)				 ::Dynamic filter1 = null();
HXDLIN(1986)				 ::flixel::group::FlxTypedGroupIterator note =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter1);
HXDLIN(1986)				while(note->hasNext()){
HXLINE(1986)					 ::Note note1 = note->next().StaticCast<  ::Note >();
HXLINE(1988)					Float diff = (note1->strumTime - ::Conductor_obj::songPosition);
HXLINE(1989)					bool _hx_tmp;
HXDLIN(1989)					if ((diff < 8000)) {
HXLINE(1989)						_hx_tmp = (diff >= -8000);
            					}
            					else {
HXLINE(1989)						_hx_tmp = false;
            					}
HXDLIN(1989)					if (_hx_tmp) {
HXLINE(1991)						this->shownNotes->push(note1);
HXLINE(1992)						if ((note1->sustainLength > 0)) {
HXLINE(1994)							note1->noteCharterObject->set_active(true);
HXLINE(1995)							note1->noteCharterObject->set_visible(true);
            						}
HXLINE(1997)						note1->set_active(true);
HXLINE(1998)						note1->set_visible(true);
            					}
            					else {
HXLINE(2002)						note1->set_active(false);
HXLINE(2003)						note1->set_visible(false);
HXLINE(2004)						if ((note1->sustainLength > 0)) {
HXLINE(2006)							if (::hx::IsNotNull( note1->noteCharterObject )) {
HXLINE(2007)								if ((note1->noteCharterObject->y != (note1->y + this->GRID_SIZE))) {
HXLINE(2009)									note1->noteCharterObject->set_active(false);
HXLINE(2010)									note1->noteCharterObject->set_visible(false);
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE(2016)			{
HXLINE(2016)				int _g = 0;
HXDLIN(2016)				::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(2016)				while((_g < _g1->length)){
HXLINE(2016)					 ::ChartingBox ii = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(2016)					_g = (_g + 1);
HXLINE(2018)					ii->set_x(ii->connectedNote->x);
HXLINE(2019)					ii->set_y(ii->connectedNote->y);
            				}
            			}
HXLINE(2022)			bool doInput = true;
HXLINE(2024)			{
HXLINE(2024)				int _g2 = 0;
HXDLIN(2024)				::Array< ::Dynamic> _g3 = this->Typeables;
HXDLIN(2024)				while((_g2 < _g3->length)){
HXLINE(2024)					 ::flixel::addons::ui::FlxUIInputText i = _g3->__get(_g2).StaticCast<  ::flixel::addons::ui::FlxUIInputText >();
HXDLIN(2024)					_g2 = (_g2 + 1);
HXLINE(2026)					if (i->hasFocus) {
HXLINE(2027)						doInput = false;
            					}
            				}
            			}
HXLINE(2030)			if (doInput) {
HXLINE(2032)				if ((::flixel::FlxG_obj::mouse->wheel != 0)) {
HXLINE(2034)					::flixel::FlxG_obj::sound->music->pause();
HXLINE(2036)					if (!(::PlayState_obj::isSM)) {
HXLINE(2037)						this->vocals->pause();
            					}
HXLINE(2038)					this->claps->removeRange(0,this->claps->length);
HXLINE(2040)					bool _hx_tmp;
HXDLIN(2040)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2040)					if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE(2040)						_hx_tmp = !(this->waitingForRelease);
            					}
            					else {
HXLINE(2040)						_hx_tmp = false;
            					}
HXDLIN(2040)					if (_hx_tmp) {
HXLINE(2042)						int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(2044)						if ((amount > 0)) {
HXLINE(2045)							amount = 0;
            						}
HXLINE(2047)						Float increase = ( (Float)(0) );
HXLINE(2049)						if ((amount < 0)) {
HXLINE(2050)							increase = ((Float)-0.02);
            						}
            						else {
HXLINE(2052)							increase = ((Float)0.02);
            						}
HXLINE(2054)						 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2054)						_hx_tmp->zoomFactor = (_hx_tmp->zoomFactor + increase);
HXLINE(2056)						if ((this->zoomFactor > 2)) {
HXLINE(2057)							this->zoomFactor = ( (Float)(2) );
            						}
HXLINE(2059)						if ((this->zoomFactor < ((Float)0.1))) {
HXLINE(2060)							this->zoomFactor = ((Float)0.1);
            						}
HXLINE(2062)						this->resizeEverything();
            					}
            					else {
HXLINE(2066)						int amount = ::flixel::FlxG_obj::mouse->wheel;
HXLINE(2068)						bool _hx_tmp;
HXDLIN(2068)						if ((amount > 0)) {
HXLINE(2068)							_hx_tmp = (this->strumLine->y < 0);
            						}
            						else {
HXLINE(2068)							_hx_tmp = false;
            						}
HXDLIN(2068)						if (_hx_tmp) {
HXLINE(2069)							amount = 0;
            						}
HXLINE(2071)						if (this->doSnapShit) {
HXLINE(2073)							Float increase = ( (Float)(0) );
HXLINE(2074)							Float beats = ( (Float)(0) );
HXLINE(2076)							if ((amount < 0)) {
HXLINE(2078)								increase = (( (Float)(1) ) / this->deezNuts->get_float(this->snap));
HXLINE(2079)								Float beats1 = this->curDecimalBeat;
HXDLIN(2079)								int beats2 = ::Math_obj::floor(((beats1 * this->deezNuts->get_float(this->snap)) + ((Float)0.001)));
HXDLIN(2079)								beats = ((( (Float)(beats2) ) / this->deezNuts->get_float(this->snap)) + increase);
            							}
            							else {
HXLINE(2083)								increase = (( (Float)(-1) ) / this->deezNuts->get_float(this->snap));
HXLINE(2084)								Float beats1 = this->curDecimalBeat;
HXDLIN(2084)								Float beats2 = (( (Float)(::Math_obj::ceil((beats1 * this->deezNuts->get_float(this->snap)))) ) - ((Float)0.001));
HXDLIN(2084)								beats = ((beats2 / this->deezNuts->get_float(this->snap)) + increase);
            							}
HXLINE(2089)							 ::TimingStruct data = ::TimingStruct_obj::getTimingAtBeat(beats);
HXLINE(2091)							if ((beats <= 0)) {
HXLINE(2092)								::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            							}
HXLINE(2094)							Float bpm;
HXDLIN(2094)							if (::hx::IsNotNull( data )) {
HXLINE(2094)								bpm = data->bpm;
            							}
            							else {
HXLINE(2094)								bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            							}
HXLINE(2096)							if (::hx::IsNotNull( data )) {
HXLINE(2098)								::flixel::FlxG_obj::sound->music->set_time(((data->startTime + ((beats - data->startBeat) / (bpm / ( (Float)(60) )))) * ( (Float)(1000) )));
            							}
            						}
            						else {
HXLINE(2102)							 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2102)							_g->set_time((_g->_time - ((( (Float)(::flixel::FlxG_obj::mouse->wheel) ) * ::Conductor_obj::stepCrochet) * ((Float)0.4))));
            						}
HXLINE(2104)						if (!(::PlayState_obj::isSM)) {
HXLINE(2105)							this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            						}
            					}
            				}
HXLINE(2109)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2109)				if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE(2111)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2111)					if (_this->keyManager->checkStatusUnsafe(39,_this->status)) {
HXLINE(2112)						 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2112)						_hx_tmp->speed = (_hx_tmp->speed + ((Float)0.1));
            					}
            					else {
HXLINE(2113)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2113)						if (_this->keyManager->checkStatusUnsafe(37,_this->status)) {
HXLINE(2114)							 ::ChartingState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(2114)							_hx_tmp->speed = (_hx_tmp->speed - ((Float)0.1));
            						}
            					}
HXLINE(2116)					if ((this->speed > 3)) {
HXLINE(2117)						this->speed = ( (Float)(3) );
            					}
HXLINE(2118)					if ((this->speed <= ((Float)0.01))) {
HXLINE(2119)						this->speed = ((Float)0.1);
            					}
            				}
            				else {
HXLINE(2123)					bool _hx_tmp;
HXDLIN(2123)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2123)					if (_this->keyManager->checkStatusUnsafe(39,_this->status)) {
HXLINE(2123)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2123)						_hx_tmp = !(_this->keyManager->checkStatusUnsafe(17,_this->status));
            					}
            					else {
HXLINE(2123)						_hx_tmp = false;
            					}
HXDLIN(2123)					if (_hx_tmp) {
HXLINE(2124)						this->goToSection((this->curSection + 1));
            					}
            					else {
HXLINE(2125)						bool _hx_tmp;
HXDLIN(2125)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2125)						if (_this->keyManager->checkStatusUnsafe(37,_this->status)) {
HXLINE(2125)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2125)							_hx_tmp = !(_this->keyManager->checkStatusUnsafe(17,_this->status));
            						}
            						else {
HXLINE(2125)							_hx_tmp = false;
            						}
HXDLIN(2125)						if (_hx_tmp) {
HXLINE(2126)							this->goToSection((this->curSection - 1));
            						}
            					}
            				}
HXLINE(2129)				bool _hx_tmp;
HXDLIN(2129)				 ::flixel::input::mouse::FlxMouseButton _this1 = ::flixel::FlxG_obj::mouse->_leftButton;
HXDLIN(2129)				bool _hx_tmp1;
HXDLIN(2129)				if ((_this1->current != 1)) {
HXLINE(2129)					_hx_tmp1 = (_this1->current == 2);
            				}
            				else {
HXLINE(2129)					_hx_tmp1 = true;
            				}
HXDLIN(2129)				if (_hx_tmp1) {
HXLINE(2129)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2129)					_hx_tmp = _this->keyManager->checkStatusUnsafe(17,_this->status);
            				}
            				else {
HXLINE(2129)					_hx_tmp = false;
            				}
HXDLIN(2129)				if (_hx_tmp) {
HXLINE(2131)					if (!(this->waitingForRelease)) {
HXLINE(2134)						this->waitingForRelease = true;
HXLINE(2135)						this->selectBox =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,::flixel::FlxG_obj::mouse->x,::flixel::FlxG_obj::mouse->y,null());
HXLINE(2136)						 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(2136)						int Alpha = 255;
HXDLIN(2136)						int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2136)						{
HXLINE(2136)							color = (color & -16711681);
HXDLIN(2136)							color = (color | 11337728);
            						}
HXDLIN(2136)						{
HXLINE(2136)							color = (color & -65281);
HXDLIN(2136)							color = (color | 55296);
            						}
HXDLIN(2136)						{
HXLINE(2136)							color = (color & -256);
HXDLIN(2136)							color = (color | 230);
            						}
HXDLIN(2136)						{
HXLINE(2136)							color = (color & 16777215);
HXDLIN(2136)							int color1;
HXDLIN(2136)							if ((Alpha > 255)) {
HXLINE(2136)								color1 = 255;
            							}
            							else {
HXLINE(2136)								if ((Alpha < 0)) {
HXLINE(2136)									color1 = 0;
            								}
            								else {
HXLINE(2136)									color1 = Alpha;
            								}
            							}
HXDLIN(2136)							color = (color | (color1 << 24));
            						}
HXDLIN(2136)						_hx_tmp->makeGraphic(0,0,color,null(),null());
HXLINE(2137)						this->selectBox->set_alpha(((Float)0.4));
HXLINE(2139)						this->selectInitialX = this->selectBox->x;
HXLINE(2140)						this->selectInitialY = this->selectBox->y;
HXLINE(2142)						this->add(this->selectBox);
            					}
            					else {
HXLINE(2146)						if (this->waitingForRelease) {
HXLINE(2149)							this->selectBox->set_x(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->x) ),this->selectInitialX));
HXLINE(2150)							this->selectBox->set_y(::Math_obj::min(( (Float)(::flixel::FlxG_obj::mouse->y) ),this->selectInitialY));
HXLINE(2152)							 ::flixel::FlxSprite _hx_tmp = this->selectBox;
HXDLIN(2152)							int _hx_tmp1 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->x) ) - this->selectInitialX)));
HXDLIN(2152)							int _hx_tmp2 = ::Math_obj::floor(::Math_obj::abs((( (Float)(::flixel::FlxG_obj::mouse->y) ) - this->selectInitialY)));
HXLINE(2153)							int Alpha = 255;
HXDLIN(2153)							int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN(2153)							{
HXLINE(2153)								color = (color & -16711681);
HXDLIN(2153)								color = (color | 11337728);
            							}
HXDLIN(2153)							{
HXLINE(2153)								color = (color & -65281);
HXDLIN(2153)								color = (color | 55296);
            							}
HXDLIN(2153)							{
HXLINE(2153)								color = (color & -256);
HXDLIN(2153)								color = (color | 230);
            							}
HXDLIN(2153)							{
HXLINE(2153)								color = (color & 16777215);
HXDLIN(2153)								int color1;
HXDLIN(2153)								if ((Alpha > 255)) {
HXLINE(2153)									color1 = 255;
            								}
            								else {
HXLINE(2153)									if ((Alpha < 0)) {
HXLINE(2153)										color1 = 0;
            									}
            									else {
HXLINE(2153)										color1 = Alpha;
            									}
            								}
HXDLIN(2153)								color = (color | (color1 << 24));
            							}
HXLINE(2152)							_hx_tmp->makeGraphic(_hx_tmp1,_hx_tmp2,color,null(),null());
            						}
            					}
            				}
HXLINE(2157)				bool _hx_tmp2;
HXDLIN(2157)				if ((::flixel::FlxG_obj::mouse->_leftButton->current == -1)) {
HXLINE(2157)					_hx_tmp2 = this->waitingForRelease;
            				}
            				else {
HXLINE(2157)					_hx_tmp2 = false;
            				}
HXDLIN(2157)				if (_hx_tmp2) {
HXLINE(2160)					this->waitingForRelease = false;
HXLINE(2162)					while(true){
HXLINE(2162)						bool _hx_tmp;
HXDLIN(2162)						bool _hx_tmp1;
HXDLIN(2162)						if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2162)							_hx_tmp1 = (this->selectBox->get_width() > 10);
            						}
            						else {
HXLINE(2162)							_hx_tmp1 = false;
            						}
HXDLIN(2162)						if (_hx_tmp1) {
HXLINE(2162)							_hx_tmp = (this->selectBox->get_height() > 10);
            						}
            						else {
HXLINE(2162)							_hx_tmp = false;
            						}
HXDLIN(2162)						if (!(_hx_tmp)) {
HXLINE(2162)							goto _hx_goto_110;
            						}
HXLINE(2164)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2165)						Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2166)						this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            					}
            					_hx_goto_110:;
HXLINE(2169)					{
HXLINE(2169)						 ::Dynamic filter = null();
HXDLIN(2169)						 ::flixel::group::FlxTypedGroupIterator i =  ::flixel::group::FlxTypedGroupIterator_obj::__alloc( HX_CTX ,this->curRenderedNotes->members,filter);
HXDLIN(2169)						while(i->hasNext()){
HXLINE(2169)							 ::Note i1 = i->next().StaticCast<  ::Note >();
HXLINE(2171)							bool _hx_tmp;
HXDLIN(2171)							if (i1->overlaps(this->selectBox,null(),null())) {
HXLINE(2171)								_hx_tmp = !(i1->charterSelected);
            							}
            							else {
HXLINE(2171)								_hx_tmp = false;
            							}
HXDLIN(2171)							if (_hx_tmp) {
HXLINE(2174)								this->selectNote(i1,false);
            							}
            						}
            					}
HXLINE(2177)					this->selectBox->destroy();
HXLINE(2178)					this->remove(this->selectBox,null());
            				}
HXLINE(2181)				bool _hx_tmp3;
HXDLIN(2181)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2181)				if (_this2->keyManager->checkStatusUnsafe(17,_this2->status)) {
HXLINE(2181)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2181)					_hx_tmp3 = _this->keyManager->checkStatusUnsafe(68,_this->status);
            				}
            				else {
HXLINE(2181)					_hx_tmp3 = false;
            				}
HXDLIN(2181)				if (_hx_tmp3) {
HXLINE(2183)					this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2184)					::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2185)					this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2186)					{
HXLINE(2186)						int _g = 0;
HXDLIN(2186)						int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2186)						while((_g < _g1)){
HXLINE(2186)							_g = (_g + 1);
HXDLIN(2186)							int i = (_g - 1);
HXLINE(2188)							this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2193)							notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            						}
            					}
HXLINE(2196)					{
HXLINE(2196)						int _g2 = 0;
HXDLIN(2196)						while((_g2 < notesToBeDeleted->length)){
HXLINE(2196)							 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2196)							_g2 = (_g2 + 1);
HXLINE(2198)							this->deleteNote(i);
            						}
            					}
            				}
HXLINE(2202)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2202)				if (_this3->keyManager->checkStatusUnsafe(46,_this3->status)) {
HXLINE(2204)					this->lastAction = HX_("delete",2b,c0,d8,6a);
HXLINE(2205)					::Array< ::Dynamic> notesToBeDeleted = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2206)					this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2207)					{
HXLINE(2207)						int _g = 0;
HXDLIN(2207)						int _g1 = this->selectedBoxes->members->get_length();
HXDLIN(2207)						while((_g < _g1)){
HXLINE(2207)							_g = (_g + 1);
HXDLIN(2207)							int i = (_g - 1);
HXLINE(2209)							this->deletedNotes->push(::cpp::VirtualArray_obj::__new(3)->init(0,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->strumTime)->init(1,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->rawNoteData)->init(2,Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote->sustainLength));
HXLINE(2214)							notesToBeDeleted->push(Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >()->connectedNote);
            						}
            					}
HXLINE(2217)					{
HXLINE(2217)						int _g2 = 0;
HXDLIN(2217)						while((_g2 < notesToBeDeleted->length)){
HXLINE(2217)							 ::Note i = notesToBeDeleted->__get(_g2).StaticCast<  ::Note >();
HXDLIN(2217)							_g2 = (_g2 + 1);
HXLINE(2219)							this->deleteNote(i);
            						}
            					}
            				}
HXLINE(2223)				bool _hx_tmp4;
HXDLIN(2223)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2223)				if (!(_this4->keyManager->checkStatusUnsafe(38,_this4->status))) {
HXLINE(2223)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2223)					_hx_tmp4 = _this->keyManager->checkStatusUnsafe(40,_this->status);
            				}
            				else {
HXLINE(2223)					_hx_tmp4 = true;
            				}
HXDLIN(2223)				if (_hx_tmp4) {
HXLINE(2225)					int offsetSteps;
HXDLIN(2225)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2225)					if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE(2225)						offsetSteps = 16;
            					}
            					else {
HXLINE(2225)						offsetSteps = 1;
            					}
HXLINE(2226)					Float offsetSeconds = (::Conductor_obj::stepCrochet * ( (Float)(offsetSteps) ));
HXLINE(2228)					Float offset = ( (Float)(0) );
HXLINE(2229)					 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2229)					if (_this1->keyManager->checkStatusUnsafe(38,_this1->status)) {
HXLINE(2230)						offset = (offset - offsetSeconds);
            					}
HXLINE(2231)					 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2231)					if (_this2->keyManager->checkStatusUnsafe(40,_this2->status)) {
HXLINE(2232)						offset = (offset + offsetSeconds);
            					}
HXLINE(2234)					this->offsetSelectedNotes(offset);
            				}
HXLINE(2237)				bool _hx_tmp5;
HXDLIN(2237)				 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2237)				if (_this5->keyManager->checkStatusUnsafe(17,_this5->status)) {
HXLINE(2237)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2237)					_hx_tmp5 = _this->keyManager->checkStatusUnsafe(67,_this->status);
            				}
            				else {
HXLINE(2237)					_hx_tmp5 = false;
            				}
HXDLIN(2237)				if (_hx_tmp5) {
HXLINE(2239)					if ((this->selectedBoxes->members->get_length() != 0)) {
HXLINE(2241)						this->copiedNotes = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2242)						{
HXLINE(2242)							int _g = 0;
HXDLIN(2242)							::Array< ::Dynamic> _g1 = this->selectedBoxes->members;
HXDLIN(2242)							while((_g < _g1->length)){
HXLINE(2242)								 ::ChartingBox i = _g1->__get(_g).StaticCast<  ::ChartingBox >();
HXDLIN(2242)								_g = (_g + 1);
HXLINE(2243)								this->copiedNotes->push(::cpp::VirtualArray_obj::__new(5)->init(0,i->connectedNote->strumTime)->init(1,i->connectedNote->rawNoteData)->init(2,i->connectedNote->sustainLength)->init(3,i->connectedNote->isAlt)->init(4,i->connectedNote->beat));
            							}
            						}
HXLINE(2251)						int firstNote = ( (int)(::cpp::VirtualArray( this->copiedNotes->__get(0))->__get(0)) );
HXLINE(2253)						{
HXLINE(2253)							int _g2 = 0;
HXDLIN(2253)							::Array< ::Dynamic> _g3 = this->copiedNotes;
HXDLIN(2253)							while((_g2 < _g3->length)){
HXLINE(2253)								::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(2253)								_g2 = (_g2 + 1);
HXLINE(2255)								i->set(0,(( (Float)(i->__get(0)) ) - ( (Float)(firstNote) )));
            							}
            						}
            					}
            				}
HXLINE(2263)				bool _hx_tmp6;
HXDLIN(2263)				 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2263)				if (_this6->keyManager->checkStatusUnsafe(17,_this6->status)) {
HXLINE(2263)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2263)					_hx_tmp6 = _this->keyManager->checkStatusUnsafe(86,_this->status);
            				}
            				else {
HXLINE(2263)					_hx_tmp6 = false;
            				}
HXDLIN(2263)				if (_hx_tmp6) {
HXLINE(2265)					if ((this->copiedNotes->length != 0)) {
HXLINE(2267)						while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(2269)							Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(2270)							Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(2271)							this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            						}
HXLINE(2276)						this->pasteNotesFromArray(this->copiedNotes,null());
HXLINE(2278)						this->lastAction = HX_("paste",53,53,56,bd);
            					}
            				}
HXLINE(2282)				bool _hx_tmp7;
HXDLIN(2282)				 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2282)				if (_this7->keyManager->checkStatusUnsafe(17,_this7->status)) {
HXLINE(2282)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2282)					_hx_tmp7 = _this->keyManager->checkStatusUnsafe(90,_this->status);
            				}
            				else {
HXLINE(2282)					_hx_tmp7 = false;
            				}
HXDLIN(2282)				if (_hx_tmp7) {
HXLINE(2284)					::String _hx_switch_0 = this->lastAction;
            					if (  (_hx_switch_0==HX_("delete",2b,c0,d8,6a)) ){
HXLINE(2300)						if ((this->deletedNotes->length != 0)) {
HXLINE(2303)							this->pasteNotesFromArray(this->deletedNotes,false);
HXLINE(2304)							this->deletedNotes = ::Array_obj< ::Dynamic>::__new(0);
            						}
HXLINE(2300)						goto _hx_goto_119;
            					}
            					if (  (_hx_switch_0==HX_("paste",53,53,56,bd)) ){
HXLINE(2288)						if ((this->pastedNotes->length != 0)) {
HXLINE(2290)							{
HXLINE(2290)								int _g = 0;
HXDLIN(2290)								::Array< ::Dynamic> _g1 = this->pastedNotes;
HXDLIN(2290)								while((_g < _g1->length)){
HXLINE(2290)									 ::Note i = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2290)									_g = (_g + 1);
HXLINE(2292)									if (this->curRenderedNotes->members->contains(i)) {
HXLINE(2293)										this->deleteNote(i);
            									}
            								}
            							}
HXLINE(2296)							this->pastedNotes = ::Array_obj< ::Dynamic>::__new(0);
            						}
HXLINE(2288)						goto _hx_goto_119;
            					}
            					_hx_goto_119:;
            				}
            			}
HXLINE(2310)			if ((this->updateFrame == 4)) {
HXLINE(2312)				::TimingStruct_obj::clearTimings();
HXLINE(2314)				int currentIndex = 0;
HXLINE(2315)				{
HXLINE(2315)					int _g = 0;
HXDLIN(2315)					::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("eventObjects",da,5f,a4,12),::hx::paccDynamic)) );
HXDLIN(2315)					while((_g < _g1->length)){
HXLINE(2315)						 ::Event i = _g1->__get(_g).StaticCast<  ::Event >();
HXDLIN(2315)						_g = (_g + 1);
HXLINE(2317)						if ((i->type == HX_("BPM Change",d1,e8,85,d1))) {
HXLINE(2319)							Float beat = i->position;
HXLINE(2321)							Float endBeat = ::Math_obj::POSITIVE_INFINITY;
HXLINE(2323)							::TimingStruct_obj::addTiming(beat,i->value,endBeat,( (Float)(0) ));
HXLINE(2325)							if ((currentIndex != 0)) {
HXLINE(2327)								 ::TimingStruct data = ::TimingStruct_obj::AllTimings->__get((currentIndex - 1)).StaticCast<  ::TimingStruct >();
HXLINE(2328)								data->endBeat = beat;
HXLINE(2329)								data->length = ((data->endBeat - data->startBeat) / (data->bpm / ( (Float)(60) )));
HXLINE(2330)								Float step = (((( (Float)(60) ) / data->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(2331)								::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startStep = ::Math_obj::floor((((data->endBeat / (data->bpm / ( (Float)(60) ))) * ( (Float)(1000) )) / step));
HXLINE(2332)								::TimingStruct_obj::AllTimings->__get(currentIndex).StaticCast<  ::TimingStruct >()->startTime = (data->startTime + data->length);
            							}
HXLINE(2335)							currentIndex = (currentIndex + 1);
            						}
            					}
            				}
HXLINE(2339)				this->recalculateAllSectionTimes();
HXLINE(2341)				this->regenerateLines();
HXLINE(2342)				this->updateFrame++;
            			}
            			else {
HXLINE(2344)				if ((this->updateFrame != 5)) {
HXLINE(2345)					this->updateFrame++;
            				}
            			}
HXLINE(2347)			this->snapText->set_text(HX_("",00,00,00,00));
HXLINE(2349)			bool _hx_tmp;
HXDLIN(2349)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2349)			if (_this->keyManager->checkStatusUnsafe(39,_this->status)) {
HXLINE(2349)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2349)				_hx_tmp = _this->keyManager->checkStatusUnsafe(17,_this->status);
            			}
            			else {
HXLINE(2349)				_hx_tmp = false;
            			}
HXDLIN(2349)			if (_hx_tmp) {
HXLINE(2351)				this->snapSelection++;
HXLINE(2352)				int index = 6;
HXLINE(2353)				if ((this->snapSelection > 6)) {
HXLINE(2354)					this->snapSelection = 6;
            				}
HXLINE(2355)				if ((this->snapSelection < 0)) {
HXLINE(2356)					this->snapSelection = 0;
            				}
HXLINE(2357)				{
HXLINE(2357)					 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2357)					while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2357)						int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2360)						if ((index == this->snapSelection)) {
HXLINE(2363)							this->snap = v1;
            						}
HXLINE(2365)						index = (index - 1);
            					}
            				}
            			}
HXLINE(2369)			bool _hx_tmp1;
HXDLIN(2369)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2369)			if (_this1->keyManager->checkStatusUnsafe(37,_this1->status)) {
HXLINE(2369)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2369)				_hx_tmp1 = _this->keyManager->checkStatusUnsafe(17,_this->status);
            			}
            			else {
HXLINE(2369)				_hx_tmp1 = false;
            			}
HXDLIN(2369)			if (_hx_tmp1) {
HXLINE(2371)				this->snapSelection--;
HXLINE(2372)				if ((this->snapSelection > 6)) {
HXLINE(2373)					this->snapSelection = 6;
            				}
HXLINE(2374)				if ((this->snapSelection < 0)) {
HXLINE(2375)					this->snapSelection = 0;
            				}
HXLINE(2376)				int index = 6;
HXLINE(2377)				{
HXLINE(2377)					 ::Dynamic v = this->deezNuts->keys();
HXDLIN(2377)					while(( (bool)(v->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(2377)						int v1 = ( (int)(v->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(2380)						if ((index == this->snapSelection)) {
HXLINE(2383)							this->snap = v1;
            						}
HXLINE(2385)						index = (index - 1);
            					}
            				}
            			}
HXLINE(2390)			 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2390)			if (_this2->keyManager->checkStatusUnsafe(16,_this2->status)) {
HXLINE(2391)				this->doSnapShit = !(this->doSnapShit);
            			}
HXLINE(2393)			this->doSnapShit = this->defaultSnap;
HXLINE(2394)			 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2394)			if (_this3->keyManager->checkStatusUnsafe(16,_this3->status)) {
HXLINE(2396)				this->doSnapShit = !(this->defaultSnap);
            			}
HXLINE(2399)			this->check_snap->set_checked(this->doSnapShit);
HXLINE(2401)			::Conductor_obj::songPosition = ::flixel::FlxG_obj::sound->music->_time;
HXLINE(2402)			::ChartingState_obj::_song->__SetField(HX_("songId",10,c3,88,2d),this->typingShit->text,::hx::paccDynamic);
HXLINE(2404)			 ::TimingStruct timingSeg = ::TimingStruct_obj::getTimingAtTimestamp(::Conductor_obj::songPosition);
HXLINE(2406)			Float start = ::Conductor_obj::songPosition;
HXLINE(2408)			if (::hx::IsNotNull( timingSeg )) {
HXLINE(2410)				Float timingSegBpm = timingSeg->bpm;
HXLINE(2411)				this->currentBPM = timingSegBpm;
HXLINE(2413)				if ((this->currentBPM != ::Conductor_obj::bpm)) {
HXLINE(2416)					::Conductor_obj::changeBPM(this->currentBPM,false);
            				}
HXLINE(2419)				Float pog = ((this->curDecimalBeat - timingSeg->startBeat) / (::Conductor_obj::bpm / ( (Float)(60) )));
HXLINE(2421)				start = ((timingSeg->startTime + pog) * ( (Float)(1000) ));
            			}
HXLINE(2424)			 ::Dynamic weird = this->getSectionByTime(start,true);
HXLINE(2428)			if (::hx::IsNotNull( weird )) {
HXLINE(2430)				 ::Dynamic _hx_tmp = this->lastUpdatedSection;
HXDLIN(2430)				if (::hx::IsNotEq( _hx_tmp,this->getSectionByTime(start,true) )) {
HXLINE(2432)					this->lastUpdatedSection = weird;
HXLINE(2433)					this->check_mustHitSection->set_checked(( (bool)(weird->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2434)					this->check_CPUAltAnim->set_checked(( (bool)(weird->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2435)					this->check_playerAltAnim->set_checked(( (bool)(weird->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            				}
            			}
HXLINE(2439)			 ::flixel::FlxSprite _hx_tmp2 = this->strumLine;
HXDLIN(2439)			Float _hx_tmp3 = this->getYfromStrum(start);
HXDLIN(2439)			_hx_tmp2->set_y((_hx_tmp3 * this->zoomFactor));
HXLINE(2440)			this->camFollow->set_y(this->strumLine->y);
HXLINE(2442)			 ::flixel::text::FlxText _hx_tmp4 = this->bpmTxt;
HXDLIN(2442)			::String _hx_tmp5 = (::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::Conductor_obj::songPosition / ( (Float)(1000) )),2)) + HX_(" / ",31,71,18,00));
HXDLIN(2442)			::String _hx_tmp6 = ((_hx_tmp5 + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((::flixel::FlxG_obj::sound->music->_length / ( (Float)(1000) )),2))) + HX_("\nCur Section: ",a1,0e,22,7f));
HXDLIN(2442)			::String _hx_tmp7 = ((_hx_tmp6 + this->curSection) + HX_("\nCurBeat: ",d2,85,30,2c));
HXDLIN(2442)			::String _hx_tmp8 = ((_hx_tmp7 + ::HelperFunctions_obj::truncateFloat(this->curDecimalBeat,3)) + HX_("\nCurStep: ",28,2d,e6,9d));
HXDLIN(2442)			::String _hx_tmp9 = ((_hx_tmp8 + this->curStep) + HX_("\nZoom: ",23,18,21,cf));
HXDLIN(2442)			::String _hx_tmp10 = ((_hx_tmp9 + ::HelperFunctions_obj::truncateFloat(this->zoomFactor,2)) + HX_("\nSpeed: ",03,97,ed,e9));
HXDLIN(2442)			::String _hx_tmp11 = ((_hx_tmp10 + ::HelperFunctions_obj::truncateFloat(this->speed,1)) + HX_("\n\nSnap: ",50,bc,f4,a1));
HXLINE(2458)			::String _hx_tmp12;
HXDLIN(2458)			if (this->doSnapShit) {
HXLINE(2458)				_hx_tmp12 = HX_("Snap enabled",cb,44,f7,7a);
            			}
            			else {
HXLINE(2458)				_hx_tmp12 = HX_("Snap disabled",f2,41,b6,ac);
            			}
HXLINE(2442)			_hx_tmp4->set_text((((_hx_tmp11 + this->snap) + HX_("\n",0a,00,00,00)) + _hx_tmp12));
HXLINE(2460)			 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2460)			bool left = _this4->keyManager->checkStatusUnsafe(49,_this4->status);
HXLINE(2461)			 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2461)			bool down = _this5->keyManager->checkStatusUnsafe(50,_this5->status);
HXLINE(2462)			 ::flixel::input::keyboard::FlxKeyList _this6 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2462)			bool up = _this6->keyManager->checkStatusUnsafe(51,_this6->status);
HXLINE(2463)			 ::flixel::input::keyboard::FlxKeyList _this7 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2463)			bool right = _this7->keyManager->checkStatusUnsafe(52,_this7->status);
HXLINE(2464)			 ::flixel::input::keyboard::FlxKeyList _this8 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2464)			bool leftO = _this8->keyManager->checkStatusUnsafe(53,_this8->status);
HXLINE(2465)			 ::flixel::input::keyboard::FlxKeyList _this9 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2465)			bool downO = _this9->keyManager->checkStatusUnsafe(54,_this9->status);
HXLINE(2466)			 ::flixel::input::keyboard::FlxKeyList _this10 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2466)			bool upO = _this10->keyManager->checkStatusUnsafe(55,_this10->status);
HXLINE(2467)			 ::flixel::input::keyboard::FlxKeyList _this11 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2467)			bool rightO = _this11->keyManager->checkStatusUnsafe(56,_this11->status);
HXLINE(2469)			 ::flixel::input::keyboard::FlxKeyList _this12 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2469)			if (_this12->keyManager->checkStatusUnsafe(112,_this12->status)) {
HXLINE(2470)				::flixel::FlxG_obj::save->data->__SetField(HX_("showHelp",5e,f6,91,ac),!(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("showHelp",5e,f6,91,ac),::hx::paccDynamic)) )),::hx::paccDynamic);
            			}
HXLINE(2472)			::Array< bool > pressArray = ::Array_obj< bool >::__new(8)->init(0,left)->init(1,down)->init(2,up)->init(3,right)->init(4,leftO)->init(5,downO)->init(6,upO)->init(7,rightO);
HXLINE(2473)			::Array< bool > _hx_delete = ::Array_obj< bool >::fromData( _hx_array_data_9bdde08d_132,1);
HXLINE(2474)			if (doInput) {
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,::Array< bool >,_hx_delete,::Array< bool >,pressArray) HXARGC(1)
            				void _hx_run( ::Note note){
            					HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2478_update)
HXLINE(2478)					bool _hx_tmp;
HXDLIN(2478)					if (_gthis->strumLine->overlaps(note,null(),null())) {
HXLINE(2478)						_hx_tmp = pressArray->__get(::Math_obj::floor(::Math_obj::abs(( (Float)(note->rawNoteData) ))));
            					}
            					else {
HXLINE(2478)						_hx_tmp = false;
            					}
HXDLIN(2478)					if (_hx_tmp) {
HXLINE(2480)						_gthis->deleteNote(note);
HXLINE(2481)						_hx_delete[0] = true;
            					}
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE(2476)				this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_0(_gthis,_hx_delete,pressArray)),null());
HXLINE(2485)				{
HXLINE(2485)					int _g = 0;
HXDLIN(2485)					int _g1 = pressArray->length;
HXDLIN(2485)					while((_g < _g1)){
HXLINE(2485)						_g = (_g + 1);
HXDLIN(2485)						int p = (_g - 1);
HXLINE(2487)						bool i = pressArray->__get(p);
HXLINE(2488)						bool _hx_tmp;
HXDLIN(2488)						if (i) {
HXLINE(2488)							_hx_tmp = !(_hx_delete->__get(0));
            						}
            						else {
HXLINE(2488)							_hx_tmp = false;
            						}
HXDLIN(2488)						if (_hx_tmp) {
HXLINE(2490)							this->addNote( ::Note_obj::__alloc( HX_CTX ,::Conductor_obj::songPosition,p,null(),null(),null(),null(),null()));
            						}
            					}
            				}
            			}
HXLINE(2495)			if (this->playClaps) {
HXLINE(2497)				int _g = 0;
HXDLIN(2497)				::Array< ::Dynamic> _g1 = this->shownNotes;
HXDLIN(2497)				while((_g < _g1->length)){
HXLINE(2497)					 ::Note note = _g1->__get(_g).StaticCast<  ::Note >();
HXDLIN(2497)					_g = (_g + 1);
HXLINE(2499)					bool _hx_tmp;
HXDLIN(2499)					bool _hx_tmp1;
HXDLIN(2499)					if ((note->strumTime <= ::Conductor_obj::songPosition)) {
HXLINE(2499)						_hx_tmp1 = !(this->claps->contains(note));
            					}
            					else {
HXLINE(2499)						_hx_tmp1 = false;
            					}
HXDLIN(2499)					if (_hx_tmp1) {
HXLINE(2499)						_hx_tmp = ::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel );
            					}
            					else {
HXLINE(2499)						_hx_tmp = false;
            					}
HXDLIN(2499)					if (_hx_tmp) {
HXLINE(2501)						this->claps->push(note);
HXLINE(2502)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(2502)						_hx_tmp->play(::Paths_obj::sound(HX_("SNAP",4a,1e,18,37),null()),null(),null(),null(),null(),null());
            					}
            				}
            			}
HXLINE(2578)			bool _hx_tmp13;
HXDLIN(2578)			if ((::flixel::FlxG_obj::mouse->_leftButton->current == 2)) {
HXLINE(2578)				_hx_tmp13 = !(this->waitingForRelease);
            			}
            			else {
HXLINE(2578)				_hx_tmp13 = false;
            			}
HXDLIN(2578)			if (_hx_tmp13) {
HXLINE(2580)				if (::flixel::FlxG_obj::mouse->overlaps(this->curRenderedNotes,null())) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::ChartingState,_gthis) HXARGC(1)
            					void _hx_run( ::Note note){
            						HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2584_update)
HXLINE(2584)						if (::flixel::FlxG_obj::mouse->overlaps(note,null())) {
HXLINE(2586)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2586)							if (_this->keyManager->checkStatusUnsafe(17,_this->status)) {
HXLINE(2588)								_gthis->selectNote(note,false);
            							}
            							else {
HXLINE(2592)								_gthis->deleteNote(note);
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE(2582)					this->curRenderedNotes->forEach( ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            				else {
HXLINE(2599)					bool _hx_tmp;
HXDLIN(2599)					bool _hx_tmp1;
HXDLIN(2599)					bool _hx_tmp2;
HXDLIN(2599)					if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2599)						int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN(2599)						_hx_tmp2 = (_hx_tmp < this->gridBG->get_width());
            					}
            					else {
HXLINE(2599)						_hx_tmp2 = false;
            					}
HXDLIN(2599)					if (_hx_tmp2) {
HXLINE(2599)						_hx_tmp1 = (::flixel::FlxG_obj::mouse->y > 0);
            					}
            					else {
HXLINE(2599)						_hx_tmp1 = false;
            					}
HXDLIN(2599)					if (_hx_tmp1) {
HXLINE(2599)						_hx_tmp = (::flixel::FlxG_obj::mouse->y < this->height);
            					}
            					else {
HXLINE(2599)						_hx_tmp = false;
            					}
HXDLIN(2599)					if (_hx_tmp) {
HXLINE(2602)						this->addNote(null());
            					}
            				}
            			}
HXLINE(2607)			bool _hx_tmp14;
HXDLIN(2607)			bool _hx_tmp15;
HXDLIN(2607)			bool _hx_tmp16;
HXDLIN(2607)			if ((::flixel::FlxG_obj::mouse->x > 0)) {
HXLINE(2607)				int _hx_tmp = ::flixel::FlxG_obj::mouse->x;
HXDLIN(2607)				_hx_tmp16 = (_hx_tmp < this->gridBG->get_width());
            			}
            			else {
HXLINE(2607)				_hx_tmp16 = false;
            			}
HXDLIN(2607)			if (_hx_tmp16) {
HXLINE(2607)				_hx_tmp15 = (::flixel::FlxG_obj::mouse->y > 0);
            			}
            			else {
HXLINE(2607)				_hx_tmp15 = false;
            			}
HXDLIN(2607)			if (_hx_tmp15) {
HXLINE(2607)				_hx_tmp14 = (::flixel::FlxG_obj::mouse->y < this->height);
            			}
            			else {
HXLINE(2607)				_hx_tmp14 = false;
            			}
HXDLIN(2607)			if (_hx_tmp14) {
HXLINE(2609)				this->dummyArrow->set_visible(true);
HXLINE(2611)				this->dummyArrow->set_x(( (Float)((::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) ))) * this->GRID_SIZE)) ));
HXLINE(2613)				if (this->doSnapShit) {
HXLINE(2615)					Float time = this->getStrumTime((( (Float)(::flixel::FlxG_obj::mouse->y) ) / this->zoomFactor));
HXLINE(2617)					Float beat = ::TimingStruct_obj::getBeatFromTime(time);
HXLINE(2618)					int snapped = ::Math_obj::round((beat * this->deezNuts->get_float(this->snap)));
HXDLIN(2618)					Float snapped1 = (( (Float)(snapped) ) / this->deezNuts->get_float(this->snap));
HXLINE(2620)					 ::flixel::FlxSprite _hx_tmp = this->dummyArrow;
HXDLIN(2620)					Float _hx_tmp1 = this->getYfromStrum(::TimingStruct_obj::getTimeFromBeat(snapped1));
HXDLIN(2620)					_hx_tmp->set_y((_hx_tmp1 * this->zoomFactor));
            				}
            				else {
HXLINE(2624)					this->dummyArrow->set_y(( (Float)(::flixel::FlxG_obj::mouse->y) ));
            				}
            			}
            			else {
HXLINE(2629)				this->dummyArrow->set_visible(false);
            			}
HXLINE(2632)			if (doInput) {
HXLINE(2634)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2634)				if (_this->keyManager->checkStatusUnsafe(13,_this->status)) {
HXLINE(2636)					::ChartingState_obj::lastSection = this->curSection;
HXLINE(2638)					::PlayState_obj::SONG = ::ChartingState_obj::_song;
HXLINE(2639)					{
HXLINE(2639)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(2639)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2640)					if (!(::PlayState_obj::isSM)) {
HXLINE(2641)						 ::flixel::_hx_system::FlxSound _this = this->vocals;
HXDLIN(2641)						_this->cleanup(_this->autoDestroy,true);
            					}
HXLINE(2643)					while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2645)						this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            					}
HXLINE(2648)					while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(2650)						this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            					}
HXLINE(2653)					while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(2655)						this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            					}
HXLINE(2658)					::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2660)					{
HXLINE(2660)						int _g = 0;
HXDLIN(2660)						::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(2660)						while((_g < _g1->length)){
HXLINE(2660)							 ::Dynamic i = _g1->__get(_g);
HXDLIN(2660)							_g = (_g + 1);
HXLINE(2662)							if (::hx::IsGreater( i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::flixel::FlxG_obj::sound->music->_length )) {
HXLINE(2663)								toRemove->push(i);
            							}
            						}
            					}
HXLINE(2666)					{
HXLINE(2666)						int _g2 = 0;
HXDLIN(2666)						while((_g2 < toRemove->length)){
HXLINE(2666)							 ::Dynamic i = toRemove->__get(_g2);
HXDLIN(2666)							_g2 = (_g2 + 1);
HXLINE(2667)							( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->remove(i);
            						}
            					}
HXLINE(2669)					toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(2671)					{
HXLINE(2671)						 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::PlayState_obj::__alloc( HX_CTX ,null(),null())) ),false);
HXDLIN(2671)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(2671)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
HXLINE(2674)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2674)				if (_this1->keyManager->checkStatusUnsafe(69,_this1->status)) {
HXLINE(2676)					Float _hx_tmp;
HXDLIN(2676)					if (::hx::IsNotNull( timingSeg )) {
HXLINE(2676)						_hx_tmp = timingSeg->bpm;
            					}
            					else {
HXLINE(2676)						_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
HXDLIN(2676)					this->changeNoteSustain((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) )));
            				}
HXLINE(2678)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2678)				if (_this2->keyManager->checkStatusUnsafe(81,_this2->status)) {
HXLINE(2680)					Float _hx_tmp;
HXDLIN(2680)					if (::hx::IsNotNull( timingSeg )) {
HXLINE(2680)						_hx_tmp = timingSeg->bpm;
            					}
            					else {
HXLINE(2680)						_hx_tmp = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            					}
HXDLIN(2680)					this->changeNoteSustain(-((((( (Float)(60) ) / _hx_tmp) * ( (Float)(1000) )) / ( (Float)(4) ))));
            				}
HXLINE(2683)				bool _hx_tmp;
HXDLIN(2683)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2683)				if (_this3->keyManager->checkStatusUnsafe(67,_this3->status)) {
HXLINE(2683)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2683)					_hx_tmp = !(_this->keyManager->checkStatusUnsafe(17,_this->status));
            				}
            				else {
HXLINE(2683)					_hx_tmp = false;
            				}
HXDLIN(2683)				if (_hx_tmp) {
HXLINE(2685)					 ::Dynamic sect =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2689)					sect->__SetField(HX_("mustHitSection",3b,5f,87,62),!(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )),::hx::paccDynamic);
HXLINE(2690)					this->updateHeads();
HXLINE(2691)					this->check_mustHitSection->set_checked(( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2692)					 ::SectionRender i = Dynamic( this->sectionRenderes->members->__get(this->curSection)).StaticCast<  ::SectionRender >();
HXLINE(2693)					Float cachedY = i->icon->y;
HXLINE(2694)					this->remove(i->icon,null());
HXLINE(2695)					 ::flixel::FlxSprite sectionicon;
HXDLIN(2695)					if (( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) )) {
HXLINE(2695)						sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            					}
            					else {
HXLINE(2695)						sectionicon =  ::HealthIcon_obj::__alloc( HX_CTX ,( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) ),null())->clone();
            					}
HXLINE(2696)					sectionicon->set_x(( (Float)(-95) ));
HXLINE(2697)					sectionicon->set_y(cachedY);
HXLINE(2698)					sectionicon->setGraphicSize(0,45);
HXLINE(2700)					i->icon = sectionicon;
HXLINE(2701)					i->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2703)					this->add(sectionicon);
            				}
HXLINE(2706)				bool _hx_tmp1;
HXDLIN(2706)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2706)				if (_this4->keyManager->checkStatusUnsafe(86,_this4->status)) {
HXLINE(2706)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2706)					_hx_tmp1 = !(_this->keyManager->checkStatusUnsafe(17,_this->status));
            				}
            				else {
HXLINE(2706)					_hx_tmp1 = false;
            				}
HXDLIN(2706)				if (_hx_tmp1) {
HXLINE(2709)					 ::Dynamic secit =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(this->curSection);
HXLINE(2711)					if (::hx::IsNotNull( secit )) {
HXLINE(2713)						this->swapSection(secit);
            					}
            				}
HXLINE(2717)				 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2717)				if (_this5->keyManager->checkStatusUnsafe(9,_this5->status)) {
HXLINE(2719)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2719)					if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE(2721)						{
HXLINE(2721)							 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2721)							_g->set_selected_tab((_g->get_selected_tab() - 1));
            						}
HXLINE(2722)						if ((this->UI_box->get_selected_tab() < 0)) {
HXLINE(2723)							this->UI_box->set_selected_tab(2);
            						}
            					}
            					else {
HXLINE(2727)						{
HXLINE(2727)							 ::flixel::addons::ui::FlxUITabMenu _g = this->UI_box;
HXDLIN(2727)							_g->set_selected_tab((_g->get_selected_tab() + 1));
            						}
HXLINE(2728)						if ((this->UI_box->get_selected_tab() >= 3)) {
HXLINE(2729)							this->UI_box->set_selected_tab(0);
            						}
            					}
            				}
HXLINE(2733)				if (!(this->typingShit->hasFocus)) {
HXLINE(2735)					int shiftThing = 1;
HXLINE(2736)					 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2736)					if (_this->keyManager->checkStatusUnsafe(16,_this->status)) {
HXLINE(2737)						shiftThing = 4;
            					}
HXLINE(2738)					 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2738)					if (_this1->keyManager->checkStatusUnsafe(32,_this1->status)) {
HXLINE(2740)						if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(2742)							::flixel::FlxG_obj::sound->music->pause();
HXLINE(2743)							if (!(::PlayState_obj::isSM)) {
HXLINE(2744)								this->vocals->pause();
            							}
HXLINE(2745)							this->claps->removeRange(0,this->claps->length);
            						}
            						else {
HXLINE(2749)							if (!(::PlayState_obj::isSM)) {
HXLINE(2750)								this->vocals->play(null(),null(),null());
            							}
HXLINE(2751)							::flixel::FlxG_obj::sound->music->play(null(),null(),null());
            						}
            					}
HXLINE(2755)					bool _hx_tmp;
HXDLIN(2755)					if (!((::flixel::FlxG_obj::sound->music->_time < 0))) {
HXLINE(2755)						_hx_tmp = (this->curDecimalBeat < 0);
            					}
            					else {
HXLINE(2755)						_hx_tmp = true;
            					}
HXDLIN(2755)					if (_hx_tmp) {
HXLINE(2756)						::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
            					}
HXLINE(2758)					 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2758)					if (!(_this2->keyManager->checkStatusUnsafe(16,_this2->status))) {
HXLINE(2760)						bool _hx_tmp;
HXDLIN(2760)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2760)						if (!(_this->keyManager->checkStatusUnsafe(87,_this->status))) {
HXLINE(2760)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2760)							_hx_tmp = _this->keyManager->checkStatusUnsafe(83,_this->status);
            						}
            						else {
HXLINE(2760)							_hx_tmp = true;
            						}
HXDLIN(2760)						if (_hx_tmp) {
HXLINE(2762)							::flixel::FlxG_obj::sound->music->pause();
HXLINE(2763)							if (!(::PlayState_obj::isSM)) {
HXLINE(2764)								this->vocals->pause();
            							}
HXLINE(2765)							this->claps->removeRange(0,this->claps->length);
HXLINE(2767)							Float daTime = (( (Float)(700) ) * ::flixel::FlxG_obj::elapsed);
HXLINE(2769)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(2769)							if (_this->keyManager->checkStatusUnsafe(87,_this->status)) {
HXLINE(2771)								 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2771)								_g->set_time((_g->_time - daTime));
            							}
            							else {
HXLINE(2774)								 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2774)								_g->set_time((_g->_time + daTime));
            							}
HXLINE(2776)							if (!(::PlayState_obj::isSM)) {
HXLINE(2777)								this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            							}
            						}
            					}
            					else {
HXLINE(2782)						bool _hx_tmp;
HXDLIN(2782)						 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2782)						if (!(_this->keyManager->checkStatusUnsafe(87,_this->status))) {
HXLINE(2782)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2782)							_hx_tmp = _this->keyManager->checkStatusUnsafe(83,_this->status);
            						}
            						else {
HXLINE(2782)							_hx_tmp = true;
            						}
HXDLIN(2782)						if (_hx_tmp) {
HXLINE(2784)							::flixel::FlxG_obj::sound->music->pause();
HXLINE(2785)							if (!(::PlayState_obj::isSM)) {
HXLINE(2786)								this->vocals->pause();
            							}
HXLINE(2788)							Float daTime = (::Conductor_obj::stepCrochet * ( (Float)(2) ));
HXLINE(2790)							 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(2790)							if (_this->keyManager->checkStatusUnsafe(87,_this->status)) {
HXLINE(2792)								 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2792)								_g->set_time((_g->_time - daTime));
            							}
            							else {
HXLINE(2795)								 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN(2795)								_g->set_time((_g->_time + daTime));
            							}
HXLINE(2797)							if (!(::PlayState_obj::isSM)) {
HXLINE(2798)								this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            							}
            						}
            					}
            				}
            			}
HXLINE(2803)			::ChartingState_obj::_song->__SetField(HX_("bpm",df,be,4a,00),this->tempBpm,::hx::paccDynamic);
            		} catch( ::Dynamic _hx_e) {
            			if (_hx_e.IsClass<  ::Dynamic >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::Dynamic _g = _hx_e;
HXLINE(   1)				 ::haxe::Exception e = ::haxe::Exception_obj::caught(_g);
HXLINE(2807)				{
HXLINE(2807)					 ::Dynamic input = (HX_("Error on this shit???\n",84,d0,92,09) + ::Std_obj::string(e));
HXDLIN(2807)					if (::hx::IsNotNull( input )) {
HXLINE(2807)						::cpp::VirtualArray output = ::Debug_obj::formatOutput(input,::hx::SourceInfo(HX_("source/ChartingState.hx",45,af,8d,9a),2807,HX_("ChartingState",8d,e0,dd,9b),HX_("update",09,86,05,87)));
HXDLIN(2807)						::Debug_obj::writeToFlxGLog(output,::Debug_obj::LOG_STYLE_ERROR);
HXDLIN(2807)						::Debug_obj::writeToLogFile(output,HX_("ERROR",a8,03,18,f1));
            					}
            				}
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(2809)		this->super::update(elapsed);
            	}


void ChartingState_obj::changeNoteSustain(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2813_changeNoteSustain)
HXLINE(2814)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2816)			if (::hx::IsNotNull( this->curSelectedNote->__get(2) )) {
HXLINE(2818)				::cpp::VirtualArray _hx_tmp = this->curSelectedNote;
HXDLIN(2818)				int _hx_tmp1 = 2;
HXDLIN(2818)				_hx_tmp->set(_hx_tmp1,(_hx_tmp->__get(_hx_tmp1) + value));
HXLINE(2819)				this->curSelectedNote->set(2,::Math_obj::max(( (Float)(this->curSelectedNote->__get(2)) ),( (Float)(0) )));
HXLINE(2821)				if (::hx::IsNotNull( this->curSelectedNoteObject->noteCharterObject )) {
HXLINE(2822)					this->curRenderedSustains->remove(this->curSelectedNoteObject->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            				}
HXLINE(2824)				this->remove(this->curSelectedNoteObject->noteCharterObject,null());
HXLINE(2826)				 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(this->curSelectedNoteObject->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(this->curSelectedNoteObject->y + this->GRID_SIZE),null());
HXLINE(2828)				Float sustainVis1 = this->getYfromStrum(( (Float)((this->curSelectedNoteObject->strumTime + this->curSelectedNote->__get(2))) ));
HXLINE(2826)				 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - this->curSelectedNoteObject->y)),null(),null(),null());
HXLINE(2829)				this->curSelectedNoteObject->sustainLength = ( (Float)(this->curSelectedNote->__get(2)) );
HXLINE(2831)				this->curSelectedNoteObject->noteCharterObject = sustainVis2;
HXLINE(2833)				this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            			}
            		}
HXLINE(2837)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,changeNoteSustain,(void))

void ChartingState_obj::resetSection(::hx::Null< bool >  __o_songBeginning){
            		bool songBeginning = __o_songBeginning.Default(false);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2841_resetSection)
HXLINE(2842)		::flixel::FlxG_obj::sound->music->pause();
HXLINE(2843)		if (!(::PlayState_obj::isSM)) {
HXLINE(2844)			this->vocals->pause();
            		}
HXLINE(2847)		::flixel::FlxG_obj::sound->music->set_time(( (Float)(0) ));
HXLINE(2849)		if (!(::PlayState_obj::isSM)) {
HXLINE(2850)			this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            		}
HXLINE(2852)		this->updateGrid();
HXLINE(2853)		if (!(songBeginning)) {
HXLINE(2854)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,resetSection,(void))

void ChartingState_obj::changeSection(::hx::Null< int >  __o_sec, ::Dynamic __o_updateMusic){
            		int sec = __o_sec.Default(0);
            		 ::Dynamic updateMusic = __o_updateMusic;
            		if (::hx::IsNull(__o_updateMusic)) updateMusic = true;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2861_changeSection)
HXDLIN(2861)		if (::hx::IsNotNull(  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(sec) )) {
HXLINE(2864)			this->curSection = sec;
HXLINE(2866)			this->updateGrid();
HXLINE(2868)			if (( (bool)(updateMusic) )) {
HXLINE(2870)				::flixel::FlxG_obj::sound->music->pause();
HXLINE(2871)				if (!(::PlayState_obj::isSM)) {
HXLINE(2872)					this->vocals->pause();
            				}
HXLINE(2882)				 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->music;
HXDLIN(2882)				_hx_tmp->set_time(this->sectionStartTime(null()));
HXLINE(2883)				if (!(::PlayState_obj::isSM)) {
HXLINE(2884)					this->vocals->set_time(::flixel::FlxG_obj::sound->music->_time);
            				}
HXLINE(2885)				this->updateCurStep();
            			}
HXLINE(2888)			this->updateGrid();
HXLINE(2889)			this->updateSectionUI();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,changeSection,(void))

void ChartingState_obj::copySection( ::Dynamic __o_sectionNum){
            		 ::Dynamic sectionNum = __o_sectionNum;
            		if (::hx::IsNull(__o_sectionNum)) sectionNum = 1;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2895_copySection)
HXLINE(2896)		int a = this->curSection;
HXDLIN(2896)		int b = ( (int)(sectionNum) );
HXDLIN(2896)		int daSec;
HXDLIN(2896)		if ((a > b)) {
HXLINE(2896)			daSec = a;
            		}
            		else {
HXLINE(2896)			daSec = b;
            		}
HXLINE(2897)		 ::Dynamic sect = this->lastUpdatedSection;
HXLINE(2899)		if (::hx::IsNull( sect )) {
HXLINE(2900)			return;
            		}
HXLINE(2902)		{
HXLINE(2902)			int _g = 0;
HXDLIN(2902)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((daSec - ( (int)(sectionNum) )))->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(2902)			while((_g < _g1->length)){
HXLINE(2902)				::cpp::VirtualArray note = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(2902)				_g = (_g + 1);
HXLINE(2904)				 ::Dynamic strum = (note->__get(0) + (::Conductor_obj::stepCrochet * ( (Float)((( (int)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSec)->__Field(HX_("lengthInSteps",3c,ed,41,db),::hx::paccDynamic)) ) * ( (int)(sectionNum) ))) )));
HXLINE(2906)				::cpp::VirtualArray copiedNote = ::cpp::VirtualArray_obj::__new(4)->init(0,strum)->init(1,note->__get(1))->init(2,note->__get(2))->init(3,note->__get(3));
HXLINE(2907)				( (::Array< ::Dynamic>)(sect->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push(copiedNote);
            			}
            		}
HXLINE(2910)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,copySection,(void))

void ChartingState_obj::updateSectionUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2914_updateSectionUI)
HXLINE(2915)		 ::Dynamic sec = this->getSectionByTime(::Conductor_obj::songPosition,null());
HXLINE(2917)		if (::hx::IsNull( sec )) {
HXLINE(2919)			this->check_mustHitSection->set_checked(true);
HXLINE(2920)			this->check_CPUAltAnim->set_checked(false);
HXLINE(2921)			this->check_playerAltAnim->set_checked(false);
            		}
            		else {
HXLINE(2925)			this->check_mustHitSection->set_checked(( (bool)(sec->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) ));
HXLINE(2926)			this->check_CPUAltAnim->set_checked(( (bool)(sec->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic)) ));
HXLINE(2927)			this->check_playerAltAnim->set_checked(( (bool)(sec->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)) ));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateSectionUI,(void))

void ChartingState_obj::updateHeads(){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_0, ::ChartingState,_gthis,bool,mustHit,::String,head, ::SectionRender,i) HXARGC(1)
            		void _hx_run( ::Dynamic __o_failsafe){
            		bool failsafe = __o_failsafe.Default(false);
            			HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2939_updateHeads)
HXLINE(2940)			 ::Dynamic sect =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(_gthis->curSection);
HXLINE(2941)			Float cachedY = i->icon->y;
HXLINE(2942)			_gthis->remove(i->icon,null()).StaticCast<  ::flixel::FlxBasic >();
HXLINE(2943)			::String sectionicon;
HXDLIN(2943)			if (failsafe) {
HXLINE(2943)				if (mustHit) {
HXLINE(2943)					sectionicon = HX_("bf",c4,55,00,00);
            				}
            				else {
HXLINE(2943)					sectionicon = HX_("face",9d,b4,b5,43);
            				}
            			}
            			else {
HXLINE(2943)				sectionicon = head;
            			}
HXDLIN(2943)			 ::flixel::FlxSprite sectionicon1 =  ::HealthIcon_obj::__alloc( HX_CTX ,sectionicon,null())->clone();
HXLINE(2944)			sectionicon1->set_x(( (Float)(-95) ));
HXLINE(2945)			sectionicon1->set_y(cachedY);
HXLINE(2946)			sectionicon1->setGraphicSize(0,45);
HXLINE(2948)			i->icon = sectionicon1;
HXLINE(2949)			i->lastUpdated = ( (bool)(sect->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic)) );
HXLINE(2951)			_gthis->add(sectionicon1).StaticCast<  ::flixel::FlxBasic >();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2932_updateHeads)
HXLINE(2931)		 ::ChartingState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(2933)		bool mustHit = this->check_mustHitSection->checked;
HXLINE(2935)		::String head;
HXDLIN(2935)		if (mustHit) {
HXLINE(2935)			head = ( (::String)(::ChartingState_obj::_song->__Field(HX_("player1",b0,09,15,8a),::hx::paccDynamic)) );
            		}
            		else {
HXLINE(2935)			head = ( (::String)(::ChartingState_obj::_song->__Field(HX_("player2",b1,09,15,8a),::hx::paccDynamic)) );
            		}
HXLINE(2936)		 ::SectionRender i = Dynamic( this->sectionRenderes->members->__get(this->curSection)).StaticCast<  ::SectionRender >();
HXLINE(2938)		 ::Dynamic iconUpdate =  ::Dynamic(new _hx_Closure_0(_gthis,mustHit,head,i));
HXLINE(2956)		bool _hx_tmp;
HXDLIN(2956)		::String library = null();
HXDLIN(2956)		if (!(::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("icons/icon-",5f,da,21,72) + head.split(HX_("-",2d,00,00,00))->__get(0))) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library)))) {
HXLINE(2956)			::String library = null();
HXDLIN(2956)			_hx_tmp = !(::sys::FileSystem_obj::exists(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + (HX_("icons/icon-",5f,da,21,72) + head)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library)));
            		}
            		else {
HXLINE(2956)			_hx_tmp = false;
            		}
HXDLIN(2956)		if (_hx_tmp) {
HXLINE(2958)			if (::hx::IsNull( i->icon->animation->_curAnim )) {
HXLINE(2959)				iconUpdate(true);
            			}
            		}
            		else {
HXLINE(2962)			bool _hx_tmp;
HXDLIN(2962)			bool _hx_tmp1;
HXDLIN(2962)			if ((i->icon->animation->_curAnim->name != head)) {
HXLINE(2963)				::String i1 = i->icon->animation->_curAnim->name;
HXLINE(2962)				_hx_tmp1 = (i1 != head.split(HX_("-",2d,00,00,00))->__get(0));
            			}
            			else {
HXLINE(2962)				_hx_tmp1 = false;
            			}
HXDLIN(2962)			if (!(_hx_tmp1)) {
HXLINE(2964)				if ((head == HX_("bf-pixel",fd,03,90,37))) {
HXLINE(2962)					_hx_tmp = (i->icon->animation->_curAnim->name != HX_("bf-pixel",fd,03,90,37));
            				}
            				else {
HXLINE(2962)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE(2962)				_hx_tmp = true;
            			}
HXDLIN(2962)			if (_hx_tmp) {
HXLINE(2967)				if (::hx::IsNotNull( i->icon->animation->_animations->get(head) )) {
HXLINE(2968)					i->icon->animation->play(head,null(),null(),null());
            				}
            				else {
HXLINE(2970)					iconUpdate(null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateHeads,(void))

void ChartingState_obj::updateNoteUI(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2980_updateNoteUI)
HXDLIN(2980)		if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(2982)			this->stepperSusLength->set_value(( (Float)(this->curSelectedNote->__get(2)) ));
HXLINE(2983)			if (::hx::IsNotNull( this->curSelectedNote->__get(3) )) {
HXLINE(2984)				this->check_naltAnim->set_checked(( (bool)(this->curSelectedNote->__get(3)) ));
            			}
            			else {
HXLINE(2987)				this->curSelectedNote->set(3,false);
HXLINE(2988)				this->check_naltAnim->set_checked(false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateNoteUI,(void))

void ChartingState_obj::updateGrid(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_2994_updateGrid)
HXLINE(2995)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(2997)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3000)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3002)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3019)		int currentSection = 0;
HXLINE(3021)		{
HXLINE(3021)			int _g = 0;
HXDLIN(3021)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3021)			while((_g < _g1->length)){
HXLINE(3021)				 ::Dynamic section = _g1->__get(_g);
HXDLIN(3021)				_g = (_g + 1);
HXLINE(3023)				{
HXLINE(3023)					int _g2 = 0;
HXDLIN(3023)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3023)					while((_g2 < _g3->length)){
HXLINE(3023)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3023)						_g2 = (_g2 + 1);
HXLINE(3025)						 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(( (Float)(i->__get(0)) ));
HXLINE(3026)						int daNoteInfo = ( (int)(i->__get(1)) );
HXLINE(3027)						Float daStrumTime = ( (Float)(i->__get(0)) );
HXLINE(3028)						Float daSus = ( (Float)(i->__get(2)) );
HXLINE(3030)						 ::Note note =  ::Note_obj::__alloc( HX_CTX ,daStrumTime,::hx::Mod(daNoteInfo,4),null(),false,true,i->__get(3),i->__get(4));
HXLINE(3031)						note->rawNoteData = daNoteInfo;
HXLINE(3032)						note->sustainLength = daSus;
HXLINE(3033)						note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3034)						note->updateHitbox();
HXLINE(3035)						note->set_x(( (Float)(::Math_obj::floor(( (Float)((daNoteInfo * this->GRID_SIZE)) ))) ));
HXLINE(3037)						Float _hx_tmp = this->getYfromStrum(daStrumTime);
HXDLIN(3037)						note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3039)						if (::hx::IsNotNull( this->curSelectedNote )) {
HXLINE(3040)							if (::hx::IsEq( this->curSelectedNote->__get(0),note->strumTime )) {
HXLINE(3041)								this->lastNote = note;
            							}
            						}
HXLINE(3043)						this->curRenderedNotes->add(note).StaticCast<  ::Note >();
HXLINE(3045)						Float stepCrochet = (((( (Float)(60) ) / seg->bpm) * ( (Float)(1000) )) / ( (Float)(4) ));
HXLINE(3047)						if ((daSus > 0)) {
HXLINE(3049)							 ::flixel::FlxSprite sustainVis =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(note->x + (( (Float)(this->GRID_SIZE) ) / ( (Float)(2) ))),(note->y + this->GRID_SIZE),null());
HXLINE(3050)							Float sustainVis1 = this->getYfromStrum((note->strumTime + note->sustainLength));
HXLINE(3049)							 ::flixel::FlxSprite sustainVis2 = sustainVis->makeGraphic(8,::Math_obj::floor(((sustainVis1 * this->zoomFactor) - note->y)),null(),null(),null());
HXLINE(3052)							note->noteCharterObject = sustainVis2;
HXLINE(3054)							this->curRenderedSustains->add(sustainVis2).StaticCast<  ::flixel::FlxSprite >();
            						}
            					}
            				}
HXLINE(3057)				currentSection = (currentSection + 1);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,updateGrid,(void))

void ChartingState_obj::addSection(::hx::Null< int >  __o_lengthInSteps){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3062_addSection)
HXLINE(3063)		Float daPos = ( (Float)(0) );
HXLINE(3064)		Float start = ( (Float)(0) );
HXLINE(3066)		Float bpm = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
HXLINE(3067)		{
HXLINE(3067)			int _g = 0;
HXDLIN(3067)			int _g1 = this->curSection;
HXDLIN(3067)			while((_g < _g1)){
HXLINE(3067)				_g = (_g + 1);
HXDLIN(3067)				int i = (_g - 1);
HXLINE(3069)				{
HXLINE(3069)					int _g1 = 0;
HXDLIN(3069)					::Array< ::Dynamic> _g2 = ::TimingStruct_obj::AllTimings;
HXDLIN(3069)					while((_g1 < _g2->length)){
HXLINE(3069)						 ::TimingStruct ii = _g2->__get(_g1).StaticCast<  ::TimingStruct >();
HXDLIN(3069)						_g1 = (_g1 + 1);
HXLINE(3071)						 ::TimingStruct data = ::TimingStruct_obj::getTimingAtTimestamp(start);
HXLINE(3072)						bool _hx_tmp;
HXDLIN(3072)						Float _hx_tmp1;
HXDLIN(3072)						if (::hx::IsNotNull( data )) {
HXLINE(3072)							_hx_tmp1 = data->bpm;
            						}
            						else {
HXLINE(3072)							_hx_tmp1 = ( (Float)(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)) );
            						}
HXDLIN(3072)						if ((_hx_tmp1 != bpm)) {
HXLINE(3072)							_hx_tmp = (bpm != ii->bpm);
            						}
            						else {
HXLINE(3072)							_hx_tmp = false;
            						}
HXDLIN(3072)						if (_hx_tmp) {
HXLINE(3073)							bpm = ii->bpm;
            						}
            					}
            				}
HXLINE(3075)				start = (start + ((( (Float)(4) ) * (( (Float)(60) ) / bpm)) * ( (Float)(1000) )));
            			}
            		}
HXLINE(3078)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),false)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),false)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),true));
HXLINE(3092)		( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->push(sec);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addSection,(void))

void ChartingState_obj::selectNote( ::Note note, ::Dynamic __o_deleteAllBoxes){
            		 ::Dynamic deleteAllBoxes = __o_deleteAllBoxes;
            		if (::hx::IsNull(__o_deleteAllBoxes)) deleteAllBoxes = true;
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3096_selectNote)
HXLINE(3097)		int swagNum = 0;
HXLINE(3099)		if (( (bool)(deleteAllBoxes) )) {
HXLINE(3100)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3102)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3103)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3104)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
            		}
HXLINE(3107)		{
HXLINE(3107)			int _g = 0;
HXDLIN(3107)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3107)			while((_g < _g1->length)){
HXLINE(3107)				 ::Dynamic sec = _g1->__get(_g);
HXDLIN(3107)				_g = (_g + 1);
HXLINE(3109)				swagNum = 0;
HXLINE(3110)				{
HXLINE(3110)					int _g2 = 0;
HXDLIN(3110)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3110)					while((_g2 < _g3->length)){
HXLINE(3110)						::cpp::VirtualArray i = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3110)						_g2 = (_g2 + 1);
HXLINE(3112)						bool _hx_tmp;
HXDLIN(3112)						if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(3112)							_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(3112)							_hx_tmp = false;
            						}
HXDLIN(3112)						if (_hx_tmp) {
HXLINE(3114)							this->curSelectedNote = ( (::cpp::VirtualArray)( ::Dynamic(sec->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(swagNum)) );
HXLINE(3115)							if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3116)								this->curSelectedNoteObject->charterSelected = false;
            							}
HXLINE(3118)							this->curSelectedNoteObject = note;
HXLINE(3119)							if (!(note->charterSelected)) {
HXLINE(3121)								 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(3122)								box->connectedNoteData = i;
HXLINE(3123)								this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3124)								note->charterSelected = true;
HXLINE(3125)								this->curSelectedNoteObject->charterSelected = true;
            							}
            						}
HXLINE(3128)						swagNum = (swagNum + 1);
            					}
            				}
            			}
            		}
HXLINE(3132)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,selectNote,(void))

void ChartingState_obj::deleteNote( ::Note note){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3136_deleteNote)
HXLINE(3137)		this->lastNote = note;
HXLINE(3139)		 ::Dynamic section = this->getSectionByTime(note->strumTime,null());
HXLINE(3141)		bool found = false;
HXLINE(3143)		{
HXLINE(3143)			int _g = 0;
HXDLIN(3143)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3143)			while((_g < _g1->length)){
HXLINE(3143)				::cpp::VirtualArray i = ::cpp::VirtualArray( _g1->__get(_g));
HXDLIN(3143)				_g = (_g + 1);
HXLINE(3145)				bool _hx_tmp;
HXDLIN(3145)				if (::hx::IsEq( i->__get(0),note->strumTime )) {
HXLINE(3145)					_hx_tmp = ::hx::IsEq( i->__get(1),note->rawNoteData );
            				}
            				else {
HXLINE(3145)					_hx_tmp = false;
            				}
HXDLIN(3145)				if (_hx_tmp) {
HXLINE(3147)					( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(i);
HXLINE(3148)					found = true;
            				}
            			}
            		}
HXLINE(3152)		if (!(found)) {
HXLINE(3154)			int _g = 0;
HXDLIN(3154)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3154)			while((_g < _g1->length)){
HXLINE(3154)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3154)				_g = (_g + 1);
HXLINE(3156)				{
HXLINE(3156)					int _g2 = 0;
HXDLIN(3156)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3156)					while((_g2 < _g3->length)){
HXLINE(3156)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3156)						_g2 = (_g2 + 1);
HXLINE(3157)						bool _hx_tmp;
HXDLIN(3157)						if (::hx::IsEq( n->__get(0),note->strumTime )) {
HXLINE(3157)							_hx_tmp = ::hx::IsEq( n->__get(1),note->rawNoteData );
            						}
            						else {
HXLINE(3157)							_hx_tmp = false;
            						}
HXDLIN(3157)						if (_hx_tmp) {
HXLINE(3158)							( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->remove(n);
            						}
            					}
            				}
            			}
            		}
HXLINE(3162)		this->curRenderedNotes->remove(note,null()).StaticCast<  ::Note >();
HXLINE(3164)		if ((note->sustainLength > 0)) {
HXLINE(3165)			this->curRenderedSustains->remove(note->noteCharterObject,null()).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3167)		{
HXLINE(3167)			int _g2 = 0;
HXDLIN(3167)			int _g3 = this->selectedBoxes->members->get_length();
HXDLIN(3167)			while((_g2 < _g3)){
HXLINE(3167)				_g2 = (_g2 + 1);
HXDLIN(3167)				int i = (_g2 - 1);
HXLINE(3169)				 ::ChartingBox box = Dynamic( this->selectedBoxes->members->__get(i)).StaticCast<  ::ChartingBox >();
HXLINE(3170)				if (::hx::IsEq( box->connectedNote,note )) {
HXLINE(3172)					this->selectedBoxes->members->remove(box);
HXLINE(3173)					box->destroy();
HXLINE(3174)					return;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,deleteNote,(void))

void ChartingState_obj::clearSection(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3180_clearSection)
HXLINE(3181)		this->getSectionByTime(::Conductor_obj::songPosition,null())->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
HXLINE(3183)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSection,(void))

void ChartingState_obj::clearSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3187_clearSong)
HXLINE(3188)		{
HXLINE(3188)			int _g = 0;
HXDLIN(3188)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3188)			while((_g < _g1)){
HXLINE(3188)				_g = (_g + 1);
HXDLIN(3188)				int daSection = (_g - 1);
HXLINE(3190)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__SetField(HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0),::hx::paccDynamic);
            			}
            		}
HXLINE(3193)		this->updateGrid();
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,clearSong,(void))

 ::Dynamic ChartingState_obj::newSection(::hx::Null< int >  __o_lengthInSteps,::hx::Null< bool >  __o_mustHitSection,::hx::Null< bool >  __o_CPUAltAnim,::hx::Null< bool >  __o_playerAltAnim){
            		int lengthInSteps = __o_lengthInSteps.Default(16);
            		bool mustHitSection = __o_mustHitSection.Default(false);
            		bool CPUAltAnim = __o_CPUAltAnim.Default(true);
            		bool playerAltAnim = __o_playerAltAnim.Default(true);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3197_newSection)
HXLINE(3198)		Float daPos = ( (Float)(0) );
HXLINE(3200)		 ::TimingStruct currentSeg = ::TimingStruct_obj::AllTimings->__get((::TimingStruct_obj::AllTimings->length - 1)).StaticCast<  ::TimingStruct >();
HXLINE(3202)		int currentBeat = 4;
HXLINE(3204)		{
HXLINE(3204)			int _g = 0;
HXDLIN(3204)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3204)			while((_g < _g1->length)){
HXLINE(3204)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3204)				_g = (_g + 1);
HXLINE(3205)				currentBeat = (currentBeat + 4);
            			}
            		}
HXLINE(3207)		if (::hx::IsNull( currentSeg )) {
HXLINE(3208)			return null();
            		}
HXLINE(3210)		Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3212)		daPos = ((currentSeg->startTime + start) * ( (Float)(1000) ));
HXLINE(3214)		 ::Dynamic sec =  ::Dynamic(::hx::Anon_obj::Create(11)
            			->setFixed(0,HX_("lengthInSteps",3c,ed,41,db),lengthInSteps)
            			->setFixed(1,HX_("altAnim",da,f3,f2,e5),false)
            			->setFixed(2,HX_("CPUAltAnim",b2,2f,f2,ef),CPUAltAnim)
            			->setFixed(3,HX_("typeOfSection",74,f3,25,fb),0)
            			->setFixed(4,HX_("sectionNotes",1c,c8,a7,fe),::Array_obj< ::Dynamic>::__new(0))
            			->setFixed(5,HX_("bpm",df,be,4a,00), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("bpm",df,be,4a,00),::hx::paccDynamic)))
            			->setFixed(6,HX_("startTime",8f,45,f0,05),daPos)
            			->setFixed(7,HX_("changeBPM",4f,4f,f8,1d),false)
            			->setFixed(8,HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY)
            			->setFixed(9,HX_("playerAltAnim",79,ce,6b,5d),playerAltAnim)
            			->setFixed(10,HX_("mustHitSection",3b,5f,87,62),mustHitSection));
HXLINE(3228)		return sec;
            	}


HX_DEFINE_DYNAMIC_FUNC4(ChartingState_obj,newSection,return )

void ChartingState_obj::recalculateAllSectionTimes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3237_recalculateAllSectionTimes)
HXDLIN(3237)		int _g = 0;
HXDLIN(3237)		int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3237)		while((_g < _g1)){
HXDLIN(3237)			_g = (_g + 1);
HXDLIN(3237)			int i = (_g - 1);
HXLINE(3239)			 ::Dynamic section =  ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(i);
HXLINE(3241)			int currentBeat = (4 * i);
HXLINE(3243)			 ::TimingStruct currentSeg = ::TimingStruct_obj::getTimingAtBeat(( (Float)(currentBeat) ));
HXLINE(3245)			if (::hx::IsNull( currentSeg )) {
HXLINE(3246)				return;
            			}
HXLINE(3248)			Float start = ((( (Float)(currentBeat) ) - currentSeg->startBeat) / (currentSeg->bpm / ( (Float)(60) )));
HXLINE(3250)			section->__SetField(HX_("startTime",8f,45,f0,05),((currentSeg->startTime + start) * ( (Float)(1000) )),::hx::paccDynamic);
HXLINE(3252)			if ((i != 0)) {
HXLINE(3253)				 ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem((i - 1))->__SetField(HX_("endTime",88,85,21,2f),section->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::hx::paccDynamic);
            			}
HXLINE(3254)			section->__SetField(HX_("endTime",88,85,21,2f),::Math_obj::POSITIVE_INFINITY,::hx::paccDynamic);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,recalculateAllSectionTimes,(void))

void ChartingState_obj::shiftNotes(::hx::Null< int >  __o_measure,::hx::Null< int >  __o_step,::hx::Null< int >  __o_ms){
            		int measure = __o_measure.Default(0);
            		int step = __o_step.Default(0);
            		int ms = __o_ms.Default(0);
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3259_shiftNotes)
HXLINE(3260)		::Array< ::Dynamic> newSong = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3262)		Float millisecadd = ((((measure * 4) + (( (Float)(step) ) / ( (Float)(4) ))) * (( (Float)(60000) ) / this->currentBPM)) + ms);
HXLINE(3263)		int totaladdsection = ::Std_obj::_hx_int(((millisecadd / (( (Float)(60000) ) / this->currentBPM)) / ( (Float)(4) )));
HXLINE(3264)		if ((millisecadd > 0)) {
HXLINE(3266)			int _g = 0;
HXDLIN(3266)			int _g1 = totaladdsection;
HXDLIN(3266)			while((_g < _g1)){
HXLINE(3266)				_g = (_g + 1);
HXDLIN(3266)				int i = (_g - 1);
HXLINE(3268)				newSong->unshift(this->newSection(null(),null(),null(),null()));
            			}
            		}
HXLINE(3271)		{
HXLINE(3271)			int _g = 0;
HXDLIN(3271)			int _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3271)			while((_g < _g1)){
HXLINE(3271)				_g = (_g + 1);
HXDLIN(3271)				int daSection1 = (_g - 1);
HXLINE(3273)				newSong->push(this->newSection(16, ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection1)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic)));
            			}
            		}
HXLINE(3276)		{
HXLINE(3276)			int _g2 = 0;
HXDLIN(3276)			int _g3 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->length;
HXDLIN(3276)			while((_g2 < _g3)){
HXLINE(3276)				_g2 = (_g2 + 1);
HXDLIN(3276)				int daSection = (_g2 - 1);
HXLINE(3278)				int aimtosetsection = (daSection + ::Std_obj::_hx_int(( (Float)(totaladdsection) )));
HXLINE(3279)				if ((aimtosetsection < 0)) {
HXLINE(3280)					aimtosetsection = 0;
            				}
HXLINE(3281)				newSong->__get(aimtosetsection)->__SetField(HX_("mustHitSection",3b,5f,87,62), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("mustHitSection",3b,5f,87,62),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3282)				this->updateHeads();
HXLINE(3283)				newSong->__get(aimtosetsection)->__SetField(HX_("CPUAltAnim",b2,2f,f2,ef), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("CPUAltAnim",b2,2f,f2,ef),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3284)				newSong->__get(aimtosetsection)->__SetField(HX_("playerAltAnim",79,ce,6b,5d), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("playerAltAnim",79,ce,6b,5d),::hx::paccDynamic),::hx::paccDynamic);
HXLINE(3286)				{
HXLINE(3286)					int _g = 0;
HXDLIN(3286)					int _g1 = ( (::Array< ::Dynamic>)( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length;
HXDLIN(3286)					while((_g < _g1)){
HXLINE(3286)						_g = (_g + 1);
HXDLIN(3286)						int daNote = (_g - 1);
HXLINE(3288)						int newtiming = ( (int)(( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__GetItem(0) + millisecadd)) );
HXLINE(3289)						if ((newtiming < 0)) {
HXLINE(3291)							newtiming = 0;
            						}
HXLINE(3293)						int futureSection = ::Math_obj::floor(((( (Float)(newtiming) ) / ( (Float)(4) )) / (( (Float)(60000) ) / this->currentBPM)));
HXLINE(3294)						 ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote)->__SetItem(0,newtiming);
HXLINE(3295)						( (::Array< ::Dynamic>)(newSong->__get(futureSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->push( ::Dynamic( ::Dynamic(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic))->__GetItem(daSection)->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem(daNote));
            					}
            				}
            			}
            		}
HXLINE(3301)		::ChartingState_obj::_song->__SetField(HX_("notes",41,dc,ca,9f),newSong,::hx::paccDynamic);
HXLINE(3302)		this->recalculateAllSectionTimes();
HXLINE(3303)		this->updateGrid();
HXLINE(3304)		this->updateSectionUI();
HXLINE(3305)		this->updateNoteUI();
            	}


HX_DEFINE_DYNAMIC_FUNC3(ChartingState_obj,shiftNotes,(void))

 ::Dynamic ChartingState_obj::getSectionByTime(Float ms, ::Dynamic __o_changeCurSectionIndex){
            		 ::Dynamic changeCurSectionIndex = __o_changeCurSectionIndex;
            		if (::hx::IsNull(__o_changeCurSectionIndex)) changeCurSectionIndex = false;
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3309_getSectionByTime)
HXLINE(3310)		int index = 0;
HXLINE(3312)		{
HXLINE(3312)			int _g = 0;
HXDLIN(3312)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3312)			while((_g < _g1->length)){
HXLINE(3312)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3312)				_g = (_g + 1);
HXLINE(3314)				bool _hx_tmp;
HXDLIN(3314)				if (::hx::IsGreaterEq( ms,i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic) )) {
HXLINE(3314)					_hx_tmp = ::hx::IsLess( ms,i->__Field(HX_("endTime",88,85,21,2f),::hx::paccDynamic) );
            				}
            				else {
HXLINE(3314)					_hx_tmp = false;
            				}
HXDLIN(3314)				if (_hx_tmp) {
HXLINE(3316)					if (( (bool)(changeCurSectionIndex) )) {
HXLINE(3317)						this->curSection = index;
            					}
HXLINE(3318)					return i;
            				}
HXLINE(3320)				index = (index + 1);
            			}
            		}
HXLINE(3323)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(ChartingState_obj,getSectionByTime,return )

 ::Dynamic ChartingState_obj::getNoteByTime(Float ms){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3327_getNoteByTime)
HXLINE(3328)		{
HXLINE(3328)			int _g = 0;
HXDLIN(3328)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3328)			while((_g < _g1->length)){
HXLINE(3328)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3328)				_g = (_g + 1);
HXLINE(3330)				{
HXLINE(3330)					int _g2 = 0;
HXDLIN(3330)					::Array< ::Dynamic> _g3 = ( (::Array< ::Dynamic>)(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3330)					while((_g2 < _g3->length)){
HXLINE(3330)						::cpp::VirtualArray n = ::cpp::VirtualArray( _g3->__get(_g2));
HXDLIN(3330)						_g2 = (_g2 + 1);
HXLINE(3331)						if (::hx::IsEq( n->__get(0),ms )) {
HXLINE(3332)							return i;
            						}
            					}
            				}
            			}
            		}
HXLINE(3334)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getNoteByTime,return )

void ChartingState_obj::addNote( ::Note n){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3340_addNote)
HXLINE(3341)		Float strum = this->getStrumTime(this->dummyArrow->y);
HXDLIN(3341)		Float strum1 = (strum / this->zoomFactor);
HXLINE(3343)		 ::Dynamic section = this->getSectionByTime(strum1,null());
HXLINE(3345)		if (::hx::IsNull( section )) {
HXLINE(3346)			return;
            		}
HXLINE(3350)		Float noteStrum = strum1;
HXLINE(3351)		int noteData = ::Math_obj::floor((( (Float)(::flixel::FlxG_obj::mouse->x) ) / ( (Float)(this->GRID_SIZE) )));
HXLINE(3352)		int noteSus = 0;
HXLINE(3356)		if (::hx::IsNotNull( n )) {
HXLINE(3357)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXLINE(3358)			Float n1 = n->strumTime;
HXLINE(3359)			int n2 = n->noteData;
HXLINE(3360)			Float n3 = n->sustainLength;
HXLINE(3357)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,n1)->init(1,n2)->init(2,n3)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(n->strumTime)));
            		}
            		else {
HXLINE(3365)			::Array< ::Dynamic> section1 = ( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) );
HXDLIN(3365)			section1->push(::cpp::VirtualArray_obj::__new(5)->init(0,noteStrum)->init(1,noteData)->init(2,noteSus)->init(3,false)->init(4,::TimingStruct_obj::getBeatFromTime(noteStrum)));
            		}
HXLINE(3367)		::cpp::VirtualArray thingy = ( (::cpp::VirtualArray)( ::Dynamic(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic))->__GetItem((( (::Array< ::Dynamic>)(section->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)) )->length - 1))) );
HXLINE(3369)		this->curSelectedNote = thingy;
HXLINE(3371)		 ::TimingStruct seg = ::TimingStruct_obj::getTimingAtTimestamp(noteStrum);
HXLINE(3373)		if (::hx::IsNull( n )) {
HXLINE(3375)			 ::Note note =  ::Note_obj::__alloc( HX_CTX ,noteStrum,::hx::Mod(noteData,4),null(),false,true,null(),::TimingStruct_obj::getBeatFromTime(noteStrum));
HXLINE(3376)			note->rawNoteData = noteData;
HXLINE(3377)			note->sustainLength = ( (Float)(noteSus) );
HXLINE(3378)			note->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3379)			note->updateHitbox();
HXLINE(3380)			note->set_x(( (Float)(::Math_obj::floor(( (Float)((noteData * this->GRID_SIZE)) ))) ));
HXLINE(3382)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3383)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3384)			this->curSelectedNoteObject = note;
HXLINE(3386)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3388)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3389)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3390)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3393)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3395)			Float _hx_tmp = this->getYfromStrum(noteStrum);
HXDLIN(3395)			note->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3397)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note->x,note->y,note);
HXLINE(3398)			box->connectedNoteData = thingy;
HXLINE(3399)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3401)			this->curRenderedNotes->add(note).StaticCast<  ::Note >();
            		}
            		else {
HXLINE(3405)			Float n1 = n->strumTime;
HXDLIN(3405)			int note = ::hx::Mod(n->noteData,4);
HXDLIN(3405)			bool n2 = n->isAlt;
HXDLIN(3405)			 ::Note note1 =  ::Note_obj::__alloc( HX_CTX ,n1,note,null(),false,true,n2,::TimingStruct_obj::getBeatFromTime(n->strumTime));
HXLINE(3406)			note1->beat = ::TimingStruct_obj::getBeatFromTime(n->strumTime);
HXLINE(3407)			note1->rawNoteData = n->noteData;
HXLINE(3408)			note1->sustainLength = ( (Float)(noteSus) );
HXLINE(3409)			note1->setGraphicSize(::Math_obj::floor(( (Float)(this->GRID_SIZE) )),::Math_obj::floor(( (Float)(this->GRID_SIZE) )));
HXLINE(3410)			note1->updateHitbox();
HXLINE(3411)			note1->set_x(( (Float)(::Math_obj::floor(( (Float)((n->noteData * this->GRID_SIZE)) ))) ));
HXLINE(3413)			if (::hx::IsNotNull( this->curSelectedNoteObject )) {
HXLINE(3414)				this->curSelectedNoteObject->charterSelected = false;
            			}
HXLINE(3415)			this->curSelectedNoteObject = note1;
HXLINE(3417)			while((this->selectedBoxes->members->get_length() != 0)){
HXLINE(3419)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->connectedNote->charterSelected = false;
HXLINE(3420)				Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >()->destroy();
HXLINE(3421)				this->selectedBoxes->members->remove(Dynamic( this->selectedBoxes->members->__get(0)).StaticCast<  ::ChartingBox >());
            			}
HXLINE(3424)			 ::ChartingBox box =  ::ChartingBox_obj::__alloc( HX_CTX ,note1->x,note1->y,note1);
HXLINE(3425)			box->connectedNoteData = thingy;
HXLINE(3426)			this->selectedBoxes->add(box).StaticCast<  ::ChartingBox >();
HXLINE(3428)			this->curSelectedNoteObject->charterSelected = true;
HXLINE(3430)			Float _hx_tmp = this->getYfromStrum(n->strumTime);
HXDLIN(3430)			note1->set_y(( (Float)(::Math_obj::floor((_hx_tmp * this->zoomFactor))) ));
HXLINE(3432)			this->curRenderedNotes->add(note1).StaticCast<  ::Note >();
            		}
HXLINE(3435)		this->updateNoteUI();
HXLINE(3437)		this->autosaveSong();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,addNote,(void))

Float ChartingState_obj::getStrumTime(Float yPos){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3442_getStrumTime)
HXDLIN(3442)		return ::flixel::math::FlxMath_obj::remapToRange(yPos,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getStrumTime,return )

Float ChartingState_obj::getYfromStrum(Float strumTime){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3447_getYfromStrum)
HXDLIN(3447)		return ::flixel::math::FlxMath_obj::remapToRange(strumTime,( (Float)(0) ),::ChartingState_obj::lengthInSteps,( (Float)(0) ),::ChartingState_obj::lengthInSteps);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,getYfromStrum,return )

void ChartingState_obj::loadLevel(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3476_loadLevel)
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadLevel,(void))

::cpp::VirtualArray ChartingState_obj::getNotes(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3481_getNotes)
HXLINE(3482)		::cpp::VirtualArray noteData = ::cpp::VirtualArray_obj::__new(0);
HXLINE(3484)		{
HXLINE(3484)			int _g = 0;
HXDLIN(3484)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3484)			while((_g < _g1->length)){
HXLINE(3484)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3484)				_g = (_g + 1);
HXLINE(3486)				noteData->push( ::Dynamic(i->__Field(HX_("sectionNotes",1c,c8,a7,fe),::hx::paccDynamic)));
            			}
            		}
HXLINE(3489)		return noteData;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,getNotes,return )

void ChartingState_obj::loadJson(::String songId){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3493_loadJson)
HXLINE(3494)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_193,4);
HXLINE(3496)		::PlayState_obj::SONG = ::Song_obj::loadFromJson(songId,difficultyArray->__get(::PlayState_obj::storyDifficulty));
HXLINE(3498)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3500)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3503)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3505)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3508)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3510)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3513)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3515)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3517)		::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3519)		{
HXLINE(3519)			int _g = 0;
HXDLIN(3519)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3519)			while((_g < _g1->length)){
HXLINE(3519)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3519)				_g = (_g + 1);
HXLINE(3521)				if (::hx::IsGreater( i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::flixel::FlxG_obj::sound->music->_length )) {
HXLINE(3522)					toRemove->push(i);
            				}
            			}
            		}
HXLINE(3525)		{
HXLINE(3525)			int _g2 = 0;
HXDLIN(3525)			while((_g2 < toRemove->length)){
HXLINE(3525)				 ::Dynamic i = toRemove->__get(_g2);
HXDLIN(3525)				_g2 = (_g2 + 1);
HXLINE(3526)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->remove(i);
            			}
            		}
HXLINE(3528)		toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3529)		{
HXLINE(3529)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null())) ),false);
HXDLIN(3529)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3529)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,loadJson,(void))

void ChartingState_obj::loadAutosave(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3533_loadAutosave)
HXLINE(3534)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3536)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3539)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3541)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3544)		 ::Dynamic autoSaveData =  ::haxe::format::JsonParser_obj::__alloc( HX_CTX ,( (::String)(::flixel::FlxG_obj::save->data->__Field(HX_("autosave",2c,4e,9a,44),::hx::paccDynamic)) ))->doParse();
HXLINE(3546)		 ::Dynamic data = autoSaveData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic);
HXLINE(3547)		 ::Dynamic meta =  ::Dynamic(::hx::Anon_obj::Create(0));
HXLINE(3548)		::String name = ( (::String)(data->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) );
HXLINE(3549)		if (::hx::IsNotNull( autoSaveData->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic) )) {
HXLINE(3551)			if (::hx::IsNotNull( autoSaveData->__Field(HX_("songMeta",3a,a9,31,36),::hx::paccDynamic) )) {
HXLINE(3551)				meta = autoSaveData->__Field(HX_("songMeta",3a,a9,31,36),::hx::paccDynamic);
            			}
            			else {
HXLINE(3551)				meta =  ::Dynamic(::hx::Anon_obj::Create(0));
            			}
HXLINE(3552)			name = ( (::String)(meta->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            		}
HXLINE(3554)		::PlayState_obj::SONG = ::Song_obj::parseJSONshit(name,data,meta);
HXLINE(3556)		while((this->curRenderedNotes->members->get_length() > 0)){
HXLINE(3558)			this->curRenderedNotes->remove(Dynamic( this->curRenderedNotes->members->__get(0)).StaticCast<  ::Note >(),true).StaticCast<  ::Note >();
            		}
HXLINE(3561)		while((this->curRenderedSustains->members->get_length() > 0)){
HXLINE(3563)			this->curRenderedSustains->remove(Dynamic( this->curRenderedSustains->members->__get(0)).StaticCast<  ::flixel::FlxSprite >(),true).StaticCast<  ::flixel::FlxSprite >();
            		}
HXLINE(3566)		while((this->sectionRenderes->members->get_length() > 0)){
HXLINE(3568)			this->sectionRenderes->remove(Dynamic( this->sectionRenderes->members->__get(0)).StaticCast<  ::SectionRender >(),true).StaticCast<  ::SectionRender >();
            		}
HXLINE(3570)		::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3572)		{
HXLINE(3572)			int _g = 0;
HXDLIN(3572)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3572)			while((_g < _g1->length)){
HXLINE(3572)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3572)				_g = (_g + 1);
HXLINE(3574)				if (::hx::IsGreater( i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::flixel::FlxG_obj::sound->music->_length )) {
HXLINE(3575)					toRemove->push(i);
            				}
            			}
            		}
HXLINE(3578)		{
HXLINE(3578)			int _g2 = 0;
HXDLIN(3578)			while((_g2 < toRemove->length)){
HXLINE(3578)				 ::Dynamic i = toRemove->__get(_g2);
HXDLIN(3578)				_g2 = (_g2 + 1);
HXLINE(3579)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->remove(i);
            			}
            		}
HXLINE(3581)		toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3582)		{
HXLINE(3582)			 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::ChartingState_obj::__alloc( HX_CTX ,null())) ),false);
HXDLIN(3582)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(3582)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,loadAutosave,(void))

void ChartingState_obj::autosaveSong(){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3586_autosaveSong)
HXLINE(3587)		 ::Dynamic replacer = null();
HXDLIN(3587)		::String space = null();
HXDLIN(3587)		::String _hx_tmp = ::haxe::format::JsonPrinter_obj::print( ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("songMeta",3a,a9,31,36), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("name",4b,72,ff,48), ::Dynamic(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)))
            				->setFixed(1,HX_("offset",93,97,3f,60),0)))
            			->setFixed(1,HX_("song",d5,23,58,4c),::ChartingState_obj::_song)),replacer,space);
HXDLIN(3587)		::flixel::FlxG_obj::save->data->__SetField(HX_("autosave",2c,4e,9a,44),_hx_tmp,::hx::paccDynamic);
HXLINE(3594)		::flixel::FlxG_obj::save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,autosaveSong,(void))

void ChartingState_obj::saveLevel(){
            	HX_GC_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3598_saveLevel)
HXLINE(3599)		::Array< ::String > difficultyArray = ::Array_obj< ::String >::fromData( _hx_array_data_9bdde08d_206,4);
HXLINE(3601)		::Array< ::Dynamic> toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3603)		{
HXLINE(3603)			int _g = 0;
HXDLIN(3603)			::Array< ::Dynamic> _g1 = ( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) );
HXDLIN(3603)			while((_g < _g1->length)){
HXLINE(3603)				 ::Dynamic i = _g1->__get(_g);
HXDLIN(3603)				_g = (_g + 1);
HXLINE(3605)				if (::hx::IsGreater( i->__Field(HX_("startTime",8f,45,f0,05),::hx::paccDynamic),::flixel::FlxG_obj::sound->music->_length )) {
HXLINE(3606)					toRemove->push(i);
            				}
            			}
            		}
HXLINE(3609)		{
HXLINE(3609)			int _g2 = 0;
HXDLIN(3609)			while((_g2 < toRemove->length)){
HXLINE(3609)				 ::Dynamic i = toRemove->__get(_g2);
HXDLIN(3609)				_g2 = (_g2 + 1);
HXLINE(3610)				( (::Array< ::Dynamic>)(::ChartingState_obj::_song->__Field(HX_("notes",41,dc,ca,9f),::hx::paccDynamic)) )->remove(i);
            			}
            		}
HXLINE(3612)		toRemove = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(3614)		 ::Dynamic json =  ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("song",d5,23,58,4c),::ChartingState_obj::_song));
HXLINE(3618)		 ::Dynamic replacer = null();
HXDLIN(3618)		::String data = ::haxe::format::JsonPrinter_obj::print(json,replacer,HX_(" ",20,00,00,00));
HXLINE(3620)		bool _hx_tmp;
HXDLIN(3620)		if (::hx::IsNotNull( data )) {
HXLINE(3620)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE(3620)			_hx_tmp = false;
            		}
HXDLIN(3620)		if (_hx_tmp) {
HXLINE(3622)			this->_file =  ::openfl::net::FileReference_obj::__alloc( HX_CTX );
HXLINE(3623)			this->_file->addEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null(),null(),null());
HXLINE(3624)			this->_file->addEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null(),null(),null());
HXLINE(3625)			this->_file->addEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null(),null(),null());
HXLINE(3626)			 ::openfl::net::FileReference _hx_tmp = this->_file;
HXDLIN(3626)			::String _hx_tmp1 = ::StringTools_obj::trim(data);
HXDLIN(3626)			::String _hx_tmp2 = ( (::String)(::ChartingState_obj::_song->__Field(HX_("songId",10,c3,88,2d),::hx::paccDynamic)) ).toLowerCase();
HXDLIN(3626)			_hx_tmp->save(_hx_tmp1,((_hx_tmp2 + difficultyArray->__get(::PlayState_obj::storyDifficulty)) + HX_(".json",56,f1,d6,c2)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ChartingState_obj,saveLevel,(void))

void ChartingState_obj::onSaveComplete( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3631_onSaveComplete)
HXLINE(3632)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3633)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3634)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3635)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveComplete,(void))

void ChartingState_obj::onSaveCancel( ::openfl::events::Event _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3643_onSaveCancel)
HXLINE(3644)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3645)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3646)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3647)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveCancel,(void))

void ChartingState_obj::onSaveError( ::openfl::events::IOErrorEvent _){
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_3654_onSaveError)
HXLINE(3655)		this->_file->removeEventListener(HX_("complete",b9,00,c8,7f),this->onSaveComplete_dyn(),null());
HXLINE(3656)		this->_file->removeEventListener(HX_("cancel",7a,ed,33,b8),this->onSaveCancel_dyn(),null());
HXLINE(3657)		this->_file->removeEventListener(HX_("ioError",02,fe,41,76),this->onSaveError_dyn(),null());
HXLINE(3658)		this->_file = null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(ChartingState_obj,onSaveError,(void))

 ::ChartingState ChartingState_obj::instance;

Float ChartingState_obj::lengthInSteps;

Float ChartingState_obj::lengthInBeats;

int ChartingState_obj::lastSection;

 ::Dynamic ChartingState_obj::_song;

 ::HealthIcon ChartingState_obj::leftIcon;

 ::HealthIcon ChartingState_obj::rightIcon;

::String ChartingState_obj::latestChartVersion;


::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__new(::hx::Null< bool >  __o_reloadOnInit) {
	::hx::ObjectPtr< ChartingState_obj > __this = new ChartingState_obj();
	__this->__construct(__o_reloadOnInit);
	return __this;
}

::hx::ObjectPtr< ChartingState_obj > ChartingState_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_reloadOnInit) {
	ChartingState_obj *__this = (ChartingState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChartingState_obj), true, "ChartingState"));
	*(void **)__this = ChartingState_obj::_hx_vtable;
	__this->__construct(__o_reloadOnInit);
	return __this;
}

ChartingState_obj::ChartingState_obj()
{
}

void ChartingState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChartingState);
	HX_MARK_MEMBER_NAME(_file,"_file");
	HX_MARK_MEMBER_NAME(playClaps,"playClaps");
	HX_MARK_MEMBER_NAME(snap,"snap");
	HX_MARK_MEMBER_NAME(deezNuts,"deezNuts");
	HX_MARK_MEMBER_NAME(UI_box,"UI_box");
	HX_MARK_MEMBER_NAME(UI_options,"UI_options");
	HX_MARK_MEMBER_NAME(speed,"speed");
	HX_MARK_MEMBER_NAME(beatsShown,"beatsShown");
	HX_MARK_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_MARK_MEMBER_NAME(curSection,"curSection");
	HX_MARK_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_MARK_MEMBER_NAME(strumLine,"strumLine");
	HX_MARK_MEMBER_NAME(curSong,"curSong");
	HX_MARK_MEMBER_NAME(amountSteps,"amountSteps");
	HX_MARK_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_MARK_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_MARK_MEMBER_NAME(highlight,"highlight");
	HX_MARK_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_MARK_MEMBER_NAME(subDivisions,"subDivisions");
	HX_MARK_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_MARK_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_MARK_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_MARK_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_MARK_MEMBER_NAME(gridBG,"gridBG");
	HX_MARK_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_MARK_MEMBER_NAME(typingShit,"typingShit");
	HX_MARK_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_MARK_MEMBER_NAME(tempBpm,"tempBpm");
	HX_MARK_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_MARK_MEMBER_NAME(vocals,"vocals");
	HX_MARK_MEMBER_NAME(player2,"player2");
	HX_MARK_MEMBER_NAME(player1,"player1");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(char2,"char2");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(lastNote,"lastNote");
	HX_MARK_MEMBER_NAME(lines,"lines");
	HX_MARK_MEMBER_NAME(claps,"claps");
	HX_MARK_MEMBER_NAME(snapText,"snapText");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(waveform,"waveform");
	HX_MARK_MEMBER_NAME(reloadOnInit,"reloadOnInit");
	HX_MARK_MEMBER_NAME(texts,"texts");
	HX_MARK_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_MARK_MEMBER_NAME(check_snap,"check_snap");
	HX_MARK_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_MARK_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_MARK_MEMBER_NAME(savedType,"savedType");
	HX_MARK_MEMBER_NAME(savedValue,"savedValue");
	HX_MARK_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_MARK_MEMBER_NAME(chartEvents,"chartEvents");
	HX_MARK_MEMBER_NAME(Typeables,"Typeables");
	HX_MARK_MEMBER_NAME(stepperLength,"stepperLength");
	HX_MARK_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_MARK_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_MARK_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_MARK_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_MARK_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_MARK_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_MARK_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_MARK_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_MARK_MEMBER_NAME(updatedSection,"updatedSection");
	HX_MARK_MEMBER_NAME(writingNotes,"writingNotes");
	HX_MARK_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_MARK_MEMBER_NAME(diff,"diff");
	HX_MARK_MEMBER_NAME(changeIndex,"changeIndex");
	HX_MARK_MEMBER_NAME(currentBPM,"currentBPM");
	HX_MARK_MEMBER_NAME(lastBPM,"lastBPM");
	HX_MARK_MEMBER_NAME(updateFrame,"updateFrame");
	HX_MARK_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_MARK_MEMBER_NAME(shownNotes,"shownNotes");
	HX_MARK_MEMBER_NAME(snapSelection,"snapSelection");
	HX_MARK_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_MARK_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_MARK_MEMBER_NAME(selectBox,"selectBox");
	HX_MARK_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_MARK_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_MARK_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_MARK_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_MARK_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_MARK_MEMBER_NAME(lastAction,"lastAction");
	HX_MARK_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_MARK_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChartingState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_file,"_file");
	HX_VISIT_MEMBER_NAME(playClaps,"playClaps");
	HX_VISIT_MEMBER_NAME(snap,"snap");
	HX_VISIT_MEMBER_NAME(deezNuts,"deezNuts");
	HX_VISIT_MEMBER_NAME(UI_box,"UI_box");
	HX_VISIT_MEMBER_NAME(UI_options,"UI_options");
	HX_VISIT_MEMBER_NAME(speed,"speed");
	HX_VISIT_MEMBER_NAME(beatsShown,"beatsShown");
	HX_VISIT_MEMBER_NAME(zoomFactor,"zoomFactor");
	HX_VISIT_MEMBER_NAME(curSection,"curSection");
	HX_VISIT_MEMBER_NAME(bpmTxt,"bpmTxt");
	HX_VISIT_MEMBER_NAME(strumLine,"strumLine");
	HX_VISIT_MEMBER_NAME(curSong,"curSong");
	HX_VISIT_MEMBER_NAME(amountSteps,"amountSteps");
	HX_VISIT_MEMBER_NAME(bullshitUI,"bullshitUI");
	HX_VISIT_MEMBER_NAME(writingNotesText,"writingNotesText");
	HX_VISIT_MEMBER_NAME(highlight,"highlight");
	HX_VISIT_MEMBER_NAME(GRID_SIZE,"GRID_SIZE");
	HX_VISIT_MEMBER_NAME(subDivisions,"subDivisions");
	HX_VISIT_MEMBER_NAME(defaultSnap,"defaultSnap");
	HX_VISIT_MEMBER_NAME(dummyArrow,"dummyArrow");
	HX_VISIT_MEMBER_NAME(curRenderedNotes,"curRenderedNotes");
	HX_VISIT_MEMBER_NAME(curRenderedSustains,"curRenderedSustains");
	HX_VISIT_MEMBER_NAME(gridBG,"gridBG");
	HX_VISIT_MEMBER_NAME(sectionRenderes,"sectionRenderes");
	HX_VISIT_MEMBER_NAME(typingShit,"typingShit");
	HX_VISIT_MEMBER_NAME(curSelectedNote,"curSelectedNote");
	HX_VISIT_MEMBER_NAME(tempBpm,"tempBpm");
	HX_VISIT_MEMBER_NAME(gridBlackLine,"gridBlackLine");
	HX_VISIT_MEMBER_NAME(vocals,"vocals");
	HX_VISIT_MEMBER_NAME(player2,"player2");
	HX_VISIT_MEMBER_NAME(player1,"player1");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(char2,"char2");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(lastNote,"lastNote");
	HX_VISIT_MEMBER_NAME(lines,"lines");
	HX_VISIT_MEMBER_NAME(claps,"claps");
	HX_VISIT_MEMBER_NAME(snapText,"snapText");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(waveform,"waveform");
	HX_VISIT_MEMBER_NAME(reloadOnInit,"reloadOnInit");
	HX_VISIT_MEMBER_NAME(texts,"texts");
	HX_VISIT_MEMBER_NAME(stepperDiv,"stepperDiv");
	HX_VISIT_MEMBER_NAME(check_snap,"check_snap");
	HX_VISIT_MEMBER_NAME(listOfEvents,"listOfEvents");
	HX_VISIT_MEMBER_NAME(currentSelectedEventName,"currentSelectedEventName");
	HX_VISIT_MEMBER_NAME(savedType,"savedType");
	HX_VISIT_MEMBER_NAME(savedValue,"savedValue");
	HX_VISIT_MEMBER_NAME(currentEventPosition,"currentEventPosition");
	HX_VISIT_MEMBER_NAME(chartEvents,"chartEvents");
	HX_VISIT_MEMBER_NAME(Typeables,"Typeables");
	HX_VISIT_MEMBER_NAME(stepperLength,"stepperLength");
	HX_VISIT_MEMBER_NAME(check_mustHitSection,"check_mustHitSection");
	HX_VISIT_MEMBER_NAME(check_changeBPM,"check_changeBPM");
	HX_VISIT_MEMBER_NAME(stepperSectionBPM,"stepperSectionBPM");
	HX_VISIT_MEMBER_NAME(check_CPUAltAnim,"check_CPUAltAnim");
	HX_VISIT_MEMBER_NAME(check_playerAltAnim,"check_playerAltAnim");
	HX_VISIT_MEMBER_NAME(stepperSusLength,"stepperSusLength");
	HX_VISIT_MEMBER_NAME(tab_group_note,"tab_group_note");
	HX_VISIT_MEMBER_NAME(check_naltAnim,"check_naltAnim");
	HX_VISIT_MEMBER_NAME(updatedSection,"updatedSection");
	HX_VISIT_MEMBER_NAME(writingNotes,"writingNotes");
	HX_VISIT_MEMBER_NAME(doSnapShit,"doSnapShit");
	HX_VISIT_MEMBER_NAME(diff,"diff");
	HX_VISIT_MEMBER_NAME(changeIndex,"changeIndex");
	HX_VISIT_MEMBER_NAME(currentBPM,"currentBPM");
	HX_VISIT_MEMBER_NAME(lastBPM,"lastBPM");
	HX_VISIT_MEMBER_NAME(updateFrame,"updateFrame");
	HX_VISIT_MEMBER_NAME(lastUpdatedSection,"lastUpdatedSection");
	HX_VISIT_MEMBER_NAME(shownNotes,"shownNotes");
	HX_VISIT_MEMBER_NAME(snapSelection,"snapSelection");
	HX_VISIT_MEMBER_NAME(selectedBoxes,"selectedBoxes");
	HX_VISIT_MEMBER_NAME(waitingForRelease,"waitingForRelease");
	HX_VISIT_MEMBER_NAME(selectBox,"selectBox");
	HX_VISIT_MEMBER_NAME(copiedNotes,"copiedNotes");
	HX_VISIT_MEMBER_NAME(pastedNotes,"pastedNotes");
	HX_VISIT_MEMBER_NAME(deletedNotes,"deletedNotes");
	HX_VISIT_MEMBER_NAME(selectInitialX,"selectInitialX");
	HX_VISIT_MEMBER_NAME(selectInitialY,"selectInitialY");
	HX_VISIT_MEMBER_NAME(lastAction,"lastAction");
	HX_VISIT_MEMBER_NAME(curSelectedNoteObject,"curSelectedNoteObject");
	HX_VISIT_MEMBER_NAME(daSpacing,"daSpacing");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChartingState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { return ::hx::Val( snap ); }
		if (HX_FIELD_EQ(inName,"diff") ) { return ::hx::Val( diff ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { return ::hx::Val( _file ); }
		if (HX_FIELD_EQ(inName,"speed") ) { return ::hx::Val( speed ); }
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		if (HX_FIELD_EQ(inName,"char2") ) { return ::hx::Val( char2 ); }
		if (HX_FIELD_EQ(inName,"lines") ) { return ::hx::Val( lines ); }
		if (HX_FIELD_EQ(inName,"claps") ) { return ::hx::Val( claps ); }
		if (HX_FIELD_EQ(inName,"texts") ) { return ::hx::Val( texts ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { return ::hx::Val( UI_box ); }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { return ::hx::Val( bpmTxt ); }
		if (HX_FIELD_EQ(inName,"gridBG") ) { return ::hx::Val( gridBG ); }
		if (HX_FIELD_EQ(inName,"vocals") ) { return ::hx::Val( vocals ); }
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { return ::hx::Val( curSong ); }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { return ::hx::Val( tempBpm ); }
		if (HX_FIELD_EQ(inName,"player2") ) { return ::hx::Val( player2 ); }
		if (HX_FIELD_EQ(inName,"player1") ) { return ::hx::Val( player1 ); }
		if (HX_FIELD_EQ(inName,"addGrid") ) { return ::hx::Val( addGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"poggers") ) { return ::hx::Val( poggers_dyn() ); }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { return ::hx::Val( lastBPM ); }
		if (HX_FIELD_EQ(inName,"addNote") ) { return ::hx::Val( addNote_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { return ::hx::Val( deezNuts ); }
		if (HX_FIELD_EQ(inName,"lastNote") ) { return ::hx::Val( lastNote ); }
		if (HX_FIELD_EQ(inName,"snapText") ) { return ::hx::Val( snapText ); }
		if (HX_FIELD_EQ(inName,"waveform") ) { return ::hx::Val( waveform ); }
		if (HX_FIELD_EQ(inName,"loadSong") ) { return ::hx::Val( loadSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"getEvent") ) { return ::hx::Val( getEvent_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNotes") ) { return ::hx::Val( getNotes_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadJson") ) { return ::hx::Val( loadJson_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { return ::hx::Val( playClaps ); }
		if (HX_FIELD_EQ(inName,"strumLine") ) { return ::hx::Val( strumLine ); }
		if (HX_FIELD_EQ(inName,"highlight") ) { return ::hx::Val( highlight ); }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { return ::hx::Val( GRID_SIZE ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"savedType") ) { return ::hx::Val( savedType ); }
		if (HX_FIELD_EQ(inName,"Typeables") ) { return ::hx::Val( Typeables ); }
		if (HX_FIELD_EQ(inName,"addSongUI") ) { return ::hx::Val( addSongUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addNoteUI") ) { return ::hx::Val( addNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectBox") ) { return ::hx::Val( selectBox ); }
		if (HX_FIELD_EQ(inName,"clearSong") ) { return ::hx::Val( clearSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { return ::hx::Val( daSpacing ); }
		if (HX_FIELD_EQ(inName,"loadLevel") ) { return ::hx::Val( loadLevel_dyn() ); }
		if (HX_FIELD_EQ(inName,"saveLevel") ) { return ::hx::Val( saveLevel_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { return ::hx::Val( UI_options ); }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { return ::hx::Val( beatsShown ); }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { return ::hx::Val( zoomFactor ); }
		if (HX_FIELD_EQ(inName,"curSection") ) { return ::hx::Val( curSection ); }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { return ::hx::Val( bullshitUI ); }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { return ::hx::Val( dummyArrow ); }
		if (HX_FIELD_EQ(inName,"typingShit") ) { return ::hx::Val( typingShit ); }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { return ::hx::Val( stepperDiv ); }
		if (HX_FIELD_EQ(inName,"check_snap") ) { return ::hx::Val( check_snap ); }
		if (HX_FIELD_EQ(inName,"savedValue") ) { return ::hx::Val( savedValue ); }
		if (HX_FIELD_EQ(inName,"generateUI") ) { return ::hx::Val( generateUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { return ::hx::Val( doSnapShit ); }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { return ::hx::Val( currentBPM ); }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { return ::hx::Val( shownNotes ); }
		if (HX_FIELD_EQ(inName,"lastAction") ) { return ::hx::Val( lastAction ); }
		if (HX_FIELD_EQ(inName,"updateGrid") ) { return ::hx::Val( updateGrid_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSection") ) { return ::hx::Val( addSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"selectNote") ) { return ::hx::Val( selectNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"deleteNote") ) { return ::hx::Val( deleteNote_dyn() ); }
		if (HX_FIELD_EQ(inName,"newSection") ) { return ::hx::Val( newSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"shiftNotes") ) { return ::hx::Val( shiftNotes_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { return ::hx::Val( amountSteps ); }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { return ::hx::Val( defaultSnap ); }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { return ::hx::Val( chartEvents ); }
		if (HX_FIELD_EQ(inName,"addEventsUI") ) { return ::hx::Val( addEventsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToSection") ) { return ::hx::Val( goToSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"swapSection") ) { return ::hx::Val( swapSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { return ::hx::Val( changeIndex ); }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { return ::hx::Val( updateFrame ); }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { return ::hx::Val( copiedNotes ); }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { return ::hx::Val( pastedNotes ); }
		if (HX_FIELD_EQ(inName,"copySection") ) { return ::hx::Val( copySection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateHeads") ) { return ::hx::Val( updateHeads_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return ::hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { return ::hx::Val( subDivisions ); }
		if (HX_FIELD_EQ(inName,"reloadOnInit") ) { return ::hx::Val( reloadOnInit ); }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { return ::hx::Val( listOfEvents ); }
		if (HX_FIELD_EQ(inName,"containsName") ) { return ::hx::Val( containsName_dyn() ); }
		if (HX_FIELD_EQ(inName,"addOptionsUI") ) { return ::hx::Val( addOptionsUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"addSectionUI") ) { return ::hx::Val( addSectionUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { return ::hx::Val( writingNotes ); }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { return ::hx::Val( deletedNotes ); }
		if (HX_FIELD_EQ(inName,"resetSection") ) { return ::hx::Val( resetSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateNoteUI") ) { return ::hx::Val( updateNoteUI_dyn() ); }
		if (HX_FIELD_EQ(inName,"clearSection") ) { return ::hx::Val( clearSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getStrumTime") ) { return ::hx::Val( getStrumTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadAutosave") ) { return ::hx::Val( loadAutosave_dyn() ); }
		if (HX_FIELD_EQ(inName,"autosaveSong") ) { return ::hx::Val( autosaveSong_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return ::hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { return ::hx::Val( gridBlackLine ); }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { return ::hx::Val( stepperLength ); }
		if (HX_FIELD_EQ(inName,"stepStartTime") ) { return ::hx::Val( stepStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { return ::hx::Val( snapSelection ); }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { return ::hx::Val( selectedBoxes ); }
		if (HX_FIELD_EQ(inName,"changeSection") ) { return ::hx::Val( changeSection_dyn() ); }
		if (HX_FIELD_EQ(inName,"getNoteByTime") ) { return ::hx::Val( getNoteByTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"getYfromStrum") ) { return ::hx::Val( getYfromStrum_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { return ::hx::Val( tab_group_note ); }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { return ::hx::Val( check_naltAnim ); }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { return ::hx::Val( updatedSection ); }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { return ::hx::Val( selectInitialX ); }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { return ::hx::Val( selectInitialY ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return ::hx::Val( onSaveComplete_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { return ::hx::Val( sectionRenderes ); }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { return ::hx::Val( curSelectedNote ); }
		if (HX_FIELD_EQ(inName,"regenerateLines") ) { return ::hx::Val( regenerateLines_dyn() ); }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { return ::hx::Val( check_changeBPM ); }
		if (HX_FIELD_EQ(inName,"updateSectionUI") ) { return ::hx::Val( updateSectionUI_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { return ::hx::Val( writingNotesText ); }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { return ::hx::Val( curRenderedNotes ); }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { return ::hx::Val( check_CPUAltAnim ); }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { return ::hx::Val( stepperSusLength ); }
		if (HX_FIELD_EQ(inName,"sectionStartTime") ) { return ::hx::Val( sectionStartTime_dyn() ); }
		if (HX_FIELD_EQ(inName,"resizeEverything") ) { return ::hx::Val( resizeEverything_dyn() ); }
		if (HX_FIELD_EQ(inName,"getSectionByTime") ) { return ::hx::Val( getSectionByTime_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { return ::hx::Val( stepperSectionBPM ); }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { return ::hx::Val( waitingForRelease ); }
		if (HX_FIELD_EQ(inName,"changeNoteSustain") ) { return ::hx::Val( changeNoteSustain_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { return ::hx::Val( lastUpdatedSection ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { return ::hx::Val( curRenderedSustains ); }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { return ::hx::Val( check_playerAltAnim ); }
		if (HX_FIELD_EQ(inName,"pasteNotesFromArray") ) { return ::hx::Val( pasteNotesFromArray_dyn() ); }
		if (HX_FIELD_EQ(inName,"offsetSelectedNotes") ) { return ::hx::Val( offsetSelectedNotes_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { return ::hx::Val( currentEventPosition ); }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { return ::hx::Val( check_mustHitSection ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { return ::hx::Val( curSelectedNoteObject ); }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { return ::hx::Val( currentSelectedEventName ); }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"recalculateAllSectionTimes") ) { return ::hx::Val( recalculateAllSectionTimes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ChartingState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { outValue = ( _song ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { outValue = ( instance ); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { outValue = ( leftIcon ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { outValue = ( rightIcon ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { outValue = ( lastSection ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { outValue = ( lengthInSteps ); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { outValue = ( lengthInBeats ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { outValue = ( latestChartVersion ); return true; }
	}
	return false;
}

::hx::Val ChartingState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"snap") ) { snap=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diff") ) { diff=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"_file") ) { _file=inValue.Cast<  ::openfl::net::FileReference >(); return inValue; }
		if (HX_FIELD_EQ(inName,"speed") ) { speed=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"char2") ) { char2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lines") ) { lines=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"claps") ) { claps=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"texts") ) { texts=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"UI_box") ) { UI_box=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bpmTxt") ) { bpmTxt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"gridBG") ) { gridBG=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"vocals") ) { vocals=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curSong") ) { curSong=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tempBpm") ) { tempBpm=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player2") ) { player2=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player1") ) { player1=inValue.Cast<  ::Boyfriend >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastBPM") ) { lastBPM=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"deezNuts") ) { deezNuts=inValue.Cast<  ::haxe::ds::IntMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastNote") ) { lastNote=inValue.Cast<  ::Note >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapText") ) { snapText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waveform") ) { waveform=inValue.Cast<  ::Waveform >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"playClaps") ) { playClaps=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strumLine") ) { strumLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"highlight") ) { highlight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"GRID_SIZE") ) { GRID_SIZE=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedType") ) { savedType=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"Typeables") ) { Typeables=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectBox") ) { selectBox=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"daSpacing") ) { daSpacing=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"UI_options") ) { UI_options=inValue.Cast<  ::flixel::addons::ui::FlxUITabMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"beatsShown") ) { beatsShown=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"zoomFactor") ) { zoomFactor=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSection") ) { curSection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bullshitUI") ) { bullshitUI=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dummyArrow") ) { dummyArrow=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"typingShit") ) { typingShit=inValue.Cast<  ::flixel::addons::ui::FlxInputText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperDiv") ) { stepperDiv=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_snap") ) { check_snap=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"savedValue") ) { savedValue=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"doSnapShit") ) { doSnapShit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"currentBPM") ) { currentBPM=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shownNotes") ) { shownNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastAction") ) { lastAction=inValue.Cast< ::String >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"amountSteps") ) { amountSteps=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"defaultSnap") ) { defaultSnap=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chartEvents") ) { chartEvents=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"changeIndex") ) { changeIndex=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateFrame") ) { updateFrame=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"copiedNotes") ) { copiedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pastedNotes") ) { pastedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"subDivisions") ) { subDivisions=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"reloadOnInit") ) { reloadOnInit=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"listOfEvents") ) { listOfEvents=inValue.Cast<  ::flixel::addons::ui::FlxUIDropDownMenu >(); return inValue; }
		if (HX_FIELD_EQ(inName,"writingNotes") ) { writingNotes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"deletedNotes") ) { deletedNotes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gridBlackLine") ) { gridBlackLine=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperLength") ) { stepperLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"snapSelection") ) { snapSelection=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectedBoxes") ) { selectedBoxes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"tab_group_note") ) { tab_group_note=inValue.Cast<  ::flixel::addons::ui::FlxUI >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_naltAnim") ) { check_naltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updatedSection") ) { updatedSection=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialX") ) { selectInitialX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selectInitialY") ) { selectInitialY=inValue.Cast< Float >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"sectionRenderes") ) { sectionRenderes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curSelectedNote") ) { curSelectedNote=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_changeBPM") ) { check_changeBPM=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"writingNotesText") ) { writingNotesText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"curRenderedNotes") ) { curRenderedNotes=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_CPUAltAnim") ) { check_CPUAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stepperSusLength") ) { stepperSusLength=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"stepperSectionBPM") ) { stepperSectionBPM=inValue.Cast<  ::flixel::addons::ui::FlxUINumericStepper >(); return inValue; }
		if (HX_FIELD_EQ(inName,"waitingForRelease") ) { waitingForRelease=inValue.Cast< bool >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"lastUpdatedSection") ) { lastUpdatedSection=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"curRenderedSustains") ) { curRenderedSustains=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_playerAltAnim") ) { check_playerAltAnim=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"currentEventPosition") ) { currentEventPosition=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check_mustHitSection") ) { check_mustHitSection=inValue.Cast<  ::flixel::addons::ui::FlxUICheckBox >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"curSelectedNoteObject") ) { curSelectedNoteObject=inValue.Cast<  ::Note >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"currentSelectedEventName") ) { currentSelectedEventName=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ChartingState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"_song") ) { _song=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"instance") ) { instance=ioValue.Cast<  ::ChartingState >(); return true; }
		if (HX_FIELD_EQ(inName,"leftIcon") ) { leftIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"rightIcon") ) { rightIcon=ioValue.Cast<  ::HealthIcon >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"lastSection") ) { lastSection=ioValue.Cast< int >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lengthInSteps") ) { lengthInSteps=ioValue.Cast< Float >(); return true; }
		if (HX_FIELD_EQ(inName,"lengthInBeats") ) { lengthInBeats=ioValue.Cast< Float >(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"latestChartVersion") ) { latestChartVersion=ioValue.Cast< ::String >(); return true; }
	}
	return false;
}

void ChartingState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_file",5b,ea,cc,f6));
	outFields->push(HX_("playClaps",07,a3,3c,69));
	outFields->push(HX_("snap",4a,56,57,4c));
	outFields->push(HX_("deezNuts",dc,76,82,94));
	outFields->push(HX_("UI_box",60,07,ac,43));
	outFields->push(HX_("UI_options",33,4b,47,19));
	outFields->push(HX_("speed",87,97,69,81));
	outFields->push(HX_("beatsShown",54,d5,f6,63));
	outFields->push(HX_("zoomFactor",42,c0,4e,b4));
	outFields->push(HX_("curSection",45,58,c1,68));
	outFields->push(HX_("bpmTxt",d1,bc,26,f4));
	outFields->push(HX_("strumLine",dd,79,d7,ee));
	outFields->push(HX_("curSong",75,95,6d,b7));
	outFields->push(HX_("amountSteps",af,2a,91,a5));
	outFields->push(HX_("bullshitUI",67,a9,a3,d3));
	outFields->push(HX_("writingNotesText",12,02,e7,d3));
	outFields->push(HX_("highlight",34,56,00,ed));
	outFields->push(HX_("GRID_SIZE",1a,98,25,c9));
	outFields->push(HX_("subDivisions",06,31,26,2c));
	outFields->push(HX_("defaultSnap",ab,4f,16,1e));
	outFields->push(HX_("dummyArrow",81,8a,75,ae));
	outFields->push(HX_("curRenderedNotes",2c,e1,fb,dc));
	outFields->push(HX_("curRenderedSustains",65,b2,8a,50));
	outFields->push(HX_("gridBG",0b,ce,23,18));
	outFields->push(HX_("sectionRenderes",49,74,65,eb));
	outFields->push(HX_("typingShit",d7,01,ec,6a));
	outFields->push(HX_("curSelectedNote",8d,49,f4,47));
	outFields->push(HX_("tempBpm",2b,d8,ac,46));
	outFields->push(HX_("gridBlackLine",ad,65,ea,f8));
	outFields->push(HX_("vocals",5e,10,51,59));
	outFields->push(HX_("player2",b1,09,15,8a));
	outFields->push(HX_("player1",b0,09,15,8a));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("char2",9c,9c,b3,45));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("lastNote",68,31,53,dc));
	outFields->push(HX_("lines",ff,dd,01,75));
	outFields->push(HX_("claps",9b,75,58,48));
	outFields->push(HX_("snapText",17,3c,34,0d));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("waveform",7d,97,6a,f1));
	outFields->push(HX_("reloadOnInit",08,94,6f,bc));
	outFields->push(HX_("texts",26,4b,99,0d));
	outFields->push(HX_("stepperDiv",c0,b0,21,f4));
	outFields->push(HX_("check_snap",61,04,2b,7c));
	outFields->push(HX_("listOfEvents",0e,f6,f0,91));
	outFields->push(HX_("currentSelectedEventName",31,61,08,a9));
	outFields->push(HX_("savedType",e1,b8,73,c7));
	outFields->push(HX_("savedValue",6a,1b,bb,d4));
	outFields->push(HX_("currentEventPosition",ea,92,90,06));
	outFields->push(HX_("chartEvents",97,5a,ec,fc));
	outFields->push(HX_("Typeables",7f,44,75,ee));
	outFields->push(HX_("stepperLength",d7,b0,3a,4b));
	outFields->push(HX_("check_mustHitSection",12,30,fc,78));
	outFields->push(HX_("check_changeBPM",d8,2d,43,fc));
	outFields->push(HX_("stepperSectionBPM",6b,ba,b7,95));
	outFields->push(HX_("check_CPUAltAnim",09,09,2a,93));
	outFields->push(HX_("check_playerAltAnim",82,25,63,ff));
	outFields->push(HX_("stepperSusLength",06,e6,fc,95));
	outFields->push(HX_("tab_group_note",1c,75,04,82));
	outFields->push(HX_("check_naltAnim",c3,02,1a,86));
	outFields->push(HX_("updatedSection",ea,f8,55,de));
	outFields->push(HX_("writingNotes",c5,c2,9a,1c));
	outFields->push(HX_("doSnapShit",d5,55,02,7a));
	outFields->push(HX_("diff",05,5c,69,42));
	outFields->push(HX_("changeIndex",82,43,da,e3));
	outFields->push(HX_("currentBPM",26,68,25,c7));
	outFields->push(HX_("lastBPM",29,ea,9f,d7));
	outFields->push(HX_("updateFrame",64,e1,1b,ec));
	outFields->push(HX_("lastUpdatedSection",e0,c1,dd,e5));
	outFields->push(HX_("shownNotes",b0,2d,1a,63));
	outFields->push(HX_("snapSelection",a2,68,82,ba));
	outFields->push(HX_("selectedBoxes",de,ca,40,ad));
	outFields->push(HX_("waitingForRelease",ab,09,c5,09));
	outFields->push(HX_("selectBox",6f,60,fd,8d));
	outFields->push(HX_("copiedNotes",5d,6e,3c,8c));
	outFields->push(HX_("pastedNotes",d0,74,74,81));
	outFields->push(HX_("deletedNotes",a8,13,ac,60));
	outFields->push(HX_("selectInitialX",70,96,c1,b8));
	outFields->push(HX_("selectInitialY",71,96,c1,b8));
	outFields->push(HX_("lastAction",ac,1e,21,e1));
	outFields->push(HX_("curSelectedNoteObject",2c,64,f7,86));
	outFields->push(HX_("daSpacing",86,9d,76,71));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChartingState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::openfl::net::FileReference */ ,(int)offsetof(ChartingState_obj,_file),HX_("_file",5b,ea,cc,f6)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,playClaps),HX_("playClaps",07,a3,3c,69)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snap),HX_("snap",4a,56,57,4c)},
	{::hx::fsObject /*  ::haxe::ds::IntMap */ ,(int)offsetof(ChartingState_obj,deezNuts),HX_("deezNuts",dc,76,82,94)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_box),HX_("UI_box",60,07,ac,43)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUITabMenu */ ,(int)offsetof(ChartingState_obj,UI_options),HX_("UI_options",33,4b,47,19)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,speed),HX_("speed",87,97,69,81)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,beatsShown),HX_("beatsShown",54,d5,f6,63)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,zoomFactor),HX_("zoomFactor",42,c0,4e,b4)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,curSection),HX_("curSection",45,58,c1,68)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,bpmTxt),HX_("bpmTxt",d1,bc,26,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,strumLine),HX_("strumLine",dd,79,d7,ee)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,curSong),HX_("curSong",75,95,6d,b7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,amountSteps),HX_("amountSteps",af,2a,91,a5)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,bullshitUI),HX_("bullshitUI",67,a9,a3,d3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,writingNotesText),HX_("writingNotesText",12,02,e7,d3)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,highlight),HX_("highlight",34,56,00,ed)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,GRID_SIZE),HX_("GRID_SIZE",1a,98,25,c9)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,subDivisions),HX_("subDivisions",06,31,26,2c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,defaultSnap),HX_("defaultSnap",ab,4f,16,1e)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,dummyArrow),HX_("dummyArrow",81,8a,75,ae)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedNotes),HX_("curRenderedNotes",2c,e1,fb,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,curRenderedSustains),HX_("curRenderedSustains",65,b2,8a,50)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBG),HX_("gridBG",0b,ce,23,18)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,sectionRenderes),HX_("sectionRenderes",49,74,65,eb)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxInputText */ ,(int)offsetof(ChartingState_obj,typingShit),HX_("typingShit",d7,01,ec,6a)},
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(ChartingState_obj,curSelectedNote),HX_("curSelectedNote",8d,49,f4,47)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,tempBpm),HX_("tempBpm",2b,d8,ac,46)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,gridBlackLine),HX_("gridBlackLine",ad,65,ea,f8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(ChartingState_obj,vocals),HX_("vocals",5e,10,51,59)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,player2),HX_("player2",b1,09,15,8a)},
	{::hx::fsObject /*  ::Boyfriend */ ,(int)offsetof(ChartingState_obj,player1),HX_("player1",b0,09,15,8a)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(ChartingState_obj,char2),HX_("char2",9c,9c,b3,45)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,lastNote),HX_("lastNote",68,31,53,dc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,lines),HX_("lines",ff,dd,01,75)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,claps),HX_("claps",9b,75,58,48)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(ChartingState_obj,snapText),HX_("snapText",17,3c,34,0d)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(ChartingState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::Waveform */ ,(int)offsetof(ChartingState_obj,waveform),HX_("waveform",7d,97,6a,f1)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,reloadOnInit),HX_("reloadOnInit",08,94,6f,bc)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,texts),HX_("texts",26,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperDiv),HX_("stepperDiv",c0,b0,21,f4)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_snap),HX_("check_snap",61,04,2b,7c)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUIDropDownMenu */ ,(int)offsetof(ChartingState_obj,listOfEvents),HX_("listOfEvents",0e,f6,f0,91)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,currentSelectedEventName),HX_("currentSelectedEventName",31,61,08,a9)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedType),HX_("savedType",e1,b8,73,c7)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,savedValue),HX_("savedValue",6a,1b,bb,d4)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentEventPosition),HX_("currentEventPosition",ea,92,90,06)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,chartEvents),HX_("chartEvents",97,5a,ec,fc)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,Typeables),HX_("Typeables",7f,44,75,ee)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperLength),HX_("stepperLength",d7,b0,3a,4b)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_mustHitSection),HX_("check_mustHitSection",12,30,fc,78)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_changeBPM),HX_("check_changeBPM",d8,2d,43,fc)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSectionBPM),HX_("stepperSectionBPM",6b,ba,b7,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_CPUAltAnim),HX_("check_CPUAltAnim",09,09,2a,93)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_playerAltAnim),HX_("check_playerAltAnim",82,25,63,ff)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUINumericStepper */ ,(int)offsetof(ChartingState_obj,stepperSusLength),HX_("stepperSusLength",06,e6,fc,95)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUI */ ,(int)offsetof(ChartingState_obj,tab_group_note),HX_("tab_group_note",1c,75,04,82)},
	{::hx::fsObject /*  ::flixel::addons::ui::FlxUICheckBox */ ,(int)offsetof(ChartingState_obj,check_naltAnim),HX_("check_naltAnim",c3,02,1a,86)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,updatedSection),HX_("updatedSection",ea,f8,55,de)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,writingNotes),HX_("writingNotes",c5,c2,9a,1c)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,doSnapShit),HX_("doSnapShit",d5,55,02,7a)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,diff),HX_("diff",05,5c,69,42)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,changeIndex),HX_("changeIndex",82,43,da,e3)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,currentBPM),HX_("currentBPM",26,68,25,c7)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,lastBPM),HX_("lastBPM",29,ea,9f,d7)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,updateFrame),HX_("updateFrame",64,e1,1b,ec)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(ChartingState_obj,lastUpdatedSection),HX_("lastUpdatedSection",e0,c1,dd,e5)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,shownNotes),HX_("shownNotes",b0,2d,1a,63)},
	{::hx::fsInt,(int)offsetof(ChartingState_obj,snapSelection),HX_("snapSelection",a2,68,82,ba)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(ChartingState_obj,selectedBoxes),HX_("selectedBoxes",de,ca,40,ad)},
	{::hx::fsBool,(int)offsetof(ChartingState_obj,waitingForRelease),HX_("waitingForRelease",ab,09,c5,09)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChartingState_obj,selectBox),HX_("selectBox",6f,60,fd,8d)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,copiedNotes),HX_("copiedNotes",5d,6e,3c,8c)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,pastedNotes),HX_("pastedNotes",d0,74,74,81)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(ChartingState_obj,deletedNotes),HX_("deletedNotes",a8,13,ac,60)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialX),HX_("selectInitialX",70,96,c1,b8)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,selectInitialY),HX_("selectInitialY",71,96,c1,b8)},
	{::hx::fsString,(int)offsetof(ChartingState_obj,lastAction),HX_("lastAction",ac,1e,21,e1)},
	{::hx::fsObject /*  ::Note */ ,(int)offsetof(ChartingState_obj,curSelectedNoteObject),HX_("curSelectedNoteObject",2c,64,f7,86)},
	{::hx::fsFloat,(int)offsetof(ChartingState_obj,daSpacing),HX_("daSpacing",86,9d,76,71)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo ChartingState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::ChartingState */ ,(void *) &ChartingState_obj::instance,HX_("instance",95,1f,e1,59)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInSteps,HX_("lengthInSteps",3c,ed,41,db)},
	{::hx::fsFloat,(void *) &ChartingState_obj::lengthInBeats,HX_("lengthInBeats",d2,d7,84,07)},
	{::hx::fsInt,(void *) &ChartingState_obj::lastSection,HX_("lastSection",2f,ba,83,12)},
	{::hx::fsObject /*  ::Dynamic */ ,(void *) &ChartingState_obj::_song,HX_("_song",b4,3f,69,ff)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::leftIcon,HX_("leftIcon",20,2b,ae,4c)},
	{::hx::fsObject /*  ::HealthIcon */ ,(void *) &ChartingState_obj::rightIcon,HX_("rightIcon",75,3d,79,b0)},
	{::hx::fsString,(void *) &ChartingState_obj::latestChartVersion,HX_("latestChartVersion",c1,89,05,09)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String ChartingState_obj_sMemberFields[] = {
	HX_("_file",5b,ea,cc,f6),
	HX_("playClaps",07,a3,3c,69),
	HX_("snap",4a,56,57,4c),
	HX_("deezNuts",dc,76,82,94),
	HX_("UI_box",60,07,ac,43),
	HX_("UI_options",33,4b,47,19),
	HX_("speed",87,97,69,81),
	HX_("beatsShown",54,d5,f6,63),
	HX_("zoomFactor",42,c0,4e,b4),
	HX_("curSection",45,58,c1,68),
	HX_("bpmTxt",d1,bc,26,f4),
	HX_("strumLine",dd,79,d7,ee),
	HX_("curSong",75,95,6d,b7),
	HX_("amountSteps",af,2a,91,a5),
	HX_("bullshitUI",67,a9,a3,d3),
	HX_("writingNotesText",12,02,e7,d3),
	HX_("highlight",34,56,00,ed),
	HX_("GRID_SIZE",1a,98,25,c9),
	HX_("subDivisions",06,31,26,2c),
	HX_("defaultSnap",ab,4f,16,1e),
	HX_("dummyArrow",81,8a,75,ae),
	HX_("curRenderedNotes",2c,e1,fb,dc),
	HX_("curRenderedSustains",65,b2,8a,50),
	HX_("gridBG",0b,ce,23,18),
	HX_("sectionRenderes",49,74,65,eb),
	HX_("typingShit",d7,01,ec,6a),
	HX_("curSelectedNote",8d,49,f4,47),
	HX_("tempBpm",2b,d8,ac,46),
	HX_("gridBlackLine",ad,65,ea,f8),
	HX_("vocals",5e,10,51,59),
	HX_("player2",b1,09,15,8a),
	HX_("player1",b0,09,15,8a),
	HX_("char1",9b,9c,b3,45),
	HX_("char2",9c,9c,b3,45),
	HX_("height",e7,07,4c,02),
	HX_("lastNote",68,31,53,dc),
	HX_("lines",ff,dd,01,75),
	HX_("claps",9b,75,58,48),
	HX_("snapText",17,3c,34,0d),
	HX_("camFollow",e0,6e,47,22),
	HX_("waveform",7d,97,6a,f1),
	HX_("reloadOnInit",08,94,6f,bc),
	HX_("create",fc,66,0f,7c),
	HX_("texts",26,4b,99,0d),
	HX_("regenerateLines",f7,b6,ed,41),
	HX_("addGrid",87,19,a9,80),
	HX_("stepperDiv",c0,b0,21,f4),
	HX_("check_snap",61,04,2b,7c),
	HX_("listOfEvents",0e,f6,f0,91),
	HX_("currentSelectedEventName",31,61,08,a9),
	HX_("savedType",e1,b8,73,c7),
	HX_("savedValue",6a,1b,bb,d4),
	HX_("currentEventPosition",ea,92,90,06),
	HX_("containsName",0a,f4,74,a3),
	HX_("chartEvents",97,5a,ec,fc),
	HX_("Typeables",7f,44,75,ee),
	HX_("addEventsUI",ee,88,4b,f2),
	HX_("addOptionsUI",d1,b2,cc,81),
	HX_("addSongUI",6a,02,ad,e5),
	HX_("stepperLength",d7,b0,3a,4b),
	HX_("check_mustHitSection",12,30,fc,78),
	HX_("check_changeBPM",d8,2d,43,fc),
	HX_("stepperSectionBPM",6b,ba,b7,95),
	HX_("check_CPUAltAnim",09,09,2a,93),
	HX_("check_playerAltAnim",82,25,63,ff),
	HX_("addSectionUI",18,75,a5,87),
	HX_("stepperSusLength",06,e6,fc,95),
	HX_("tab_group_note",1c,75,04,82),
	HX_("goToSection",62,3e,06,69),
	HX_("check_naltAnim",c3,02,1a,86),
	HX_("addNoteUI",c7,f7,d9,e9),
	HX_("pasteNotesFromArray",01,3e,59,19),
	HX_("offsetSelectedNotes",53,f0,11,08),
	HX_("loadSong",1b,f5,f7,bc),
	HX_("generateUI",c9,a0,60,4e),
	HX_("getEvent",a4,d7,9b,d5),
	HX_("updatedSection",ea,f8,55,de),
	HX_("poggers",e7,c2,a8,25),
	HX_("stepStartTime",a3,f4,4d,c0),
	HX_("sectionStartTime",ea,ba,df,45),
	HX_("writingNotes",c5,c2,9a,1c),
	HX_("doSnapShit",d5,55,02,7a),
	HX_("swapSection",92,cb,3b,65),
	HX_("diff",05,5c,69,42),
	HX_("changeIndex",82,43,da,e3),
	HX_("currentBPM",26,68,25,c7),
	HX_("lastBPM",29,ea,9f,d7),
	HX_("updateFrame",64,e1,1b,ec),
	HX_("lastUpdatedSection",e0,c1,dd,e5),
	HX_("resizeEverything",87,a1,09,4d),
	HX_("shownNotes",b0,2d,1a,63),
	HX_("snapSelection",a2,68,82,ba),
	HX_("selectedBoxes",de,ca,40,ad),
	HX_("waitingForRelease",ab,09,c5,09),
	HX_("selectBox",6f,60,fd,8d),
	HX_("copiedNotes",5d,6e,3c,8c),
	HX_("pastedNotes",d0,74,74,81),
	HX_("deletedNotes",a8,13,ac,60),
	HX_("selectInitialX",70,96,c1,b8),
	HX_("selectInitialY",71,96,c1,b8),
	HX_("lastAction",ac,1e,21,e1),
	HX_("update",09,86,05,87),
	HX_("changeNoteSustain",41,6b,40,3c),
	HX_("resetSection",d6,4b,b6,cf),
	HX_("changeSection",55,aa,ac,be),
	HX_("copySection",b0,82,ec,b3),
	HX_("updateSectionUI",30,24,dc,d7),
	HX_("updateHeads",8a,3c,51,0a),
	HX_("updateNoteUI",af,69,79,31),
	HX_("updateGrid",6f,c1,20,fd),
	HX_("addSection",c4,31,62,c5),
	HX_("selectNote",0e,8d,a5,b7),
	HX_("deleteNote",bd,f5,56,9c),
	HX_("clearSection",d8,b7,56,39),
	HX_("clearSong",02,0c,19,c0),
	HX_("newSection",65,29,da,9a),
	HX_("recalculateAllSectionTimes",4f,b8,31,bc),
	HX_("shiftNotes",5f,c8,22,af),
	HX_("getSectionByTime",d3,a2,dd,1e),
	HX_("getNoteByTime",4c,ef,d1,0c),
	HX_("curSelectedNoteObject",2c,64,f7,86),
	HX_("addNote",b3,5a,47,85),
	HX_("getStrumTime",80,ca,77,03),
	HX_("getYfromStrum",1c,4c,46,78),
	HX_("daSpacing",86,9d,76,71),
	HX_("loadLevel",7e,61,9a,8d),
	HX_("getNotes",cb,eb,a1,ff),
	HX_("loadJson",6e,13,08,b7),
	HX_("loadAutosave",72,3a,03,fe),
	HX_("autosaveSong",21,24,ac,67),
	HX_("saveLevel",07,1d,10,01),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

static void ChartingState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_MARK_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_MARK_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_MARK_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_MARK_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ChartingState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ChartingState_obj::instance,"instance");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInSteps,"lengthInSteps");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lengthInBeats,"lengthInBeats");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::lastSection,"lastSection");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::_song,"_song");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::leftIcon,"leftIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::rightIcon,"rightIcon");
	HX_VISIT_MEMBER_NAME(ChartingState_obj::latestChartVersion,"latestChartVersion");
};

#endif

::hx::Class ChartingState_obj::__mClass;

static ::String ChartingState_obj_sStaticFields[] = {
	HX_("instance",95,1f,e1,59),
	HX_("lengthInSteps",3c,ed,41,db),
	HX_("lengthInBeats",d2,d7,84,07),
	HX_("lastSection",2f,ba,83,12),
	HX_("_song",b4,3f,69,ff),
	HX_("leftIcon",20,2b,ae,4c),
	HX_("rightIcon",75,3d,79,b0),
	HX_("latestChartVersion",c1,89,05,09),
	::String(null())
};

void ChartingState_obj::__register()
{
	ChartingState_obj _hx_dummy;
	ChartingState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChartingState",8d,e0,dd,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ChartingState_obj::__GetStatic;
	__mClass->mSetStaticField = &ChartingState_obj::__SetStatic;
	__mClass->mMarkFunc = ChartingState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ChartingState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChartingState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChartingState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ChartingState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChartingState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChartingState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ChartingState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_69_boot)
HXDLIN(  69)		lengthInSteps = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_70_boot)
HXDLIN(  70)		lengthInBeats = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_83_boot)
HXDLIN(  83)		lastSection = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_c8186eee1bd9a607_145_boot)
HXDLIN( 145)		latestChartVersion = HX_("2",32,00,00,00);
            	}
}

