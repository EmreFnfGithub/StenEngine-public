// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Character
#include <Character.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CoolUtil
#include <CoolUtil.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_CustomState
#include <CustomState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_EasterEggTitleState
#include <EasterEggTitleState.h>
#endif
#ifndef INCLUDED_EditorsMain
#include <EditorsMain.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_ModsMenuState
#include <ModsMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_NotePad
#include <NotePad.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_StageEditor
#include <StageEditor.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_TitleState
#include <TitleState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxButton
#include <flixel/ui/FlxButton.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxTypedButton_flixel_text_FlxText
#include <flixel/ui/FlxTypedButton_flixel_text_FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_funkinMedia_FunkinMedia
#include <funkinMedia/FunkinMedia.h>
#endif
#ifndef INCLUDED_miniGames_MiniGamesState
#include <miniGames/MiniGamesState.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif
#ifndef INCLUDED_options_MenuOptions
#include <options/MenuOptions.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_42_new,"MainMenuState","new",0x83a7c9cb,"MainMenuState.new","MainMenuState.hx",42,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_94_create,"MainMenuState","create",0x6b76e271,"MainMenuState.create","MainMenuState.hx",94,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_320_OnClickButton,"MainMenuState","OnClickButton",0xf0183286,"MainMenuState.OnClickButton","MainMenuState.hx",320,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_539_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",539,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_334_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",334,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_498_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",498,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_504_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",504,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_514_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",514,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_521_update,"MainMenuState","update",0x766d017e,"MainMenuState.update","MainMenuState.hx",521,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_551_stageEditorFunc,"MainMenuState","stageEditorFunc",0xae54a9da,"MainMenuState.stageEditorFunc","MainMenuState.hx",551,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_554_goToState,"MainMenuState","goToState",0xcf6f00f9,"MainMenuState.goToState","MainMenuState.hx",554,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_599_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",599,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_590_changeItem,"MainMenuState","changeItem",0xf62bd498,"MainMenuState.changeItem","MainMenuState.hx",590,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_44_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",44,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_45_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",45,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_46_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",46,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_47_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",47,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_48_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",48,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_80_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",80,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_82_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",82,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_84_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",84,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_85_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",85,0x0e5db805)
HX_LOCAL_STACK_FRAME(_hx_pos_b0351dbbcbe2d566_91_boot,"MainMenuState","boot",0xa741c867,"MainMenuState.boot","MainMenuState.hx",91,0x0e5db805)

void MainMenuState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_42_new)
HXLINE( 332)		this->selec =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1180,(::flixel::FlxG_obj::height - 20),0,HX_("",00,00,00,00),12,null());
HXLINE( 331)		this->selectedSomethin = false;
HXLINE(  66)		::String library = null();
HXDLIN(  66)		this->optionShit = ::CoolUtil_obj::coolTextFile(::Paths_obj::getPath((HX_("data/MainMenuItems",63,18,c8,9e) + HX_(".txt",02,3f,c0,1e)),HX_("TEXT",ad,94,ba,37),library));
HXLINE(  61)		this->Editorsmainyes = false;
HXLINE(  53)		this->its = true;
HXLINE(  51)		this->updateAvailable = false;
HXLINE(  50)		this->curSelected = 0;
HXLINE(  42)		super::__construct(TransIn,TransOut);
            	}

Dynamic MainMenuState_obj::__CreateEmpty() { return new MainMenuState_obj; }

void *MainMenuState_obj::_hx_vtable = 0;

Dynamic MainMenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MainMenuState_obj > _hx_result = new MainMenuState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool MainMenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x2f064378) {
			if (inClassId<=(int)0x23a57bae) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x23a57bae;
			} else {
				return inClassId==(int)0x2f064378;
			}
		} else {
			return inClassId==(int)0x3f706236 || inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x6915cded || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void MainMenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_94_create)
HXLINE(  97)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("redesignedmenustyle",62,d6,f1,d5),::hx::paccDynamic),HX_("On",3f,45,00,00) )) {
HXLINE(  99)			::MainMenuState_obj::redesignedmenustyle = true;
            		}
            		else {
HXLINE( 102)			::MainMenuState_obj::redesignedmenustyle = false;
            		}
HXLINE( 105)		this->clean();
HXLINE( 106)		::PlayState_obj::inDaPlay = false;
HXLINE( 109)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE( 112)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE( 114)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 114)			::String library = null();
HXDLIN( 114)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
            		}
HXLINE( 117)		this->transIn = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransIn;
HXLINE( 118)		this->transOut = ::flixel::addons::transition::FlxTransitionableState_obj::defaultTransOut;
HXLINE( 120)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE( 125)		Float yScroll = ::Math_obj::max((((Float)0.25) - (((Float)0.05) * ( (Float)((this->optionShit->length - 4)) ))),((Float)0.1));
HXLINE( 126)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 126)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 127)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 128)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 129)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE( 130)		bg1->updateHitbox();
HXLINE( 131)		{
HXLINE( 131)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 131)			bool _hx_tmp;
HXDLIN( 131)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 131)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 131)					_hx_tmp = false;
            				}
            			}
HXDLIN( 131)			if (_hx_tmp) {
HXLINE( 131)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 131)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 131)			bool _hx_tmp1;
HXDLIN( 131)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 131)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 131)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 131)			if (_hx_tmp1) {
HXLINE( 131)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 131)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 132)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 133)		bg1->set_color(::flixel::FlxG_obj::random->color(null(),null(),null(),null()));
HXLINE( 134)		this->add(bg1);
HXLINE( 136)		if ((::MainMenuState_obj::redesignedmenustyle == true)) {
HXLINE( 138)			 ::flixel::FlxSprite redesignedbg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN( 138)			 ::flixel::FlxSprite redesignedbg1 = redesignedbg->loadGraphic(::Paths_obj::loadImage(HX_("no/ohno",68,51,59,99),null()),null(),null(),null(),null(),null());
HXLINE( 139)			redesignedbg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 140)			redesignedbg1->scrollFactor->set_y(((Float)0.10));
HXLINE( 141)			redesignedbg1->setGraphicSize(::Std_obj::_hx_int((redesignedbg1->get_width() * ((Float)1.1))),null());
HXLINE( 142)			redesignedbg1->updateHitbox();
HXLINE( 143)			{
HXLINE( 143)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 143)				bool _hx_tmp;
HXDLIN( 143)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 143)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 143)						_hx_tmp = false;
            					}
            				}
HXDLIN( 143)				if (_hx_tmp) {
HXLINE( 143)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 143)					redesignedbg1->set_x(((( (Float)(_hx_tmp) ) - redesignedbg1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 143)				bool _hx_tmp1;
HXDLIN( 143)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 143)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 143)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 143)				if (_hx_tmp1) {
HXLINE( 143)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 143)					redesignedbg1->set_y(((( (Float)(_hx_tmp) ) - redesignedbg1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 144)			redesignedbg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 145)			this->add(redesignedbg1);
            		}
HXLINE( 148)		this->camFollowPos =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 149)		this->add(this->camFollowPos);
HXLINE( 152)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE( 153)		this->add(this->camFollow);
HXLINE( 157)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN( 157)		this->magenta = _hx_tmp2->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE( 158)		this->magenta->scrollFactor->set_x(( (Float)(0) ));
HXLINE( 159)		this->magenta->scrollFactor->set_y(((Float)0.10));
HXLINE( 160)		 ::flixel::FlxSprite _hx_tmp3 = this->magenta;
HXDLIN( 160)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->magenta->get_width() * ((Float)1.1))),null());
HXLINE( 161)		this->magenta->updateHitbox();
HXLINE( 162)		{
HXLINE( 162)			 ::flixel::FlxSprite _this = this->magenta;
HXDLIN( 162)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN( 162)			bool _hx_tmp4;
HXDLIN( 162)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 162)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE( 162)					_hx_tmp4 = false;
            				}
            			}
HXDLIN( 162)			if (_hx_tmp4) {
HXLINE( 162)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 162)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 162)			bool _hx_tmp5;
HXDLIN( 162)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 162)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE( 162)					_hx_tmp5 = false;
            				}
            			}
HXDLIN( 162)			if (_hx_tmp5) {
HXLINE( 162)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 162)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE( 163)		this->magenta->set_visible(false);
HXLINE( 164)		this->magenta->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE( 165)		this->magenta->set_color(-167525);
HXLINE( 166)		this->add(this->magenta);
HXLINE( 169)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 170)		this->add(this->menuItems);
HXLINE( 172)		if (::hx::IsEq( ::flixel::FlxG_obj::save->data->__Field(HX_("readmehm",b3,ee,77,85),::hx::paccDynamic),HX_("Off",4f,4b,3c,00) )) {
HXLINE( 174)			::MainMenuState_obj::Editorsnull = true;
            		}
HXLINE( 176)		if ((::MainMenuState_obj::Editorsnull == false)) {
HXLINE( 178)			this->bg2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE( 179)			this->bg2->set_alpha(((Float)0.6));
HXLINE( 180)			this->bg2->scrollFactor->set(null(),null());
HXLINE( 181)			this->add(this->bg2);
HXLINE( 183)			this->textt =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,437,(::flixel::FlxG_obj::height - 580),0,HX_(" !! README !!",72,7e,6a,16),-180,null());
HXLINE( 184)			this->textt->scrollFactor->set(null(),null());
HXLINE( 185)			this->textt->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),36,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 186)			this->add(this->textt);
HXLINE( 189)			this->textt2 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,210,(::flixel::FlxG_obj::height - 525),0,HX_("This engine was made for modding the FNF.",4e,e5,e9,ab),-180,null());
HXLINE( 190)			this->textt2->scrollFactor->set(null(),null());
HXLINE( 191)			this->textt2->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),36,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 192)			this->add(this->textt2);
HXLINE( 194)			this->textt3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,210,(::flixel::FlxG_obj::height - 470),0,HX_("Sten Engine GameBanana Link :",55,c5,47,e2),-180,null());
HXLINE( 195)			this->textt3->scrollFactor->set(null(),null());
HXLINE( 196)			this->textt3->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),36,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 197)			this->add(this->textt3);
HXLINE( 199)			this->textt4 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,210,(::flixel::FlxG_obj::height - 415),0,HX_("https://gamebanana.com/mods/375364",c8,be,f5,99),-180,null());
HXLINE( 200)			this->textt4->scrollFactor->set(null(),null());
HXLINE( 201)			this->textt4->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),36,-1,HX_("right",dc,0b,64,e9),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 202)			this->add(this->textt4);
HXLINE( 204)			this->button =  ::flixel::ui::FlxButton_obj::__alloc( HX_CTX ,560,360,HX_("Okey",b0,64,89,34),this->OnClickButton_dyn());
HXLINE( 205)			this->add(this->button);
HXLINE( 207)			::flixel::FlxG_obj::mouse->set_visible(true);
            		}
HXLINE( 214)		Float scale = ( (Float)(1) );
HXLINE( 219)		{
HXLINE( 219)			int _g = 0;
HXDLIN( 219)			int _g1 = this->optionShit->length;
HXDLIN( 219)			while((_g < _g1)){
HXLINE( 219)				_g = (_g + 1);
HXDLIN( 219)				int i = (_g - 1);
HXLINE( 221)				Float offset = (( (Float)(108) ) - ((::Math_obj::max(( (Float)(this->optionShit->length) ),( (Float)(4) )) - ( (Float)(4) )) * ( (Float)(80) )));
HXLINE( 222)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,((i * 140) + offset),null());
HXLINE( 223)				menuItem->scale->set_x(scale);
HXLINE( 224)				menuItem->scale->set_y(scale);
HXLINE( 225)				{
HXLINE( 225)					 ::flixel::FlxSprite _g1 = menuItem;
HXDLIN( 225)					_g1->set_x((_g1->x + 250));
            				}
HXLINE( 226)				menuItem->set_frames(::Paths_obj::getSparrowAtlas((HX_("mainmenu/menu_",a9,7b,4b,27) + this->optionShit->__get(i)),null(),null()));
HXLINE( 227)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE( 228)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE( 229)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 230)				menuItem->ID = i;
HXLINE( 231)				{
HXLINE( 231)					 ::flixel::FlxSprite _g2 = menuItem;
HXDLIN( 231)					_g2->set_x((_g2->x + -100));
            				}
HXLINE( 233)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 234)				Float scr = (( (Float)((this->optionShit->length - 4)) ) * ((Float)0.135));
HXLINE( 235)				if ((this->optionShit->length < 6)) {
HXLINE( 235)					scr = ( (Float)(0) );
            				}
HXLINE( 236)				menuItem->scrollFactor->set(0,scr);
HXLINE( 237)				menuItem->set_antialiasing(true);
HXLINE( 239)				menuItem->updateHitbox();
            			}
            		}
HXLINE( 242)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,null(),1);
HXLINE( 244)		::MainMenuState_obj::firstStart = false;
HXLINE( 246)		::flixel::FlxG_obj::camera->follow(this->camFollowPos,null(),(((Float)0.60) * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ))));
HXLINE( 248)		int hmain = 0;
HXLINE( 249)		::String h11 = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_game/mainMenuFont.txt",2a,98,4c,a2));
HXLINE( 250)		::String h10 = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_game/modversionandtext.txt",4f,5a,08,9d));
HXLINE( 251)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 49),0,h10,12,null());
HXLINE( 252)		versionShit->scrollFactor->set(null(),null());
HXLINE( 253)		versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 254)		this->add(versionShit);
HXLINE( 257)		if ((::MainMenuState_obj::language == HX_("en",69,58,00,00))) {
HXLINE( 261)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 33),0,(HX_("Sten Engine Version : ",16,7c,44,5d) + ::MainMenuState_obj::StenEngineVer),12,null());
HXLINE( 262)			versionShit->scrollFactor->set(null(),null());
HXLINE( 263)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 264)			this->add(versionShit);
HXLINE( 266)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,((HX_("Press E to Editor/Mods - FNF Version : ",9d,d6,78,9b) + ::MainMenuState_obj::gameVer) + HX_(" Press F to Funkin Media",83,3b,9b,e6)),12,null());
HXLINE( 267)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 268)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 269)			this->add(versionShit1);
            		}
HXLINE( 272)		if ((::MainMenuState_obj::language == HX_("tr",7e,65,00,00))) {
HXLINE( 274)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,12,(::flixel::FlxG_obj::height - 44),0,(HX_("Sten Engine Surumu",f5,6c,5b,42) + ::MainMenuState_obj::StenEngineVer),12,null());
HXLINE( 275)			versionShit->scrollFactor->set(null(),null());
HXLINE( 276)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 277)			this->add(versionShit);
HXLINE( 279)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,((HX_("E ye basarak editorlere ve ya modlara gir - FNF Surumu : ",56,de,5e,e2) + ::MainMenuState_obj::gameVer) + HX_(" F e basarak Funkin Mediaya gir",d3,f0,0d,55)),12,null());
HXLINE( 280)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 281)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 282)			this->add(versionShit1);
            		}
HXLINE( 284)		if ((::MainMenuState_obj::language == HX_("ru",c3,63,00,00))) {
HXLINE( 286)			 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,(HX_("Sten Engine Version : ",16,7c,44,5d) + ::MainMenuState_obj::StenEngineVer),12,null());
HXLINE( 287)			versionShit->scrollFactor->set(null(),null());
HXLINE( 288)			versionShit->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 289)			this->add(versionShit);
HXLINE( 291)			 ::flixel::text::FlxText versionShit1 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,((HX_("Press E to Editor/Mods - FNF Version : ",9d,d6,78,9b) + ::MainMenuState_obj::gameVer) + HX_(" Press F to Funkin Media",83,3b,9b,e6)),12,null());
HXLINE( 292)			versionShit1->scrollFactor->set(null(),null());
HXLINE( 293)			versionShit1->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 294)			this->add(versionShit1);
            		}
HXLINE( 299)		this->selec->scrollFactor->set(null(),null());
HXLINE( 300)		this->selec->setFormat(h11,16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 301)		this->add(this->selec);
HXLINE( 303)		this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
HXLINE( 309)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("dfjk",c3,18,67,42),::hx::paccDynamic)) )) {
HXLINE( 310)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Solo_dyn(),true);
            		}
            		else {
HXLINE( 312)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Duo(true),true);
            		}
HXLINE( 314)		this->changeItem(null());
HXLINE( 316)		this->super::create();
            	}


void MainMenuState_obj::OnClickButton(){
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_320_OnClickButton)
HXLINE( 321)		this->textt->set_visible(false);
HXLINE( 322)		this->textt2->set_visible(false);
HXLINE( 323)		this->textt3->set_visible(false);
HXLINE( 324)		this->textt4->set_visible(false);
HXLINE( 325)		this->bg2->set_visible(false);
HXLINE( 326)		this->button->set_visible(false);
HXLINE( 327)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 328)		::MainMenuState_obj::Editorsnull = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,OnClickButton,(void))

void MainMenuState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_539_update)
HXLINE( 539)			if ((::MainMenuState_obj::redesignedmenustyle == false)) {
HXLINE( 541)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 541)				if (::hx::IsNull( axes )) {
HXLINE( 541)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 541)				bool _hx_tmp;
HXDLIN( 541)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 541)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 541)						_hx_tmp = false;
            					}
            				}
HXDLIN( 541)				if (_hx_tmp) {
HXLINE( 541)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 541)					spr->set_x(((( (Float)(_hx_tmp) ) - spr->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 541)				bool _hx_tmp1;
HXDLIN( 541)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 541)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 541)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 541)				if (_hx_tmp1) {
HXLINE( 541)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 541)					spr->set_y(((( (Float)(_hx_tmp) ) - spr->get_height()) / ( (Float)(2) )));
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_334_update)
HXLINE( 333)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 335)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE( 337)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 337)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 340)		Float lerpVal = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(elapsed * ((Float)5.6))));
HXLINE( 341)		Float a = this->camFollowPos->x;
HXDLIN( 341)		Float a1 = this->camFollowPos->y;
HXDLIN( 341)		this->camFollowPos->setPosition((a + (lerpVal * (this->camFollow->x - a))),(a1 + (lerpVal * (this->camFollow->y - a1))));
HXLINE( 343)		Float lerpVal1 = ::Math_obj::max(( (Float)(0) ),::Math_obj::min(( (Float)(1) ),(elapsed * ((Float)7.5))));
HXLINE( 344)		Float a2 = this->camFollowPos->x;
HXDLIN( 344)		Float a3 = this->camFollowPos->y;
HXDLIN( 344)		this->camFollowPos->setPosition((a2 + (lerpVal1 * (this->camFollow->x - a2))),(a3 + (lerpVal1 * (this->camFollow->y - a3))));
HXLINE( 346)		if ((::MainMenuState_obj::redesignedmenustyle == true)) {
HXLINE( 348)			if ((this->optionShit->__get(this->curSelected) == HX_("story_mode",2d,63,e6,a4))) {
HXLINE( 350)				this->remove(this->char1,null());
HXLINE( 351)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("bf",c4,55,00,00),true);
HXLINE( 352)				this->char1->scrollFactor->set(null(),null());
HXLINE( 353)				 ::Character _hx_tmp = this->char1;
HXDLIN( 353)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 354)				this->add(this->char1);
HXLINE( 355)				this->char1->dance(null(),null());
            			}
HXLINE( 357)			if ((this->optionShit->__get(this->curSelected) == HX_("freeplay",a0,90,86,22))) {
HXLINE( 359)				this->remove(this->char1,null());
HXLINE( 360)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(70) ),HX_("monster",1a,54,b0,b8),true);
HXLINE( 361)				this->char1->scrollFactor->set(null(),null());
HXLINE( 362)				 ::Character _hx_tmp = this->char1;
HXDLIN( 362)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 363)				this->add(this->char1);
HXLINE( 364)				this->char1->dance(null(),null());
            			}
HXLINE( 366)			if ((this->optionShit->__get(this->curSelected) == HX_("credits",1a,0e,5e,13))) {
HXLINE( 368)				this->remove(this->char1,null());
HXLINE( 369)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("pico",e5,e8,57,4a),true);
HXLINE( 370)				this->char1->scrollFactor->set(null(),null());
HXLINE( 371)				 ::Character _hx_tmp = this->char1;
HXDLIN( 371)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 372)				this->add(this->char1);
HXLINE( 373)				this->char1->dance(null(),null());
            			}
HXLINE( 375)			if ((this->optionShit->__get(this->curSelected) == HX_("minigames",4a,ee,e2,ae))) {
HXLINE( 377)				this->remove(this->char1,null());
HXLINE( 378)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("gf",1f,5a,00,00),false);
HXLINE( 379)				this->char1->scrollFactor->set(null(),null());
HXLINE( 380)				 ::Character _hx_tmp = this->char1;
HXDLIN( 380)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 381)				this->add(this->char1);
HXLINE( 382)				this->char1->dance(null(),null());
            			}
HXLINE( 384)			if ((this->optionShit->__get(this->curSelected) == HX_("donate",6f,f1,29,2e))) {
HXLINE( 386)				this->remove(this->char1,null());
HXLINE( 387)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("spirit",31,bb,a9,bd),true);
HXLINE( 388)				this->char1->scrollFactor->set(null(),null());
HXLINE( 389)				 ::Character _hx_tmp = this->char1;
HXDLIN( 389)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 390)				this->add(this->char1);
HXLINE( 391)				this->char1->dance(null(),null());
            			}
HXLINE( 393)			if ((this->optionShit->__get(this->curSelected) == HX_("options",5e,33,fe,df))) {
HXLINE( 395)				this->remove(this->char1,null());
HXLINE( 396)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(180) ),HX_("bf-pixel",fd,03,90,37),true);
HXLINE( 397)				this->char1->scrollFactor->set(null(),null());
HXLINE( 398)				 ::Character _hx_tmp = this->char1;
HXDLIN( 398)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 399)				this->add(this->char1);
HXLINE( 400)				this->char1->dance(null(),null());
            			}
HXLINE( 402)			if ((this->optionShit->__get(this->curSelected) == HX_("mods",71,d3,60,48))) {
HXLINE( 404)				this->remove(this->char1,null());
HXLINE( 405)				this->char1 =  ::Character_obj::__alloc( HX_CTX ,( (Float)(870) ),( (Float)(70) ),HX_("monster-christmas",4f,88,85,27),true);
HXLINE( 406)				this->char1->scrollFactor->set(null(),null());
HXLINE( 407)				 ::Character _hx_tmp = this->char1;
HXDLIN( 407)				_hx_tmp->setGraphicSize(::Std_obj::_hx_int((this->char1->get_width() * ((Float)0.8))),null());
HXLINE( 408)				this->add(this->char1);
HXLINE( 409)				this->char1->dance(null(),null());
            			}
            		}
HXLINE( 415)		if (!(this->selectedSomethin)) {
HXLINE( 417)			 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 418)			if ((this->Editorsmainyes == false)) {
HXLINE( 420)				if (::hx::IsNotNull( gamepad )) {
HXLINE( 422)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 422)					int id = 11;
HXDLIN( 422)					 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 422)					int Status = _this->status;
HXDLIN( 422)					bool _hx_tmp;
HXDLIN( 422)					switch((int)(id)){
            						case (int)-2: {
HXLINE( 422)							_hx_tmp = _this1->anyButton(Status);
            						}
            						break;
            						case (int)-1: {
HXLINE( 422)							_hx_tmp = !(_this1->anyButton(Status));
            						}
            						break;
            						default:{
HXLINE( 422)							int RawID = _this1->mapping->getRawID(id);
HXDLIN( 422)							 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 422)							if (::hx::IsNotNull( button )) {
HXLINE( 422)								_hx_tmp = button->hasState(Status);
            							}
            							else {
HXLINE( 422)								_hx_tmp = false;
            							}
            						}
            					}
HXDLIN( 422)					if (_hx_tmp) {
HXLINE( 424)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 424)						_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 425)						this->changeItem(-1);
HXLINE( 426)						this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            					}
HXLINE( 428)					 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 428)					int id1 = 12;
HXDLIN( 428)					 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 428)					int Status1 = _this2->status;
HXDLIN( 428)					bool _hx_tmp1;
HXDLIN( 428)					switch((int)(id1)){
            						case (int)-2: {
HXLINE( 428)							_hx_tmp1 = _this3->anyButton(Status1);
            						}
            						break;
            						case (int)-1: {
HXLINE( 428)							_hx_tmp1 = !(_this3->anyButton(Status1));
            						}
            						break;
            						default:{
HXLINE( 428)							int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 428)							 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 428)							if (::hx::IsNotNull( button )) {
HXLINE( 428)								_hx_tmp1 = button->hasState(Status1);
            							}
            							else {
HXLINE( 428)								_hx_tmp1 = false;
            							}
            						}
            					}
HXDLIN( 428)					if (_hx_tmp1) {
HXLINE( 430)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 430)						_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 431)						this->changeItem(1);
HXLINE( 432)						this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            					}
            				}
HXLINE( 436)				 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 436)				if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 438)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 438)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 439)					this->changeItem(-1);
HXLINE( 440)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 443)				 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 443)				if (_this1->keyManager->checkStatusUnsafe(72,_this1->status)) {
HXLINE( 445)					 ::flixel::FlxState nextState =  ::NotePad_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 445)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 445)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 449)				 ::flixel::input::keyboard::FlxKeyList _this2 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 449)				if (_this2->keyManager->checkStatusUnsafe(75,_this2->status)) {
HXLINE( 451)					 ::flixel::FlxState nextState =  ::EasterEggTitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 451)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 451)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 454)				 ::flixel::input::keyboard::FlxKeyList _this3 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 454)				if (_this3->keyManager->checkStatusUnsafe(69,_this3->status)) {
HXLINE( 456)					this->openSubState( ::EditorsMain_obj::__alloc( HX_CTX ,null()));
HXLINE( 457)					this->Editorsmainyes = true;
            				}
HXLINE( 461)				 ::flixel::input::keyboard::FlxKeyList _this4 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 461)				if (_this4->keyManager->checkStatusUnsafe(70,_this4->status)) {
HXLINE( 463)					 ::flixel::FlxState nextState =  ::funkinMedia::FunkinMedia_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 463)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 463)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 466)				 ::flixel::input::keyboard::FlxKeyList _this5 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 466)				if (_this5->keyManager->checkStatusUnsafe(40,_this5->status)) {
HXLINE( 468)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 468)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 469)					this->changeItem(1);
HXLINE( 470)					this->selec->set_text((this->optionShit->__get(this->curSelected) + HX_("",00,00,00,00)));
            				}
HXLINE( 473)				if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 475)					 ::flixel::FlxState nextState =  ::TitleState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 475)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 475)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
HXLINE( 478)				if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 480)					if ((this->optionShit->__get(this->curSelected) == HX_("donate",6f,f1,29,2e))) {
HXLINE( 482)						::CoolUtil_obj::browserLoad(::MainMenuState_obj::donateLink);
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::MainMenuState,_gthis) HXARGC(1)
            						void _hx_run( ::flixel::FlxSprite spr){
            							HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_498_update)
HXLINE( 498)							if ((_gthis->curSelected != spr->ID)) {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr) HXARGC(1)
            								void _hx_run( ::flixel::tweens::FlxTween twn){
            									HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_504_update)
HXLINE( 504)									spr->kill();
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 500)								::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(2)
            									->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            									->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr)))));
            							}
            							else {
HXLINE( 510)								if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
            									HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MainMenuState,_gthis) HXARGC(1)
            									void _hx_run( ::flixel::effects::FlxFlicker flick){
            										HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_514_update)
HXLINE( 514)										_gthis->goToState();
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 512)									::flixel::effects::FlxFlicker_obj::flicker(spr,1,((Float)0.06),false,false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            								}
            								else {
            									HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::MainMenuState,_gthis) HXARGC(1)
            									void _hx_run( ::flixel::util::FlxTimer tmr){
            										HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_521_update)
HXLINE( 521)										_gthis->goToState();
            									}
            									HX_END_LOCAL_FUNC1((void))

HXLINE( 519)									 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC1((void))

HXLINE( 486)						this->selectedSomethin = true;
HXLINE( 487)						 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 487)						_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 489)						if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
HXLINE( 490)							::flixel::effects::FlxFlicker_obj::flicker(this->magenta,((Float)1.1),((Float)0.15),false,null(),null(),null());
            						}
HXLINE( 494)						this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            					}
            				}
            			}
            		}
            		else {
HXLINE( 533)			::flixel::FlxG_obj::mouse->set_visible(true);
            		}
HXLINE( 535)		this->super::update(elapsed);
HXLINE( 537)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4()),null());
            	}


void MainMenuState_obj::stageEditorFunc(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_551_stageEditorFunc)
HXDLIN( 551)		 ::flixel::FlxState nextState =  ::StageEditor_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 551)		if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXDLIN( 551)			::flixel::FlxG_obj::game->_requestedState = nextState;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,stageEditorFunc,(void))

void MainMenuState_obj::goToState(){
            	HX_GC_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_554_goToState)
HXLINE( 555)		::String daChoice = this->optionShit->__get(this->curSelected);
HXLINE( 557)		::String _hx_switch_0 = daChoice;
            		if (  (_hx_switch_0==HX_("credits",1a,0e,5e,13)) ){
HXLINE( 567)			 ::flixel::FlxState nextState =  ::CreditsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 567)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 567)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 567)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("freeplay",a0,90,86,22)) ){
HXLINE( 564)			 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 564)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 564)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 564)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("minigames",4a,ee,e2,ae)) ){
HXLINE( 579)			{
HXLINE( 579)				 ::flixel::FlxState nextState =  ::miniGames::MiniGamesState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 579)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 579)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 580)			::miniGames::MiniGamesState_obj::h = HX_("mainmenu",58,8e,02,b6);
HXLINE( 578)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("mods",71,d3,60,48)) ){
HXLINE( 573)			 ::flixel::FlxState nextState =  ::ModsMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 573)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 573)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 573)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("options",5e,33,fe,df)) ){
HXLINE( 570)			 ::flixel::FlxState nextState =  ::options::MenuOptions_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 570)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 570)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 570)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("story_mode",2d,63,e6,a4)) ){
HXLINE( 561)			 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 561)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 561)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
HXDLIN( 561)			goto _hx_goto_11;
            		}
            		if (  (_hx_switch_0==HX_("youtube",e3,ea,29,b4)) ){
HXLINE( 576)			::CoolUtil_obj::browserLoad(HX_("https://www.youtube.com/channel/UCCxaEq2BskVtiYtAfx_lBXA",6a,4e,11,ba));
HXDLIN( 576)			goto _hx_goto_11;
            		}
            		/* default */{
HXLINE( 583)			{
HXLINE( 583)				 ::flixel::FlxState nextState =  ::CustomState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 583)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 583)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 584)			::CustomState_obj::statename = this->optionShit->__get(this->curSelected);
            		}
            		_hx_goto_11:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MainMenuState_obj,goToState,(void))

void MainMenuState_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MainMenuState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_599_changeItem)
HXLINE( 600)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 601)			spr->scale->set_x(((Float)0.8));
HXLINE( 602)			spr->scale->set_y(((Float)0.8));
HXLINE( 603)			spr->updateHitbox();
HXLINE( 605)			if ((spr->ID == _gthis->curSelected)) {
HXLINE( 607)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
HXLINE( 610)				spr->scale->set_x(((Float)1.0));
HXLINE( 611)				spr->scale->set_y(((Float)1.0));
HXLINE( 612)				Float add = ( (Float)(0) );
HXLINE( 613)				if ((_gthis->menuItems->length > 4)) {
HXLINE( 614)					add = ( (Float)((_gthis->menuItems->length * 8)) );
            				}
HXLINE( 617)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 617)				Float _hx_tmp = spr->getGraphicMidpoint(null())->x;
HXDLIN( 617)				_gthis1->setPosition(_hx_tmp,(spr->getGraphicMidpoint(null())->y - add));
HXLINE( 618)				spr->centerOffsets(null());
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_590_changeItem)
HXLINE( 589)		 ::MainMenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 591)		 ::MainMenuState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 591)		_hx_tmp->curSelected = (_hx_tmp->curSelected + huh);
HXLINE( 593)		if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 594)			this->curSelected = 0;
            		}
HXLINE( 595)		if ((this->curSelected < 0)) {
HXLINE( 596)			this->curSelected = (this->menuItems->length - 1);
            		}
HXLINE( 598)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(MainMenuState_obj,changeItem,(void))

::String MainMenuState_obj::hmmmmmmmmmmmmmmmm;

::String MainMenuState_obj::donateLink;

::String MainMenuState_obj::language;

bool MainMenuState_obj::Editorsnull;

bool MainMenuState_obj::redesignedmenustyle;

bool MainMenuState_obj::firstStart;

::String MainMenuState_obj::nightly;

::String MainMenuState_obj::StenEngineVer;

::String MainMenuState_obj::gameVer;

bool MainMenuState_obj::finishedFunnyMove;


::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< MainMenuState_obj > __this = new MainMenuState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< MainMenuState_obj > MainMenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	MainMenuState_obj *__this = (MainMenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MainMenuState_obj), true, "MainMenuState"));
	*(void **)__this = MainMenuState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

MainMenuState_obj::MainMenuState_obj()
{
}

void MainMenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MainMenuState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_MARK_MEMBER_NAME(bg2,"bg2");
	HX_MARK_MEMBER_NAME(its,"its");
	HX_MARK_MEMBER_NAME(char1,"char1");
	HX_MARK_MEMBER_NAME(textt,"textt");
	HX_MARK_MEMBER_NAME(textt2,"textt2");
	HX_MARK_MEMBER_NAME(textt3,"textt3");
	HX_MARK_MEMBER_NAME(textt4,"textt4");
	HX_MARK_MEMBER_NAME(button,"button");
	HX_MARK_MEMBER_NAME(button2,"button2");
	HX_MARK_MEMBER_NAME(Editorsmainyes,"Editorsmainyes");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(newGaming,"newGaming");
	HX_MARK_MEMBER_NAME(newGaming2,"newGaming2");
	HX_MARK_MEMBER_NAME(magenta,"magenta");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_MARK_MEMBER_NAME(selec,"selec");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MainMenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(updateAvailable,"updateAvailable");
	HX_VISIT_MEMBER_NAME(bg2,"bg2");
	HX_VISIT_MEMBER_NAME(its,"its");
	HX_VISIT_MEMBER_NAME(char1,"char1");
	HX_VISIT_MEMBER_NAME(textt,"textt");
	HX_VISIT_MEMBER_NAME(textt2,"textt2");
	HX_VISIT_MEMBER_NAME(textt3,"textt3");
	HX_VISIT_MEMBER_NAME(textt4,"textt4");
	HX_VISIT_MEMBER_NAME(button,"button");
	HX_VISIT_MEMBER_NAME(button2,"button2");
	HX_VISIT_MEMBER_NAME(Editorsmainyes,"Editorsmainyes");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(newGaming,"newGaming");
	HX_VISIT_MEMBER_NAME(newGaming2,"newGaming2");
	HX_VISIT_MEMBER_NAME(magenta,"magenta");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(camFollowPos,"camFollowPos");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	HX_VISIT_MEMBER_NAME(selec,"selec");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MainMenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { return ::hx::Val( bg2 ); }
		if (HX_FIELD_EQ(inName,"its") ) { return ::hx::Val( its ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { return ::hx::Val( char1 ); }
		if (HX_FIELD_EQ(inName,"textt") ) { return ::hx::Val( textt ); }
		if (HX_FIELD_EQ(inName,"selec") ) { return ::hx::Val( selec ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textt2") ) { return ::hx::Val( textt2 ); }
		if (HX_FIELD_EQ(inName,"textt3") ) { return ::hx::Val( textt3 ); }
		if (HX_FIELD_EQ(inName,"textt4") ) { return ::hx::Val( textt4 ); }
		if (HX_FIELD_EQ(inName,"button") ) { return ::hx::Val( button ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"button2") ) { return ::hx::Val( button2 ); }
		if (HX_FIELD_EQ(inName,"magenta") ) { return ::hx::Val( magenta ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"newGaming") ) { return ::hx::Val( newGaming ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"goToState") ) { return ::hx::Val( goToState_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { return ::hx::Val( newGaming2 ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { return ::hx::Val( camFollowPos ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"OnClickButton") ) { return ::hx::Val( OnClickButton_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"Editorsmainyes") ) { return ::hx::Val( Editorsmainyes ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { return ::hx::Val( updateAvailable ); }
		if (HX_FIELD_EQ(inName,"stageEditorFunc") ) { return ::hx::Val( stageEditorFunc_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MainMenuState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { outValue = ( nightly ); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { outValue = ( gameVer ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { outValue = ( language ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"donateLink") ) { outValue = ( donateLink ); return true; }
		if (HX_FIELD_EQ(inName,"firstStart") ) { outValue = ( firstStart ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Editorsnull") ) { outValue = ( Editorsnull ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"StenEngineVer") ) { outValue = ( StenEngineVer ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { outValue = ( hmmmmmmmmmmmmmmmm ); return true; }
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { outValue = ( finishedFunnyMove ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"redesignedmenustyle") ) { outValue = ( redesignedmenustyle ); return true; }
	}
	return false;
}

::hx::Val MainMenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bg2") ) { bg2=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"its") ) { its=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"char1") ) { char1=inValue.Cast<  ::Character >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt") ) { textt=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"selec") ) { selec=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textt2") ) { textt2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt3") ) { textt3=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textt4") ) { textt4=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"button") ) { button=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"button2") ) { button2=inValue.Cast<  ::flixel::ui::FlxButton >(); return inValue; }
		if (HX_FIELD_EQ(inName,"magenta") ) { magenta=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming") ) { newGaming=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { newGaming2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"camFollowPos") ) { camFollowPos=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"Editorsmainyes") ) { Editorsmainyes=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"updateAvailable") ) { updateAvailable=inValue.Cast< bool >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MainMenuState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { nightly=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { gameVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"language") ) { language=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"donateLink") ) { donateLink=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"firstStart") ) { firstStart=ioValue.Cast< bool >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"Editorsnull") ) { Editorsnull=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"StenEngineVer") ) { StenEngineVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"hmmmmmmmmmmmmmmmm") ) { hmmmmmmmmmmmmmmmm=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { finishedFunnyMove=ioValue.Cast< bool >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"redesignedmenustyle") ) { redesignedmenustyle=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void MainMenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("updateAvailable",80,2a,0e,c7));
	outFields->push(HX_("bg2",cd,b6,4a,00));
	outFields->push(HX_("its",28,12,50,00));
	outFields->push(HX_("char1",9b,9c,b3,45));
	outFields->push(HX_("textt",27,4b,99,0d));
	outFields->push(HX_("textt2",2b,77,88,d8));
	outFields->push(HX_("textt3",2c,77,88,d8));
	outFields->push(HX_("textt4",2d,77,88,d8));
	outFields->push(HX_("button",f2,61,e0,d9));
	outFields->push(HX_("button2",00,52,75,ca));
	outFields->push(HX_("Editorsmainyes",48,29,0f,51));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("newGaming",2f,8a,ad,0e));
	outFields->push(HX_("newGaming2",23,5f,2b,c9));
	outFields->push(HX_("magenta",29,ba,9d,0e));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("camFollowPos",94,32,de,8d));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	outFields->push(HX_("selec",78,8e,29,7a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MainMenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(MainMenuState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,updateAvailable),HX_("updateAvailable",80,2a,0e,c7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,bg2),HX_("bg2",cd,b6,4a,00)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,its),HX_("its",28,12,50,00)},
	{::hx::fsObject /*  ::Character */ ,(int)offsetof(MainMenuState_obj,char1),HX_("char1",9b,9c,b3,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt),HX_("textt",27,4b,99,0d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt2),HX_("textt2",2b,77,88,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt3),HX_("textt3",2c,77,88,d8)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,textt4),HX_("textt4",2d,77,88,d8)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MainMenuState_obj,button),HX_("button",f2,61,e0,d9)},
	{::hx::fsObject /*  ::flixel::ui::FlxButton */ ,(int)offsetof(MainMenuState_obj,button2),HX_("button2",00,52,75,ca)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,Editorsmainyes),HX_("Editorsmainyes",48,29,0f,51)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MainMenuState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MainMenuState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,newGaming),HX_("newGaming",2f,8a,ad,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,newGaming2),HX_("newGaming2",23,5f,2b,c9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MainMenuState_obj,magenta),HX_("magenta",29,ba,9d,0e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(MainMenuState_obj,camFollowPos),HX_("camFollowPos",94,32,de,8d)},
	{::hx::fsBool,(int)offsetof(MainMenuState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MainMenuState_obj,selec),HX_("selec",78,8e,29,7a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MainMenuState_obj_sStaticStorageInfo[] = {
	{::hx::fsString,(void *) &MainMenuState_obj::hmmmmmmmmmmmmmmmm,HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45)},
	{::hx::fsString,(void *) &MainMenuState_obj::donateLink,HX_("donateLink",09,19,7d,a4)},
	{::hx::fsString,(void *) &MainMenuState_obj::language,HX_("language",58,80,11,7a)},
	{::hx::fsBool,(void *) &MainMenuState_obj::Editorsnull,HX_("Editorsnull",8d,77,8a,65)},
	{::hx::fsBool,(void *) &MainMenuState_obj::redesignedmenustyle,HX_("redesignedmenustyle",62,d6,f1,d5)},
	{::hx::fsBool,(void *) &MainMenuState_obj::firstStart,HX_("firstStart",12,be,e9,c1)},
	{::hx::fsString,(void *) &MainMenuState_obj::nightly,HX_("nightly",65,3e,0e,6d)},
	{::hx::fsString,(void *) &MainMenuState_obj::StenEngineVer,HX_("StenEngineVer",f7,26,58,9e)},
	{::hx::fsString,(void *) &MainMenuState_obj::gameVer,HX_("gameVer",91,29,72,89)},
	{::hx::fsBool,(void *) &MainMenuState_obj::finishedFunnyMove,HX_("finishedFunnyMove",a9,44,72,47)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MainMenuState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("updateAvailable",80,2a,0e,c7),
	HX_("bg2",cd,b6,4a,00),
	HX_("its",28,12,50,00),
	HX_("char1",9b,9c,b3,45),
	HX_("textt",27,4b,99,0d),
	HX_("textt2",2b,77,88,d8),
	HX_("textt3",2c,77,88,d8),
	HX_("textt4",2d,77,88,d8),
	HX_("button",f2,61,e0,d9),
	HX_("button2",00,52,75,ca),
	HX_("Editorsmainyes",48,29,0f,51),
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("newGaming",2f,8a,ad,0e),
	HX_("newGaming2",23,5f,2b,c9),
	HX_("magenta",29,ba,9d,0e),
	HX_("camFollow",e0,6e,47,22),
	HX_("camFollowPos",94,32,de,8d),
	HX_("create",fc,66,0f,7c),
	HX_("OnClickButton",5b,25,bc,b3),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("selec",78,8e,29,7a),
	HX_("update",09,86,05,87),
	HX_("stageEditorFunc",ef,bb,fa,98),
	HX_("goToState",4e,a5,e1,c9),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void MainMenuState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MainMenuState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::donateLink,"donateLink");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::language,"language");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::Editorsnull,"Editorsnull");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::redesignedmenustyle,"redesignedmenustyle");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::firstStart,"firstStart");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::nightly,"nightly");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::StenEngineVer,"StenEngineVer");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::gameVer,"gameVer");
	HX_MARK_MEMBER_NAME(MainMenuState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MainMenuState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::hmmmmmmmmmmmmmmmm,"hmmmmmmmmmmmmmmmm");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::donateLink,"donateLink");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::language,"language");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::Editorsnull,"Editorsnull");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::redesignedmenustyle,"redesignedmenustyle");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::firstStart,"firstStart");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::nightly,"nightly");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::StenEngineVer,"StenEngineVer");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::gameVer,"gameVer");
	HX_VISIT_MEMBER_NAME(MainMenuState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#endif

::hx::Class MainMenuState_obj::__mClass;

static ::String MainMenuState_obj_sStaticFields[] = {
	HX_("hmmmmmmmmmmmmmmmm",68,eb,38,45),
	HX_("donateLink",09,19,7d,a4),
	HX_("language",58,80,11,7a),
	HX_("Editorsnull",8d,77,8a,65),
	HX_("redesignedmenustyle",62,d6,f1,d5),
	HX_("firstStart",12,be,e9,c1),
	HX_("nightly",65,3e,0e,6d),
	HX_("StenEngineVer",f7,26,58,9e),
	HX_("gameVer",91,29,72,89),
	HX_("finishedFunnyMove",a9,44,72,47),
	::String(null())
};

void MainMenuState_obj::__register()
{
	MainMenuState_obj _hx_dummy;
	MainMenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MainMenuState",59,88,5e,20);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MainMenuState_obj::__GetStatic;
	__mClass->mSetStaticField = &MainMenuState_obj::__SetStatic;
	__mClass->mMarkFunc = MainMenuState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MainMenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MainMenuState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MainMenuState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MainMenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MainMenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MainMenuState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_44_boot)
HXDLIN(  44)		hmmmmmmmmmmmmmmmm = ::sys::io::File_obj::getContent(HX_("assets/data/language.txt",d3,ed,d9,4b));
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_45_boot)
HXDLIN(  45)		donateLink = ::sys::io::File_obj::getContent(HX_("assets/custom/custom_game/donateLink.txt",8c,47,83,27));
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_46_boot)
HXDLIN(  46)		language = ::MainMenuState_obj::hmmmmmmmmmmmmmmmm;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_47_boot)
HXDLIN(  47)		Editorsnull = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_48_boot)
HXDLIN(  48)		redesignedmenustyle = false;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_80_boot)
HXDLIN(  80)		firstStart = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_82_boot)
HXDLIN(  82)		nightly = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_84_boot)
HXDLIN(  84)		StenEngineVer = (HX_("0.7 Release",00,27,80,55) + ::MainMenuState_obj::nightly);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_85_boot)
HXDLIN(  85)		gameVer = HX_("0.2.7.1",40,93,0b,19);
            	}
{
            	HX_STACKFRAME(&_hx_pos_b0351dbbcbe2d566_91_boot)
HXDLIN(  91)		finishedFunnyMove = false;
            	}
}

