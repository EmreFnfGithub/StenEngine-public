// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_UpdateState
#include <UpdateState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBar
#include <flixel/ui/FlxBar.h>
#endif
#ifndef INCLUDED_flixel_ui_FlxBarFillDirection
#include <flixel/ui/FlxBarFillDirection.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_http_HttpBase
#include <haxe/http/HttpBase.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <haxe/io/Output.h>
#endif
#ifndef INCLUDED_openfl_events_ErrorEvent
#include <openfl/events/ErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IOErrorEvent
#include <openfl/events/IOErrorEvent.h>
#endif
#ifndef INCLUDED_openfl_events_TextEvent
#include <openfl/events/TextEvent.h>
#endif
#ifndef INCLUDED_openfl_net_URLLoader
#include <openfl/net/URLLoader.h>
#endif
#ifndef INCLUDED_openfl_net_URLRequest
#include <openfl/net/URLRequest.h>
#endif
#ifndef INCLUDED_openfl_system_System
#include <openfl/system/System.h>
#endif
#ifndef INCLUDED_openfl_utils_ByteArrayData
#include <openfl/utils/ByteArrayData.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataInput
#include <openfl/utils/IDataInput.h>
#endif
#ifndef INCLUDED_openfl_utils_IDataOutput
#include <openfl/utils/IDataOutput.h>
#endif
#ifndef INCLUDED_openfl_utils__ByteArray_ByteArray_Impl_
#include <openfl/utils/_ByteArray/ByteArray_Impl_.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif
#ifndef INCLUDED_sys_Http
#include <sys/Http.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileOutput
#include <sys/io/FileOutput.h>
#endif
#ifndef INCLUDED_sys_io_Process
#include <sys/io/Process.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1efbc113d48a82e5_42_new,"UpdateState","new",0xc6a0cc1a,"UpdateState.new","UpdateState.hx",42,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_78_create,"UpdateState","create",0x10c2fb82,"UpdateState.create","UpdateState.hx",78,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_52_create,"UpdateState","create",0x10c2fb82,"UpdateState.create","UpdateState.hx",52,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_89_requestData,"UpdateState","requestData",0xc36afad3,"UpdateState.requestData","UpdateState.hx",89,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_93_requestData,"UpdateState","requestData",0xc36afad3,"UpdateState.requestData","UpdateState.hx",93,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_85_requestData,"UpdateState","requestData",0xc36afad3,"UpdateState.requestData","UpdateState.hx",85,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_100_initUpdate,"UpdateState","initUpdate",0x6b0a30bf,"UpdateState.initUpdate","UpdateState.hx",100,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_150_initUpdate,"UpdateState","initUpdate",0x6b0a30bf,"UpdateState.initUpdate","UpdateState.hx",150,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_148_initUpdate,"UpdateState","initUpdate",0x6b0a30bf,"UpdateState.initUpdate","UpdateState.hx",148,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_155_initUpdate,"UpdateState","initUpdate",0x6b0a30bf,"UpdateState.initUpdate","UpdateState.hx",155,0x3ee1b496)
HX_LOCAL_STACK_FRAME(_hx_pos_1efbc113d48a82e5_45_boot,"UpdateState","boot",0xfe2acb38,"UpdateState.boot","UpdateState.hx",45,0x3ee1b496)

void UpdateState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_1efbc113d48a82e5_42_new)
HXLINE(  49)		this->firstFileDownloaded = false;
HXLINE(  47)		this->fileArray = ::Array_obj< ::String >::__new(0);
HXLINE(  42)		super::__construct(TransIn,TransOut);
            	}

Dynamic UpdateState_obj::__CreateEmpty() { return new UpdateState_obj; }

void *UpdateState_obj::_hx_vtable = 0;

Dynamic UpdateState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UpdateState_obj > _hx_result = new UpdateState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool UpdateState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x00d1bc68) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x00d1bc68;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void UpdateState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::UpdateState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer tmr){
            			HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_78_create)
HXLINE(  78)			_gthis->initUpdate();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_52_create)
HXLINE(  51)		 ::UpdateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  54)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXDLIN(  54)		::String library = null();
HXDLIN(  54)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("menuDesat",26,91,04,72)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE(  55)		bg1->scrollFactor->set(null(),null());
HXLINE(  56)		bg1->set_color(-10069249);
HXLINE(  57)		this->add(bg1);
HXLINE(  59)		 ::flixel::FlxSprite swagBG =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(1000,500,-16777216,false,null());
HXLINE(  60)		{
HXLINE(  60)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  60)			bool _hx_tmp;
HXDLIN(  60)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  60)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  60)					_hx_tmp = false;
            				}
            			}
HXDLIN(  60)			if (_hx_tmp) {
HXLINE(  60)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  60)				swagBG->set_x(((( (Float)(_hx_tmp) ) - swagBG->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  60)			bool _hx_tmp1;
HXDLIN(  60)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  60)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  60)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  60)			if (_hx_tmp1) {
HXLINE(  60)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  60)				swagBG->set_y(((( (Float)(_hx_tmp) ) - swagBG->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  61)		swagBG->scrollFactor->set(null(),null());
HXLINE(  62)		swagBG->set_alpha(((Float)0.5));
HXLINE(  63)		this->add(swagBG);
HXLINE(  65)		::UpdateState_obj::coolText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,1000,null(),null(),null());
HXLINE(  66)		::UpdateState_obj::coolText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),50,-1,HX_("center",d5,25,db,05),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE(  67)		::UpdateState_obj::coolText->set_borderSize(( (Float)(1) ));
HXLINE(  68)		::UpdateState_obj::coolText->scrollFactor->set(null(),null());
HXLINE(  69)		::UpdateState_obj::coolText->set_text(HX_("Starting Update...",25,e7,53,38));
HXLINE(  70)		{
HXLINE(  70)			 ::flixel::text::FlxText _this = ::UpdateState_obj::coolText;
HXDLIN(  70)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN(  70)			if (::hx::IsNull( axes1 )) {
HXLINE(  70)				axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN(  70)			bool _hx_tmp2;
HXDLIN(  70)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  70)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(  70)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(  70)			if (_hx_tmp2) {
HXLINE(  70)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  70)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  70)			bool _hx_tmp3;
HXDLIN(  70)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  70)					_hx_tmp3 = true;
            				}
            				break;
            				default:{
HXLINE(  70)					_hx_tmp3 = false;
            				}
            			}
HXDLIN(  70)			if (_hx_tmp3) {
HXLINE(  70)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  70)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  71)		{
HXLINE(  71)			 ::flixel::text::FlxText _g = ::UpdateState_obj::coolText;
HXDLIN(  71)			_g->set_y((_g->y + 200));
            		}
HXLINE(  72)		this->add(::UpdateState_obj::coolText);
HXLINE(  74)		this->requestData();
HXLINE(  76)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE(  81)		this->super::create();
            	}


void UpdateState_obj::requestData(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::UpdateState,_gthis) HXARGC(1)
            		void _hx_run(::String swagDat){
            			HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_89_requestData)
HXLINE(  89)			_gthis->fileArray = ::StringTools_obj::trim(swagDat).split(HX_("\n",0a,00,00,00));
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run(::String error){
            			HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_93_requestData)
HXLINE(  93)			::UpdateState_obj::coolText->set_text((HX_("Error: ",4e,a8,5b,b7) + error));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_85_requestData)
HXLINE(  84)		 ::UpdateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  86)		 ::sys::Http remoteList =  ::sys::Http_obj::__alloc( HX_CTX ,HX_("https://raw.githubusercontent.com/EmreFnfGithub/StenEngine-public/main/updateFiles.txt",2e,fb,6f,4b));
HXLINE(  87)		remoteList->onData =  ::Dynamic(new _hx_Closure_0(_gthis));
HXLINE(  91)		remoteList->onError =  ::Dynamic(new _hx_Closure_1());
HXLINE(  96)		remoteList->request(null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(UpdateState_obj,requestData,(void))

void UpdateState_obj::initUpdate(){
            	HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_100_initUpdate)
HXLINE(  99)		 ::UpdateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 101)		 ::openfl::net::URLLoader fileDownload =  ::openfl::net::URLLoader_obj::__alloc( HX_CTX ,null());
HXLINE( 102)		fileDownload->dataFormat = 0;
HXLINE( 104)		if (::hx::IsNotNull( this->fileArray )) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            			void _hx_run( ::openfl::events::IOErrorEvent exceptionThrown){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer tmr){
            					HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_150_initUpdate)
HXLINE( 150)					::UpdateState_obj::coolText->set_text(HX_("Error! Could not download file! This is\nusually because you don't have an internet connection!",59,0a,d2,22));
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_148_initUpdate)
HXLINE( 148)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_0()),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2, ::UpdateState,_gthis, ::openfl::net::URLLoader,fileDownload, ::sys::io::FileOutput,writtenFile) HXARGC(1)
            			void _hx_run( ::openfl::events::Event e){
            				HX_GC_STACKFRAME(&_hx_pos_1efbc113d48a82e5_155_initUpdate)
HXLINE( 156)				 ::openfl::utils::ByteArrayData this1 =  ::openfl::utils::ByteArrayData_obj::__alloc( HX_CTX ,0);
HXDLIN( 156)				 ::openfl::utils::ByteArrayData bytes = this1;
HXLINE( 157)				fileDownload->data->__Field(HX_("readBytes",35,55,7f,8e),::hx::paccDynamic)(bytes,0,(( (Float)(fileDownload->data->__Field(HX_("length",e6,94,07,9f),::hx::paccDynamic)) ) - ( (Float)(fileDownload->data->__Field(HX_("position",a9,a0,fa,ca),::hx::paccDynamic)) )));
HXLINE( 158)				 ::sys::io::FileOutput writtenFile1 = writtenFile;
HXDLIN( 158)				 ::haxe::io::Bytes _hx_tmp = ::openfl::utils::_ByteArray::ByteArray_Impl__obj::toArrayBuffer(bytes);
HXDLIN( 158)				writtenFile1->writeBytes(_hx_tmp,0,::openfl::utils::_ByteArray::ByteArray_Impl__obj::get_length(bytes));
HXLINE( 159)				writtenFile->flush();
HXLINE( 161)				writtenFile->close();
HXLINE( 162)				::UpdateState_obj::finishedFiles++;
HXLINE( 163)				if ((_gthis->fileArray->length > 0)) {
HXLINE( 165)					_gthis->initUpdate();
            				}
            				else {
HXLINE( 169)					::UpdateState_obj::coolText->set_text(HX_("Update Finished! Restarting...",b3,92,c3,52));
HXLINE( 171)					::sys::io::File_obj::copy(HX_("StenEngine.exe",f0,6d,59,d4),HX_("Updater.exe",cd,8f,00,f9));
HXLINE( 173)					 ::sys::io::Process_obj::__alloc( HX_CTX ,HX_("start /B Updater.exe startUpdate",49,dc,0d,33),null(),null());
HXLINE( 175)					::openfl::_hx_system::System_obj::exit(0);
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 106)			::UpdateState_obj::coolText->set_text(HX_("Gathering Update Files...",55,f6,74,1c));
HXLINE( 108)			int progressBar = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.75)));
HXDLIN( 108)			 ::flixel::ui::FlxBar progressBar1 =  ::flixel::ui::FlxBar_obj::__alloc( HX_CTX ,0,0,::flixel::ui::FlxBarFillDirection_obj::LEFT_TO_RIGHT_dyn(),progressBar,30,::hx::ObjectPtr<OBJ_>(this),HX_("finishedFiles",a5,fd,b1,f6),0,this->fileArray->length,null());
HXLINE( 109)			progressBar1->createFilledBar(-8355712,-16744448,true,-16777216);
HXLINE( 110)			{
HXLINE( 110)				 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 110)				if (::hx::IsNull( axes )) {
HXLINE( 110)					axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            				}
HXDLIN( 110)				bool _hx_tmp;
HXDLIN( 110)				switch((int)(axes->_hx_getIndex())){
            					case (int)0: case (int)2: {
HXLINE( 110)						_hx_tmp = true;
            					}
            					break;
            					default:{
HXLINE( 110)						_hx_tmp = false;
            					}
            				}
HXDLIN( 110)				if (_hx_tmp) {
HXLINE( 110)					int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 110)					progressBar1->set_x(((( (Float)(_hx_tmp) ) - progressBar1->get_width()) / ( (Float)(2) )));
            				}
HXDLIN( 110)				bool _hx_tmp1;
HXDLIN( 110)				switch((int)(axes->_hx_getIndex())){
            					case (int)1: case (int)2: {
HXLINE( 110)						_hx_tmp1 = true;
            					}
            					break;
            					default:{
HXLINE( 110)						_hx_tmp1 = false;
            					}
            				}
HXDLIN( 110)				if (_hx_tmp1) {
HXLINE( 110)					int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 110)					progressBar1->set_y(((( (Float)(_hx_tmp) ) - progressBar1->get_height()) / ( (Float)(2) )));
            				}
            			}
HXLINE( 111)			progressBar1->set_y((::UpdateState_obj::coolText->y + 100));
HXLINE( 112)			progressBar1->scrollFactor->set(0,0);
HXLINE( 113)			this->add(progressBar1);
HXLINE( 115)			::UpdateState_obj::coolText->set_text(((((HX_("Downloading Update Files... (",f0,26,b9,7b) + ::UpdateState_obj::finishedFiles) + HX_("/",2f,00,00,00)) + this->fileArray->length) + HX_(")",29,00,00,00)));
HXLINE( 117)			::String firstReturnedFile = ( (::String)(this->fileArray->shift()) );
HXLINE( 119)			{
HXLINE( 119)				int _g = 0;
HXDLIN( 119)				int _g1 = this->fileArray->length;
HXDLIN( 119)				while((_g < _g1)){
HXLINE( 119)					_g = (_g + 1);
HXDLIN( 119)					int i = (_g - 1);
HXLINE( 121)					this->fileArray[i] = ::StringTools_obj::trim(this->fileArray->__get(i));
            				}
            			}
HXLINE( 124)			bool _hx_tmp2;
HXDLIN( 124)			if (::sys::FileSystem_obj::exists((HX_("./updateCache/",57,0c,32,7a) + firstReturnedFile))) {
HXLINE( 124)				_hx_tmp2 = ::hx::IsGreater( ::sys::FileSystem_obj::stat((HX_("./updateCache/",57,0c,32,7a) + firstReturnedFile))->__Field(HX_("size",c1,a0,53,4c),::hx::paccDynamic),0 );
            			}
            			else {
HXLINE( 124)				_hx_tmp2 = false;
            			}
HXDLIN( 124)			if (_hx_tmp2) {
HXLINE( 126)				::UpdateState_obj::finishedFiles++;
HXLINE( 127)				this->initUpdate();
HXLINE( 128)				return;
            			}
HXLINE( 131)			::String fileLocation = HX_("https://raw.githubusercontent.com/EmreFnfGithub/StenEngine-public/main/compiledFiles/",8b,14,61,48);
HXLINE( 135)			 ::openfl::net::URLRequest fileLoader =  ::openfl::net::URLRequest_obj::__alloc( HX_CTX ,::StringTools_obj::replace((((HX_("",00,00,00,00) + fileLocation) + HX_("/",2f,00,00,00)) + firstReturnedFile),HX_(" ",20,00,00,00),HX_("%20",23,3f,1c,00)));
HXLINE( 137)			::cpp::VirtualArray emptyArray = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 138)			::cpp::VirtualArray _g2 = ::cpp::VirtualArray_obj::__new(0);
HXLINE( 139)			{
HXLINE( 139)				emptyArray = ::StringTools_obj::replace(firstReturnedFile,HX_("\\",5c,00,00,00),HX_("/",2f,00,00,00)).split(HX_("/",2f,00,00,00));
HXDLIN( 139)				int _g3_current = 0;
HXDLIN( 139)				::cpp::VirtualArray _g3_array = emptyArray;
HXDLIN( 139)				while((_g3_current < _g3_array->get_length())){
HXLINE( 139)					 ::Dynamic _g4_value = _g3_array->__get(_g3_current);
HXDLIN( 139)					_g3_current = (_g3_current + 1);
HXDLIN( 139)					int _g4_key = (_g3_current - 1);
HXDLIN( 139)					int i = _g4_key;
HXDLIN( 139)					 ::Dynamic o = _g4_value;
HXLINE( 140)					if ((i < (emptyArray->get_length() - 1))) {
HXLINE( 140)						_g2->push(o);
            					}
            				}
            			}
HXLINE( 138)			::String cleanedDirectory = _g2->join(HX_("/",2f,00,00,00));
HXLINE( 142)			::sys::FileSystem_obj::createDirectory((HX_("updateCache/",96,06,b6,b0) + cleanedDirectory));
HXLINE( 144)			 ::sys::io::FileOutput writtenFile = ::sys::io::File_obj::write((HX_("updateCache/",96,06,b6,b0) + firstReturnedFile),true);
HXLINE( 146)			fileDownload->addEventListener(HX_("ioError",02,fe,41,76), ::Dynamic(new _hx_Closure_1()),null(),null(),null());
HXLINE( 154)			fileDownload->addEventListener(HX_("complete",b9,00,c8,7f), ::Dynamic(new _hx_Closure_2(_gthis,fileDownload,writtenFile)),null(),null(),null());
HXLINE( 179)			fileDownload->load(fileLoader);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(UpdateState_obj,initUpdate,(void))

 ::flixel::text::FlxText UpdateState_obj::coolText;

int UpdateState_obj::finishedFiles;


::hx::ObjectPtr< UpdateState_obj > UpdateState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< UpdateState_obj > __this = new UpdateState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< UpdateState_obj > UpdateState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	UpdateState_obj *__this = (UpdateState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(UpdateState_obj), true, "UpdateState"));
	*(void **)__this = UpdateState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

UpdateState_obj::UpdateState_obj()
{
}

void UpdateState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(UpdateState);
	HX_MARK_MEMBER_NAME(fileArray,"fileArray");
	HX_MARK_MEMBER_NAME(firstFileDownloaded,"firstFileDownloaded");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void UpdateState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(fileArray,"fileArray");
	HX_VISIT_MEMBER_NAME(firstFileDownloaded,"firstFileDownloaded");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val UpdateState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fileArray") ) { return ::hx::Val( fileArray ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"initUpdate") ) { return ::hx::Val( initUpdate_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"requestData") ) { return ::hx::Val( requestData_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstFileDownloaded") ) { return ::hx::Val( firstFileDownloaded ); }
	}
	return super::__Field(inName,inCallProp);
}

bool UpdateState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"coolText") ) { outValue = ( coolText ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"finishedFiles") ) { outValue = ( finishedFiles ); return true; }
	}
	return false;
}

::hx::Val UpdateState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fileArray") ) { fileArray=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"firstFileDownloaded") ) { firstFileDownloaded=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool UpdateState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"coolText") ) { coolText=ioValue.Cast<  ::flixel::text::FlxText >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"finishedFiles") ) { finishedFiles=ioValue.Cast< int >(); return true; }
	}
	return false;
}

void UpdateState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("fileArray",7d,0d,b7,27));
	outFields->push(HX_("firstFileDownloaded",d3,fb,d7,9e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo UpdateState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(UpdateState_obj,fileArray),HX_("fileArray",7d,0d,b7,27)},
	{::hx::fsBool,(int)offsetof(UpdateState_obj,firstFileDownloaded),HX_("firstFileDownloaded",d3,fb,d7,9e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo UpdateState_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(void *) &UpdateState_obj::coolText,HX_("coolText",16,4c,07,ef)},
	{::hx::fsInt,(void *) &UpdateState_obj::finishedFiles,HX_("finishedFiles",a5,fd,b1,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String UpdateState_obj_sMemberFields[] = {
	HX_("fileArray",7d,0d,b7,27),
	HX_("firstFileDownloaded",d3,fb,d7,9e),
	HX_("create",fc,66,0f,7c),
	HX_("requestData",19,b5,c4,db),
	HX_("initUpdate",39,e1,4a,8b),
	::String(null()) };

static void UpdateState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(UpdateState_obj::coolText,"coolText");
	HX_MARK_MEMBER_NAME(UpdateState_obj::finishedFiles,"finishedFiles");
};

#ifdef HXCPP_VISIT_ALLOCS
static void UpdateState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(UpdateState_obj::coolText,"coolText");
	HX_VISIT_MEMBER_NAME(UpdateState_obj::finishedFiles,"finishedFiles");
};

#endif

::hx::Class UpdateState_obj::__mClass;

static ::String UpdateState_obj_sStaticFields[] = {
	HX_("coolText",16,4c,07,ef),
	HX_("finishedFiles",a5,fd,b1,f6),
	::String(null())
};

void UpdateState_obj::__register()
{
	UpdateState_obj _hx_dummy;
	UpdateState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("UpdateState",28,77,d6,4d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UpdateState_obj::__GetStatic;
	__mClass->mSetStaticField = &UpdateState_obj::__SetStatic;
	__mClass->mMarkFunc = UpdateState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(UpdateState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(UpdateState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< UpdateState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = UpdateState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UpdateState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UpdateState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void UpdateState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_1efbc113d48a82e5_45_boot)
HXDLIN(  45)		finishedFiles = 0;
            	}
}

