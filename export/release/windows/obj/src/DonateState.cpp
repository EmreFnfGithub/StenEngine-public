// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_CreditsState
#include <CreditsState.h>
#endif
#ifndef INCLUDED_DiscordClient
#include <DiscordClient.h>
#endif
#ifndef INCLUDED_DonateState
#include <DonateState.h>
#endif
#ifndef INCLUDED_KeyboardScheme
#include <KeyboardScheme.h>
#endif
#ifndef INCLUDED_MainMenuState
#include <MainMenuState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_graphics_FlxGraphic
#include <flixel/graphics/FlxGraphic.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxInput
#include <flixel/input/FlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInput
#include <flixel/input/IFlxInput.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepad
#include <flixel/input/gamepad/FlxGamepad.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadButton
#include <flixel/input/gamepad/FlxGamepadButton.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_FlxGamepadManager
#include <flixel/input/gamepad/FlxGamepadManager.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxBaseGamepadList
#include <flixel/input/gamepad/lists/FlxBaseGamepadList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_lists_FlxGamepadButtonList
#include <flixel/input/gamepad/lists/FlxGamepadButtonList.h>
#endif
#ifndef INCLUDED_flixel_input_gamepad_mappings_FlxGamepadMapping
#include <flixel/input/gamepad/mappings/FlxGamepadMapping.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2043796e65f5a4c7_23_new,"DonateState","new",0xd8c2c3f4,"DonateState.new","DonateState.hx",23,0x9d18f5fc)
static const ::String _hx_array_data_3c34fa02_1[] = {
	HX_("donatelink",e9,ec,a3,b9),HX_("credits",1a,0e,5e,13),
};
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_49_create,"DonateState","create",0x1d0de7e8,"DonateState.create","DonateState.hx",49,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_120_create,"DonateState","create",0x1d0de7e8,"DonateState.create","DonateState.hx",120,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_244_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",244,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_151_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",151,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_208_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",208,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_214_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",214,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_224_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",224,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_231_update,"DonateState","update",0x280406f5,"DonateState.update","DonateState.hx",231,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_249_goToState,"DonateState","goToState",0x92f17fe2,"DonateState.goToState","DonateState.hx",249,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_272_changeItem,"DonateState","changeItem",0x44d8618f,"DonateState.changeItem","DonateState.hx",272,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_261_changeItem,"DonateState","changeItem",0x44d8618f,"DonateState.changeItem","DonateState.hx",261,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_36_boot,"DonateState","boot",0xc9c1b21e,"DonateState.boot","DonateState.hx",36,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_38_boot,"DonateState","boot",0xc9c1b21e,"DonateState.boot","DonateState.hx",38,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_40_boot,"DonateState","boot",0xc9c1b21e,"DonateState.boot","DonateState.hx",40,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_41_boot,"DonateState","boot",0xc9c1b21e,"DonateState.boot","DonateState.hx",41,0x9d18f5fc)
HX_LOCAL_STACK_FRAME(_hx_pos_2043796e65f5a4c7_46_boot,"DonateState","boot",0xc9c1b21e,"DonateState.boot","DonateState.hx",46,0x9d18f5fc)

void DonateState_obj::__construct( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut){
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_23_new)
HXLINE( 148)		this->selectedSomethin = false;
HXLINE(  30)		this->optionShit = ::Array_obj< ::String >::fromData( _hx_array_data_3c34fa02_1,2);
HXLINE(  25)		this->curSelected = 0;
HXLINE(  23)		super::__construct(TransIn,TransOut);
            	}

Dynamic DonateState_obj::__CreateEmpty() { return new DonateState_obj; }

void *DonateState_obj::_hx_vtable = 0;

Dynamic DonateState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DonateState_obj > _hx_result = new DonateState_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DonateState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f706236) {
		if (inClassId<=(int)0x23a57bae) {
			if (inClassId<=(int)0x0699617a) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0699617a;
			} else {
				return inClassId==(int)0x23a57bae;
			}
		} else {
			return inClassId==(int)0x2f064378 || inClassId==(int)0x3f706236;
		}
	} else {
		if (inClassId<=(int)0x7c795c9f) {
			return inClassId==(int)0x62817b24 || inClassId==(int)0x7c795c9f;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	}
}

void DonateState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_49_create)
HXLINE(  48)		 ::DonateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  51)		this->clean();
HXLINE(  52)		::PlayState_obj::inDaPlay = false;
HXLINE(  55)		::DiscordClient_obj::changePresence(HX_("In the Menus",0a,c1,ad,c6),null(),null(),null(),null());
HXLINE(  58)		if (::hx::IsNull( ::flixel::FlxG_obj::sound->music->_channel )) {
HXLINE(  60)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  60)			::String library = null();
HXDLIN(  60)			_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("freakyMenu",15,c9,93,86)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),null(),null(),null());
            		}
HXLINE(  63)		this->persistentUpdate = (this->persistentDraw = true);
HXLINE(  65)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-100,null(),null());
HXDLIN(  65)		 ::flixel::FlxSprite bg1 = bg->loadGraphic(::Paths_obj::loadImage(HX_("menuBG",24,65,6d,05),null()),null(),null(),null(),null(),null());
HXLINE(  66)		bg1->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  67)		bg1->scrollFactor->set_y(((Float)0.10));
HXLINE(  68)		bg1->setGraphicSize(::Std_obj::_hx_int((bg1->get_width() * ((Float)1.1))),null());
HXLINE(  69)		bg1->updateHitbox();
HXLINE(  70)		{
HXLINE(  70)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  70)			bool _hx_tmp;
HXDLIN(  70)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  70)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  70)					_hx_tmp = false;
            				}
            			}
HXDLIN(  70)			if (_hx_tmp) {
HXLINE(  70)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  70)				bg1->set_x(((( (Float)(_hx_tmp) ) - bg1->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  70)			bool _hx_tmp1;
HXDLIN(  70)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  70)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE(  70)					_hx_tmp1 = false;
            				}
            			}
HXDLIN(  70)			if (_hx_tmp1) {
HXLINE(  70)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  70)				bg1->set_y(((( (Float)(_hx_tmp) ) - bg1->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  71)		bg1->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  72)		this->add(bg1);
HXLINE(  74)		this->camFollow =  ::flixel::FlxObject_obj::__alloc( HX_CTX ,0,0,1,1);
HXLINE(  75)		this->add(this->camFollow);
HXLINE(  77)		 ::flixel::FlxSprite _hx_tmp2 =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-80,null(),null());
HXDLIN(  77)		this->magenta = _hx_tmp2->loadGraphic(::Paths_obj::loadImage(HX_("menuDesat",26,91,04,72),null()),null(),null(),null(),null(),null());
HXLINE(  78)		this->magenta->scrollFactor->set_x(( (Float)(0) ));
HXLINE(  79)		this->magenta->scrollFactor->set_y(((Float)0.10));
HXLINE(  80)		 ::flixel::FlxSprite _hx_tmp3 = this->magenta;
HXDLIN(  80)		_hx_tmp3->setGraphicSize(::Std_obj::_hx_int((this->magenta->get_width() * ((Float)1.1))),null());
HXLINE(  81)		this->magenta->updateHitbox();
HXLINE(  82)		{
HXLINE(  82)			 ::flixel::FlxSprite _this = this->magenta;
HXDLIN(  82)			 ::flixel::util::FlxAxes axes1 = ::flixel::util::FlxAxes_obj::XY_dyn();
HXDLIN(  82)			bool _hx_tmp4;
HXDLIN(  82)			switch((int)(axes1->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  82)					_hx_tmp4 = true;
            				}
            				break;
            				default:{
HXLINE(  82)					_hx_tmp4 = false;
            				}
            			}
HXDLIN(  82)			if (_hx_tmp4) {
HXLINE(  82)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN(  82)				_this->set_x(((( (Float)(_hx_tmp) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  82)			bool _hx_tmp5;
HXDLIN(  82)			switch((int)(axes1->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  82)					_hx_tmp5 = true;
            				}
            				break;
            				default:{
HXLINE(  82)					_hx_tmp5 = false;
            				}
            			}
HXDLIN(  82)			if (_hx_tmp5) {
HXLINE(  82)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN(  82)				_this->set_y(((( (Float)(_hx_tmp) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  83)		this->magenta->set_visible(false);
HXLINE(  84)		this->magenta->set_antialiasing(( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("antialiasing",f4,16,b3,48),::hx::paccDynamic)) ));
HXLINE(  85)		this->magenta->set_color(-167525);
HXLINE(  86)		this->add(this->magenta);
HXLINE(  89)		this->menuItems =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  90)		this->add(this->menuItems);
HXLINE(  92)		Float scale = ( (Float)(1) );
HXLINE(  97)		{
HXLINE(  97)			int _g = 0;
HXDLIN(  97)			int _g1 = this->optionShit->length;
HXDLIN(  97)			while((_g < _g1)){
HXLINE(  97)				_g = (_g + 1);
HXDLIN(  97)				int i = (_g - 1);
HXLINE(  99)				Float offset = (( (Float)(108) ) - ((::Math_obj::max(( (Float)(this->optionShit->length) ),( (Float)(4) )) - ( (Float)(4) )) * ( (Float)(80) )));
HXLINE( 100)				 ::flixel::FlxSprite menuItem =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,((i * 140) + offset),null());
HXLINE( 101)				menuItem->scale->set_x(scale);
HXLINE( 102)				menuItem->scale->set_y(scale);
HXLINE( 103)				menuItem->set_frames(::Paths_obj::getSparrowAtlas((HX_("mainmenu/menu_",a9,7b,4b,27) + this->optionShit->__get(i)),null(),null()));
HXLINE( 104)				menuItem->animation->addByPrefix(HX_("idle",14,a7,b3,45),(this->optionShit->__get(i) + HX_(" basic",8e,b6,25,79)),24,null(),null(),null());
HXLINE( 105)				menuItem->animation->addByPrefix(HX_("selected",5b,2a,6d,b1),(this->optionShit->__get(i) + HX_(" white",89,d6,28,95)),24,null(),null(),null());
HXLINE( 106)				menuItem->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 107)				menuItem->ID = i;
HXLINE( 108)				{
HXLINE( 108)					 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 108)					if (::hx::IsNull( axes )) {
HXLINE( 108)						axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            					}
HXDLIN( 108)					bool _hx_tmp;
HXDLIN( 108)					switch((int)(axes->_hx_getIndex())){
            						case (int)0: case (int)2: {
HXLINE( 108)							_hx_tmp = true;
            						}
            						break;
            						default:{
HXLINE( 108)							_hx_tmp = false;
            						}
            					}
HXDLIN( 108)					if (_hx_tmp) {
HXLINE( 108)						int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 108)						menuItem->set_x(((( (Float)(_hx_tmp) ) - menuItem->get_width()) / ( (Float)(2) )));
            					}
HXDLIN( 108)					bool _hx_tmp1;
HXDLIN( 108)					switch((int)(axes->_hx_getIndex())){
            						case (int)1: case (int)2: {
HXLINE( 108)							_hx_tmp1 = true;
            						}
            						break;
            						default:{
HXLINE( 108)							_hx_tmp1 = false;
            						}
            					}
HXDLIN( 108)					if (_hx_tmp1) {
HXLINE( 108)						int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 108)						menuItem->set_y(((( (Float)(_hx_tmp) ) - menuItem->get_height()) / ( (Float)(2) )));
            					}
            				}
HXLINE( 109)				this->menuItems->add(menuItem).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 110)				Float scr = (( (Float)((this->optionShit->length - 4)) ) * ((Float)0.135));
HXLINE( 111)				if ((this->optionShit->length < 6)) {
HXLINE( 111)					scr = ( (Float)(0) );
            				}
HXLINE( 112)				menuItem->scrollFactor->set(0,scr);
HXLINE( 113)				menuItem->set_antialiasing(true);
HXLINE( 115)				menuItem->updateHitbox();
HXLINE( 116)				if (::DonateState_obj::firstStart) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DonateState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::tweens::FlxTween flxTween){
            						HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_120_create)
HXLINE( 121)						::DonateState_obj::finishedFunnyMove = true;
HXLINE( 122)						_gthis->changeItem(null());
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 117)					::flixel::tweens::FlxTween_obj::tween(menuItem, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("y",79,00,00,00),(60 + (i * 160)))),(1 + (( (Float)(i) ) * ((Float)0.25))), ::Dynamic(::hx::Anon_obj::Create(2)
            						->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::expoInOut_dyn())
            						->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis)))));
            				}
            			}
            		}
HXLINE( 127)		::DonateState_obj::firstStart = false;
HXLINE( 129)		::flixel::FlxG_obj::camera->follow(this->camFollow,null(),(((Float)0.60) * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ))));
HXLINE( 131)		 ::flixel::text::FlxText versionShit =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,5,(::flixel::FlxG_obj::height - 18),0,::DonateState_obj::gameVer,12,null());
HXLINE( 132)		versionShit->scrollFactor->set(null(),null());
HXLINE( 133)		versionShit->setFormat(HX_("VCR OSD Mono",be,44,e4,b8),16,-1,HX_("left",07,08,b0,47),::flixel::text::FlxTextBorderStyle_obj::OUTLINE_dyn(),-16777216,null());
HXLINE( 134)		this->add(versionShit);
HXLINE( 138)		if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("dfjk",c3,18,67,42),::hx::paccDynamic)) )) {
HXLINE( 139)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Solo_dyn(),true);
            		}
            		else {
HXLINE( 141)			::PlayerSettings_obj::player1->controls->setKeyboardScheme(::KeyboardScheme_obj::Duo(true),true);
            		}
HXLINE( 143)		this->changeItem(null());
HXLINE( 145)		this->super::create();
            	}


void DonateState_obj::update(Float elapsed){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_244_update)
HXLINE( 244)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::X_dyn();
HXDLIN( 244)			if (::hx::IsNull( axes )) {
HXLINE( 244)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXDLIN( 244)			bool _hx_tmp;
HXDLIN( 244)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE( 244)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE( 244)					_hx_tmp = false;
            				}
            			}
HXDLIN( 244)			if (_hx_tmp) {
HXLINE( 244)				int _hx_tmp = ::flixel::FlxG_obj::width;
HXDLIN( 244)				spr->set_x(((( (Float)(_hx_tmp) ) - spr->get_width()) / ( (Float)(2) )));
            			}
HXDLIN( 244)			bool _hx_tmp1;
HXDLIN( 244)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE( 244)					_hx_tmp1 = true;
            				}
            				break;
            				default:{
HXLINE( 244)					_hx_tmp1 = false;
            				}
            			}
HXDLIN( 244)			if (_hx_tmp1) {
HXLINE( 244)				int _hx_tmp = ::flixel::FlxG_obj::height;
HXDLIN( 244)				spr->set_y(((( (Float)(_hx_tmp) ) - spr->get_height()) / ( (Float)(2) )));
            			}
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_151_update)
HXLINE( 150)		 ::DonateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 152)		if ((::flixel::FlxG_obj::sound->music->_volume < ((Float)0.8))) {
HXLINE( 154)			 ::flixel::_hx_system::FlxSound _g = ::flixel::FlxG_obj::sound->music;
HXDLIN( 154)			_g->set_volume((_g->_volume + (((Float)0.5) * ::flixel::FlxG_obj::elapsed)));
            		}
HXLINE( 157)		if (!(this->selectedSomethin)) {
HXLINE( 159)			 ::flixel::input::gamepad::FlxGamepad gamepad = ::flixel::FlxG_obj::gamepads->lastActive;
HXLINE( 161)			if (::hx::IsNotNull( gamepad )) {
HXLINE( 163)				 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this = gamepad->justPressed;
HXDLIN( 163)				int id = 11;
HXDLIN( 163)				 ::flixel::input::gamepad::FlxGamepad _this1 = _this->gamepad;
HXDLIN( 163)				int Status = _this->status;
HXDLIN( 163)				bool _hx_tmp;
HXDLIN( 163)				switch((int)(id)){
            					case (int)-2: {
HXLINE( 163)						_hx_tmp = _this1->anyButton(Status);
            					}
            					break;
            					case (int)-1: {
HXLINE( 163)						_hx_tmp = !(_this1->anyButton(Status));
            					}
            					break;
            					default:{
HXLINE( 163)						int RawID = _this1->mapping->getRawID(id);
HXDLIN( 163)						 ::flixel::input::gamepad::FlxGamepadButton button = _this1->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 163)						if (::hx::IsNotNull( button )) {
HXLINE( 163)							_hx_tmp = button->hasState(Status);
            						}
            						else {
HXLINE( 163)							_hx_tmp = false;
            						}
            					}
            				}
HXDLIN( 163)				if (_hx_tmp) {
HXLINE( 165)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 165)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 166)					this->changeItem(-1);
            				}
HXLINE( 168)				 ::flixel::input::gamepad::lists::FlxGamepadButtonList _this2 = gamepad->justPressed;
HXDLIN( 168)				int id1 = 12;
HXDLIN( 168)				 ::flixel::input::gamepad::FlxGamepad _this3 = _this2->gamepad;
HXDLIN( 168)				int Status1 = _this2->status;
HXDLIN( 168)				bool _hx_tmp1;
HXDLIN( 168)				switch((int)(id1)){
            					case (int)-2: {
HXLINE( 168)						_hx_tmp1 = _this3->anyButton(Status1);
            					}
            					break;
            					case (int)-1: {
HXLINE( 168)						_hx_tmp1 = !(_this3->anyButton(Status1));
            					}
            					break;
            					default:{
HXLINE( 168)						int RawID = _this3->mapping->getRawID(id1);
HXDLIN( 168)						 ::flixel::input::gamepad::FlxGamepadButton button = _this3->buttons->__get(RawID).StaticCast<  ::flixel::input::gamepad::FlxGamepadButton >();
HXDLIN( 168)						if (::hx::IsNotNull( button )) {
HXLINE( 168)							_hx_tmp1 = button->hasState(Status1);
            						}
            						else {
HXLINE( 168)							_hx_tmp1 = false;
            						}
            					}
            				}
HXDLIN( 168)				if (_hx_tmp1) {
HXLINE( 170)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 170)					_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 171)					this->changeItem(1);
            				}
            			}
HXLINE( 175)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 175)			if (_this->keyManager->checkStatusUnsafe(38,_this->status)) {
HXLINE( 177)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 177)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 178)				this->changeItem(-1);
            			}
HXLINE( 181)			 ::flixel::input::keyboard::FlxKeyList _this1 = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN( 181)			if (_this1->keyManager->checkStatusUnsafe(40,_this1->status)) {
HXLINE( 183)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 183)				_hx_tmp->play(::Paths_obj::sound(HX_("scrollMenu",4c,d4,18,06),null()),null(),null(),null(),null(),null());
HXLINE( 184)				this->changeItem(1);
            			}
HXLINE( 187)			if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE( 189)				 ::flixel::FlxState nextState =  ::MainMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 189)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 189)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
HXLINE( 192)			if (::PlayerSettings_obj::player1->controls->_accept->check()) {
HXLINE( 194)				if ((this->optionShit->__get(this->curSelected) == HX_("donatelink",e9,ec,a3,b9))) {
HXLINE( 196)					this->fancyOpenURL(HX_("https://ninja-muffin24.itch.io/funkin",69,b0,72,92));
            				}
            				else {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_3, ::DonateState,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::FlxSprite spr){
            						HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_208_update)
HXLINE( 208)						if ((_gthis->curSelected != spr->ID)) {
            							HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,spr) HXARGC(1)
            							void _hx_run( ::flixel::tweens::FlxTween twn){
            								HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_214_update)
HXLINE( 214)								spr->kill();
            							}
            							HX_END_LOCAL_FUNC1((void))

HXLINE( 210)							::flixel::tweens::FlxTween_obj::tween(spr, ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("alpha",5e,a7,96,21),0)),((Float)1.3), ::Dynamic(::hx::Anon_obj::Create(2)
            								->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quadOut_dyn())
            								->setFixed(1,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(spr)))));
            						}
            						else {
HXLINE( 220)							if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::DonateState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::effects::FlxFlicker flick){
            									HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_224_update)
HXLINE( 224)									_gthis->goToState();
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 222)								::flixel::effects::FlxFlicker_obj::flicker(spr,1,((Float)0.06),false,false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            							}
            							else {
            								HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::DonateState,_gthis) HXARGC(1)
            								void _hx_run( ::flixel::util::FlxTimer tmr){
            									HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_231_update)
HXLINE( 231)									_gthis->goToState();
            								}
            								HX_END_LOCAL_FUNC1((void))

HXLINE( 229)								 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_2(_gthis)),null());
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 200)					this->selectedSomethin = true;
HXLINE( 201)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 201)					_hx_tmp->play(::Paths_obj::sound(HX_("confirmMenu",bf,8e,fe,3c),null()),null(),null(),null(),null(),null());
HXLINE( 203)					if (( (bool)(::flixel::FlxG_obj::save->data->__Field(HX_("flashing",32,85,e8,99),::hx::paccDynamic)) )) {
HXLINE( 204)						::flixel::effects::FlxFlicker_obj::flicker(this->magenta,((Float)1.1),((Float)0.15),false,null(),null(),null());
            					}
HXLINE( 206)					this->menuItems->forEach( ::Dynamic(new _hx_Closure_3(_gthis)),null());
            				}
            			}
            		}
HXLINE( 240)		this->super::update(elapsed);
HXLINE( 242)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_4()),null());
            	}


void DonateState_obj::goToState(){
            	HX_GC_STACKFRAME(&_hx_pos_2043796e65f5a4c7_249_goToState)
HXLINE( 250)		::String daChoice = this->optionShit->__get(this->curSelected);
HXLINE( 252)		if ((daChoice == HX_("credits",1a,0e,5e,13))) {
HXLINE( 255)			 ::flixel::FlxState nextState =  ::CreditsState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN( 255)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 255)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(DonateState_obj,goToState,(void))

void DonateState_obj::changeItem(::hx::Null< int >  __o_huh){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DonateState,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite spr){
            			HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_272_changeItem)
HXLINE( 273)			spr->animation->play(HX_("idle",14,a7,b3,45),null(),null(),null());
HXLINE( 275)			bool _hx_tmp;
HXDLIN( 275)			if ((spr->ID == _gthis->curSelected)) {
HXLINE( 275)				_hx_tmp = ::DonateState_obj::finishedFunnyMove;
            			}
            			else {
HXLINE( 275)				_hx_tmp = false;
            			}
HXDLIN( 275)			if (_hx_tmp) {
HXLINE( 277)				spr->animation->play(HX_("selected",5b,2a,6d,b1),null(),null(),null());
HXLINE( 278)				 ::flixel::FlxObject _gthis1 = _gthis->camFollow;
HXDLIN( 278)				Float _hx_tmp = spr->getGraphicMidpoint(null())->x;
HXDLIN( 278)				_gthis1->setPosition(_hx_tmp,spr->getGraphicMidpoint(null())->y);
            			}
HXLINE( 281)			spr->animation->_curAnim->set_frameRate((( (Float)(24) ) * (( (Float)(60) ) / ( (Float)(::flixel::FlxG_obj::save->data->__Field(HX_("fpsCap",a9,7b,7e,91),::hx::paccDynamic)) ))));
HXLINE( 283)			spr->updateHitbox();
            		}
            		HX_END_LOCAL_FUNC1((void))

            		int huh = __o_huh.Default(0);
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_261_changeItem)
HXLINE( 260)		 ::DonateState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 262)		if (::DonateState_obj::finishedFunnyMove) {
HXLINE( 264)			 ::DonateState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 264)			_hx_tmp->curSelected = (_hx_tmp->curSelected + huh);
HXLINE( 266)			if ((this->curSelected >= this->menuItems->length)) {
HXLINE( 267)				this->curSelected = 0;
            			}
HXLINE( 268)			if ((this->curSelected < 0)) {
HXLINE( 269)				this->curSelected = (this->menuItems->length - 1);
            			}
            		}
HXLINE( 271)		this->menuItems->forEach( ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(DonateState_obj,changeItem,(void))

bool DonateState_obj::firstStart;

::String DonateState_obj::nightly;

::String DonateState_obj::StenEngineVer;

::String DonateState_obj::gameVer;

bool DonateState_obj::finishedFunnyMove;


::hx::ObjectPtr< DonateState_obj > DonateState_obj::__new( ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	::hx::ObjectPtr< DonateState_obj > __this = new DonateState_obj();
	__this->__construct(TransIn,TransOut);
	return __this;
}

::hx::ObjectPtr< DonateState_obj > DonateState_obj::__alloc(::hx::Ctx *_hx_ctx, ::flixel::addons::transition::TransitionData TransIn, ::flixel::addons::transition::TransitionData TransOut) {
	DonateState_obj *__this = (DonateState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DonateState_obj), true, "DonateState"));
	*(void **)__this = DonateState_obj::_hx_vtable;
	__this->__construct(TransIn,TransOut);
	return __this;
}

DonateState_obj::DonateState_obj()
{
}

void DonateState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DonateState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(menuItems,"menuItems");
	HX_MARK_MEMBER_NAME(optionShit,"optionShit");
	HX_MARK_MEMBER_NAME(newGaming,"newGaming");
	HX_MARK_MEMBER_NAME(newGaming2,"newGaming2");
	HX_MARK_MEMBER_NAME(magenta,"magenta");
	HX_MARK_MEMBER_NAME(camFollow,"camFollow");
	HX_MARK_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::MusicBeatState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DonateState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(menuItems,"menuItems");
	HX_VISIT_MEMBER_NAME(optionShit,"optionShit");
	HX_VISIT_MEMBER_NAME(newGaming,"newGaming");
	HX_VISIT_MEMBER_NAME(newGaming2,"newGaming2");
	HX_VISIT_MEMBER_NAME(magenta,"magenta");
	HX_VISIT_MEMBER_NAME(camFollow,"camFollow");
	HX_VISIT_MEMBER_NAME(selectedSomethin,"selectedSomethin");
	 ::MusicBeatState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DonateState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"magenta") ) { return ::hx::Val( magenta ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { return ::hx::Val( menuItems ); }
		if (HX_FIELD_EQ(inName,"newGaming") ) { return ::hx::Val( newGaming ); }
		if (HX_FIELD_EQ(inName,"camFollow") ) { return ::hx::Val( camFollow ); }
		if (HX_FIELD_EQ(inName,"goToState") ) { return ::hx::Val( goToState_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { return ::hx::Val( optionShit ); }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { return ::hx::Val( newGaming2 ); }
		if (HX_FIELD_EQ(inName,"changeItem") ) { return ::hx::Val( changeItem_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { return ::hx::Val( selectedSomethin ); }
	}
	return super::__Field(inName,inCallProp);
}

bool DonateState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { outValue = ( nightly ); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { outValue = ( gameVer ); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStart") ) { outValue = ( firstStart ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"StenEngineVer") ) { outValue = ( StenEngineVer ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { outValue = ( finishedFunnyMove ); return true; }
	}
	return false;
}

::hx::Val DonateState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"magenta") ) { magenta=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"menuItems") ) { menuItems=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming") ) { newGaming=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"camFollow") ) { camFollow=inValue.Cast<  ::flixel::FlxObject >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"optionShit") ) { optionShit=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"newGaming2") ) { newGaming2=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"selectedSomethin") ) { selectedSomethin=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool DonateState_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"nightly") ) { nightly=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"gameVer") ) { gameVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"firstStart") ) { firstStart=ioValue.Cast< bool >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"StenEngineVer") ) { StenEngineVer=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"finishedFunnyMove") ) { finishedFunnyMove=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void DonateState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("menuItems",e1,15,e5,5c));
	outFields->push(HX_("optionShit",d5,2d,ee,91));
	outFields->push(HX_("newGaming",2f,8a,ad,0e));
	outFields->push(HX_("newGaming2",23,5f,2b,c9));
	outFields->push(HX_("magenta",29,ba,9d,0e));
	outFields->push(HX_("camFollow",e0,6e,47,22));
	outFields->push(HX_("selectedSomethin",c8,ec,fb,99));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DonateState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(DonateState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(DonateState_obj,menuItems),HX_("menuItems",e1,15,e5,5c)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DonateState_obj,optionShit),HX_("optionShit",d5,2d,ee,91)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DonateState_obj,newGaming),HX_("newGaming",2f,8a,ad,0e)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DonateState_obj,newGaming2),HX_("newGaming2",23,5f,2b,c9)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DonateState_obj,magenta),HX_("magenta",29,ba,9d,0e)},
	{::hx::fsObject /*  ::flixel::FlxObject */ ,(int)offsetof(DonateState_obj,camFollow),HX_("camFollow",e0,6e,47,22)},
	{::hx::fsBool,(int)offsetof(DonateState_obj,selectedSomethin),HX_("selectedSomethin",c8,ec,fb,99)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo DonateState_obj_sStaticStorageInfo[] = {
	{::hx::fsBool,(void *) &DonateState_obj::firstStart,HX_("firstStart",12,be,e9,c1)},
	{::hx::fsString,(void *) &DonateState_obj::nightly,HX_("nightly",65,3e,0e,6d)},
	{::hx::fsString,(void *) &DonateState_obj::StenEngineVer,HX_("StenEngineVer",f7,26,58,9e)},
	{::hx::fsString,(void *) &DonateState_obj::gameVer,HX_("gameVer",91,29,72,89)},
	{::hx::fsBool,(void *) &DonateState_obj::finishedFunnyMove,HX_("finishedFunnyMove",a9,44,72,47)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String DonateState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("menuItems",e1,15,e5,5c),
	HX_("optionShit",d5,2d,ee,91),
	HX_("newGaming",2f,8a,ad,0e),
	HX_("newGaming2",23,5f,2b,c9),
	HX_("magenta",29,ba,9d,0e),
	HX_("camFollow",e0,6e,47,22),
	HX_("create",fc,66,0f,7c),
	HX_("selectedSomethin",c8,ec,fb,99),
	HX_("update",09,86,05,87),
	HX_("goToState",4e,a5,e1,c9),
	HX_("changeItem",a3,fa,08,20),
	::String(null()) };

static void DonateState_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(DonateState_obj::firstStart,"firstStart");
	HX_MARK_MEMBER_NAME(DonateState_obj::nightly,"nightly");
	HX_MARK_MEMBER_NAME(DonateState_obj::StenEngineVer,"StenEngineVer");
	HX_MARK_MEMBER_NAME(DonateState_obj::gameVer,"gameVer");
	HX_MARK_MEMBER_NAME(DonateState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#ifdef HXCPP_VISIT_ALLOCS
static void DonateState_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(DonateState_obj::firstStart,"firstStart");
	HX_VISIT_MEMBER_NAME(DonateState_obj::nightly,"nightly");
	HX_VISIT_MEMBER_NAME(DonateState_obj::StenEngineVer,"StenEngineVer");
	HX_VISIT_MEMBER_NAME(DonateState_obj::gameVer,"gameVer");
	HX_VISIT_MEMBER_NAME(DonateState_obj::finishedFunnyMove,"finishedFunnyMove");
};

#endif

::hx::Class DonateState_obj::__mClass;

static ::String DonateState_obj_sStaticFields[] = {
	HX_("firstStart",12,be,e9,c1),
	HX_("nightly",65,3e,0e,6d),
	HX_("StenEngineVer",f7,26,58,9e),
	HX_("gameVer",91,29,72,89),
	HX_("finishedFunnyMove",a9,44,72,47),
	::String(null())
};

void DonateState_obj::__register()
{
	DonateState_obj _hx_dummy;
	DonateState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DonateState",02,fa,34,3c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &DonateState_obj::__GetStatic;
	__mClass->mSetStaticField = &DonateState_obj::__SetStatic;
	__mClass->mMarkFunc = DonateState_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(DonateState_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DonateState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DonateState_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = DonateState_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DonateState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DonateState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void DonateState_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_36_boot)
HXDLIN(  36)		firstStart = true;
            	}
{
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_38_boot)
HXDLIN(  38)		nightly = HX_("",00,00,00,00);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_40_boot)
HXDLIN(  40)		StenEngineVer = (HX_("0.1 Demo",10,80,df,63) + ::DonateState_obj::nightly);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_41_boot)
HXDLIN(  41)		gameVer = HX_("0.2.7.1",40,93,0b,19);
            	}
{
            	HX_STACKFRAME(&_hx_pos_2043796e65f5a4c7_46_boot)
HXDLIN(  46)		finishedFunnyMove = false;
            	}
}

